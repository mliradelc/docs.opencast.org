{
    "docs": [
        {
            "location": "/",
            "text": "Opencast Administration Guide\n\n\nWelcome to the Opencast Universe! Opencast is an open-source enterprise level lecture recording system. The core of the\nsystem delivers functionality for scheduling, media encoding, editing and content delivery. For lecture capture,\nOpencast provides capture agent software and third party appliances are available. An awesome community provides new\nfeatures and support.\n\n\nThe Software\n\n\nOpencast contains everything you need for scheduling captures, trimming, captioning, and conversion of output media to\nseveral formats and our engage components.  The core can be deployed on one (all-in-one deployment) or many (distributed\ndeployment) Linux servers so your Opencast installation can grow with the needs of your university.\n\n\nRelease Documentation\n\n\nThe Opencast Release Documentation is the official Opencast documentation for each release. It contains:\n\n\n\n\nRelease Notes\n\n\nUpgrade\n\n\nChangelog\n\n\nInstallation Guides\n\n\nConfiguration Guides\n\n\nBasic Configuration\n\n\nDatabase Configuration\n\n\nWorkflow Configuration\n\n\nEncoding Configuration\n\n\nmore...\n\n\n\n\n\n\nModule Documentation\n\n\nAtom and RSS Feed\n\n\nMedia Module\n\n\nStream Security\n\n\nText Extraction\n\n\nVideo Segmentation\n\n\nYouTube Publication\n\n\nmore...\n\n\n\n\n\n\n\n\nFurther Documentation\n\n\nIn addition to this official documentation, further guides and tips can be found in the on the mailing lists, the IRC\nchannel and at the regular meetings.",
            "title": "Home"
        },
        {
            "location": "/#opencast-administration-guide",
            "text": "Welcome to the Opencast Universe! Opencast is an open-source enterprise level lecture recording system. The core of the\nsystem delivers functionality for scheduling, media encoding, editing and content delivery. For lecture capture,\nOpencast provides capture agent software and third party appliances are available. An awesome community provides new\nfeatures and support.",
            "title": "Opencast Administration Guide"
        },
        {
            "location": "/#the-software",
            "text": "Opencast contains everything you need for scheduling captures, trimming, captioning, and conversion of output media to\nseveral formats and our engage components.  The core can be deployed on one (all-in-one deployment) or many (distributed\ndeployment) Linux servers so your Opencast installation can grow with the needs of your university.",
            "title": "The Software"
        },
        {
            "location": "/#release-documentation",
            "text": "The Opencast Release Documentation is the official Opencast documentation for each release. It contains:   Release Notes  Upgrade  Changelog  Installation Guides  Configuration Guides  Basic Configuration  Database Configuration  Workflow Configuration  Encoding Configuration  more...    Module Documentation  Atom and RSS Feed  Media Module  Stream Security  Text Extraction  Video Segmentation  YouTube Publication  more...",
            "title": "Release Documentation"
        },
        {
            "location": "/#further-documentation",
            "text": "In addition to this official documentation, further guides and tips can be found in the on the mailing lists, the IRC\nchannel and at the regular meetings.",
            "title": "Further Documentation"
        },
        {
            "location": "/releasenotes/",
            "text": "Opencast 2.3: Release Notes\n\n\nEnabling external interoperability.\n\n\nOpencast 2.3 introduces the new external application API to more easily connect to and integrate other tools like\nlearning management systems. It also continues the work of improving the administrative user interfaces and other parts\nof Opencast by fixing over 100 issues.\n\n\nNew Features and Improvements\n\n\n\n\n\n\nExternal API\n - While Opencast always was very strong when it came to the integration of third-party systems,\n    the introduction of this brand new state-of-the-art API enables integrators to deal with even more complex\n    integration scenarios. Its key feature is the support of versioning: Multiple different versions of the API can be\n    offered the same time, enabling service providers to upgrade the API without breaking external dependencies. With\n    fine-grained, easily customizable per-user access control, a comprehensive documentation and its ease of use, this\n    new API builds a solid basis for the future of Opencast - Integration has never been more effective and fun!\n\n\n\n\n\n\nEvent Statistics\n - The statistic counters that display statistics of events and allow the user to quickly apply\n    filters have been significantly improved by both using the screen estate more effectively and better fitting into\n    the overall UI design. Besides this, support for role-based visibility and optimizations to improve performance in\n    large-scale scenarios make this useful feature even more useful.\n\n\n\n\n\n\nCapture Agent API\n - The capture agent API now better supports ad-hoc recordings by allowing capture agents to\n    start (create), stop and prolong immediate events. Besides this, the missing parts of the JSON interface have been\n    completed.\n\n\n\n\n\n\nAdmin UI Style Guide\n - A comprehensive style guide for the Admin UI has been written and made publicly available\n    to help to maintain the high level of graphical design in the future.\n\n\n\n\n\n\nEnhanced Themes\n - In addition to intro and outro movies, themes now also support titles: Metadata can be\n    rendered on top of an image that can be uploaded or extracted from the recording. This image is then converted to a\n    movie and rendered into the final video so that Opencast can render self-describing videos. The default workflow\n    has been extended to support this kind of enriching recordings with metadata out-of-the-box.\n\n\n\n\n\n\nNew Workflow Operations Handler\n - Two new workflow operation handlers have been added\n\n\n\n\nWOH export-wf-properties enables Adopters to make workflow settings persistent for later re-use\n\n\nWOH import-wf-properties can load those persistent settings back into workflow instances to be used\n\n\n\n\n\n\n\n\nImproved Workflow Operation Handlers\n - Some existing workflow operation handlers have been improved resulting in\n    more flexible and powerful processing capabilities\n\n\n\n\nWOH segment-video\n has been significantly optimized to provide better video segmentation results. In particular,\n  it handles (accidental) processing of non-segmentable content vastly better\n\n\nWOH publish-engage, retract-engage, publish-configure and retract-configure\n have been optmized to perform\n  significantly better when it comes to publish/retract a large  number of files\n\n\nWOH theme\n supports more settings of themes that can be used to control the flow of workflow operations\n\n\n\n\n\n\n\n\nNew Language Supported\n - British-English has been added to improve the localization for non-US English speaking\n    countries, in particular when it comes to non-US date formats.\n\n\n\n\n\n\nMaintainability\n - By removing obsolete legacy code throughout the Opencast code basis, updating various\n    libraries, improving the documentation, design and performance, we continuously ensure Opencast's maintainability\n\n\n\n\n\n\nFor a completed list of changes, have a look at the \nchangelog\n.\n\n\nAdditional Notes About 2.3.1\n\n\nOpencast 2.3.1 fixes a critical issue with publication on distributed systems as well as two security issues and several\nminor issues.\n\n\nAdditional Notes About 2.3.2\n\n\nOpencast 2.3.2 is a bug fix release that fixes some minor issues of Opencast 2.3.1. For more details, please have a look\nat the \nchangelog\n.\n\n\nAdditional Notes About 2.3.3\n\n\nOpencast 2.3.3 is a bug fix release that fixes some issues of Opencast 2.3.2, including an important security issue.\nFor more details, please have a look at the \nchangelog\n.\n\n\nAdditional Notes About 2.3.4\n\n\nOpencast 2.3.4 is a bug fix release that fixes some issues of Opencast 2.3.3. For more details, please have a look at\nthe \nchangelog\n.\n\n\nAdditional Notes About 2.3.5\n\n\nOpencast 2.3.5 is a bug fix release that fixes some issues of Opencast 2.3.4, including twosecurity issue related to\nstream security.  For more details, please have a look at the \nchangelog\n.\n\n\nOpencast 2.3 Release Schedule\n\n\n\n\n\n\n\n\nDate\n\n\nPhase\n\n\n\n\n\n\n\n\n\n\nOctober \n1st\n 4th\n\n\nFeature Freeze\n\n\n\n\n\n\nOctober \n1st\n 4th - 23th\n\n\nInternal QA and bug fixing phase\n\n\n\n\n\n\nOctober 10th - 16th\n\n\nReview Test Cases\n\n\n\n\n\n\nOctober 17th - 23th\n\n\nDocumentation Review\n\n\n\n\n\n\nOctober 24th - November 14th\n\n\nPublic QA phase\n\n\n\n\n\n\nNovember 15th - 28th\n\n\nAdditional bug fixing phase\n\n\n\n\n\n\nNovember 21th - 27th\n\n\nTranslation week\n\n\n\n\n\n\nNovember 28th - December 11th\n\n\nFinal QA phase\n\n\n\n\n\n\nDecember 13th\n\n\nRelease of Opencast 2.3",
            "title": "Release Notes"
        },
        {
            "location": "/releasenotes/#opencast-23-release-notes",
            "text": "Enabling external interoperability.  Opencast 2.3 introduces the new external application API to more easily connect to and integrate other tools like\nlearning management systems. It also continues the work of improving the administrative user interfaces and other parts\nof Opencast by fixing over 100 issues.",
            "title": "Opencast 2.3: Release Notes"
        },
        {
            "location": "/releasenotes/#new-features-and-improvements",
            "text": "External API  - While Opencast always was very strong when it came to the integration of third-party systems,\n    the introduction of this brand new state-of-the-art API enables integrators to deal with even more complex\n    integration scenarios. Its key feature is the support of versioning: Multiple different versions of the API can be\n    offered the same time, enabling service providers to upgrade the API without breaking external dependencies. With\n    fine-grained, easily customizable per-user access control, a comprehensive documentation and its ease of use, this\n    new API builds a solid basis for the future of Opencast - Integration has never been more effective and fun!    Event Statistics  - The statistic counters that display statistics of events and allow the user to quickly apply\n    filters have been significantly improved by both using the screen estate more effectively and better fitting into\n    the overall UI design. Besides this, support for role-based visibility and optimizations to improve performance in\n    large-scale scenarios make this useful feature even more useful.    Capture Agent API  - The capture agent API now better supports ad-hoc recordings by allowing capture agents to\n    start (create), stop and prolong immediate events. Besides this, the missing parts of the JSON interface have been\n    completed.    Admin UI Style Guide  - A comprehensive style guide for the Admin UI has been written and made publicly available\n    to help to maintain the high level of graphical design in the future.    Enhanced Themes  - In addition to intro and outro movies, themes now also support titles: Metadata can be\n    rendered on top of an image that can be uploaded or extracted from the recording. This image is then converted to a\n    movie and rendered into the final video so that Opencast can render self-describing videos. The default workflow\n    has been extended to support this kind of enriching recordings with metadata out-of-the-box.    New Workflow Operations Handler  - Two new workflow operation handlers have been added   WOH export-wf-properties enables Adopters to make workflow settings persistent for later re-use  WOH import-wf-properties can load those persistent settings back into workflow instances to be used     Improved Workflow Operation Handlers  - Some existing workflow operation handlers have been improved resulting in\n    more flexible and powerful processing capabilities   WOH segment-video  has been significantly optimized to provide better video segmentation results. In particular,\n  it handles (accidental) processing of non-segmentable content vastly better  WOH publish-engage, retract-engage, publish-configure and retract-configure  have been optmized to perform\n  significantly better when it comes to publish/retract a large  number of files  WOH theme  supports more settings of themes that can be used to control the flow of workflow operations     New Language Supported  - British-English has been added to improve the localization for non-US English speaking\n    countries, in particular when it comes to non-US date formats.    Maintainability  - By removing obsolete legacy code throughout the Opencast code basis, updating various\n    libraries, improving the documentation, design and performance, we continuously ensure Opencast's maintainability    For a completed list of changes, have a look at the  changelog .",
            "title": "New Features and Improvements"
        },
        {
            "location": "/releasenotes/#additional-notes-about-231",
            "text": "Opencast 2.3.1 fixes a critical issue with publication on distributed systems as well as two security issues and several\nminor issues.",
            "title": "Additional Notes About 2.3.1"
        },
        {
            "location": "/releasenotes/#additional-notes-about-232",
            "text": "Opencast 2.3.2 is a bug fix release that fixes some minor issues of Opencast 2.3.1. For more details, please have a look\nat the  changelog .",
            "title": "Additional Notes About 2.3.2"
        },
        {
            "location": "/releasenotes/#additional-notes-about-233",
            "text": "Opencast 2.3.3 is a bug fix release that fixes some issues of Opencast 2.3.2, including an important security issue.\nFor more details, please have a look at the  changelog .",
            "title": "Additional Notes About 2.3.3"
        },
        {
            "location": "/releasenotes/#additional-notes-about-234",
            "text": "Opencast 2.3.4 is a bug fix release that fixes some issues of Opencast 2.3.3. For more details, please have a look at\nthe  changelog .",
            "title": "Additional Notes About 2.3.4"
        },
        {
            "location": "/releasenotes/#additional-notes-about-235",
            "text": "Opencast 2.3.5 is a bug fix release that fixes some issues of Opencast 2.3.4, including twosecurity issue related to\nstream security.  For more details, please have a look at the  changelog .",
            "title": "Additional Notes About 2.3.5"
        },
        {
            "location": "/releasenotes/#opencast-23-release-schedule",
            "text": "Date  Phase      October  1st  4th  Feature Freeze    October  1st  4th - 23th  Internal QA and bug fixing phase    October 10th - 16th  Review Test Cases    October 17th - 23th  Documentation Review    October 24th - November 14th  Public QA phase    November 15th - 28th  Additional bug fixing phase    November 21th - 27th  Translation week    November 28th - December 11th  Final QA phase    December 13th  Release of Opencast 2.3",
            "title": "Opencast 2.3 Release Schedule"
        },
        {
            "location": "/upgrade/",
            "text": "Upgrading Opencast 2.2 To 2.3\n\n\nThis guide describes how to upgrade Opencast 2.2.x to 2.3.x. In case you need information about how to upgrade older\nversions of Opencast, please refer to the \nold release notes\n.\n\n\nHow to Upgrade\n\n\n\n\nDownload Opencast 2.3\n\n\nStop your current Opencast instance\n\n\nBack-up Opencast files and database (optional)\n\n\nUpgrade the database\n\n\nUpgrade the message broker configuration\n\n\nUpdate the third party tools\n\n\nReplace Opencast 2.2 with 2.3\n\n\nReview the configuration changes and adjust your configuration accordingly\n\n\nRe-build the search indexes\n\n\n\n\nDatabase Migration\n\n\nOpencast 2.3 comes with a slightly modified database scheme compared to Opencast 2.2, essentially allowing comments to\nbe longer than 255 characters. While this might seem a rather unimportant change, we highly recommend to apply this\nchange to your existing database to stay in sync with the community versions, avoiding problems with further migrations.\n\n\nIt should be needless to say that this migration should not take a lot of time and should be safe. Nevertheless, as with\nall database migrations, we recommend to make a database backup before attempting the upgrade.\n\n\nYou can find the database upgrade script at \n\u2026/docs/upgrade/2.1_to_2.2/mysql5.sql\n.\n\n\nUpgrade Message Broker Configuration\n\n\nThe message broker configuration has been changed and must be updated. You can find the latest configuration at\n\ndocs/scripts/activemq/activemq.xml\n.\n\n\nPlease make sure to adapt the configuration to your needs, adding access control rules and configuring the hosts to\nlisten to as necessary. For more information, have a look at the \nmessage broker configuration guide\n\n.\n\n\nRe-Build Search Indexes\n\n\nSearch-Service Solr Index\n\n\nA security issue in the search service, which could potentially allow some\nusers to view private recordings without the proper access rights, was revealed\nand fixed in 2.2.4.\n\n\nIf you update from a version lower than 2.2.4, we recommend to re-build the\nsearch index. An automatic rebuild can be triggered by just deleting the Solr\nsearch index directory at \n\u2026/data/solr-indexes/search\n. The index will populate\nitself again from the database the next time Opencast is started.\n\n\nIf you have already upgraded to 2.2.4 and you rebuilt the search index then,\nyou need not do it again.\n\n\nElasticsearch Index\n\n\nThe introduction of the new external API requires an update to the Elasticsearch index:\n\n\n\n\nDelete the index directory at \n\u2026/data/index\n.\n\n\nRestart Opencast and wait until the system is fully started.\n\n\n\n\nUse one of the following methods to recreate the index:\n\n\n\n\nMake an HTTP GET request to \n/admin-ng/index/recreateIndex\n using your browser or an alternative HTTP client.\n\n\nOpen the REST documentation, which can be found under the \u201cHelp\u201d section in the Admin UI (by clicking on the \u201c?\u201d\n  symbol at the top right corner). Then go to the \u201cAdmin UI - Index Endpoint\u201d section and use the testing form on\n  \n/recreateIndex\n.\n\n\n\n\nIn both cases, the resulting page is empty but should return a HTTP status 200.",
            "title": "Upgrade"
        },
        {
            "location": "/upgrade/#upgrading-opencast-22-to-23",
            "text": "This guide describes how to upgrade Opencast 2.2.x to 2.3.x. In case you need information about how to upgrade older\nversions of Opencast, please refer to the  old release notes .",
            "title": "Upgrading Opencast 2.2 To 2.3"
        },
        {
            "location": "/upgrade/#how-to-upgrade",
            "text": "Download Opencast 2.3  Stop your current Opencast instance  Back-up Opencast files and database (optional)  Upgrade the database  Upgrade the message broker configuration  Update the third party tools  Replace Opencast 2.2 with 2.3  Review the configuration changes and adjust your configuration accordingly  Re-build the search indexes",
            "title": "How to Upgrade"
        },
        {
            "location": "/upgrade/#database-migration",
            "text": "Opencast 2.3 comes with a slightly modified database scheme compared to Opencast 2.2, essentially allowing comments to\nbe longer than 255 characters. While this might seem a rather unimportant change, we highly recommend to apply this\nchange to your existing database to stay in sync with the community versions, avoiding problems with further migrations.  It should be needless to say that this migration should not take a lot of time and should be safe. Nevertheless, as with\nall database migrations, we recommend to make a database backup before attempting the upgrade.  You can find the database upgrade script at  \u2026/docs/upgrade/2.1_to_2.2/mysql5.sql .",
            "title": "Database Migration"
        },
        {
            "location": "/upgrade/#upgrade-message-broker-configuration",
            "text": "The message broker configuration has been changed and must be updated. You can find the latest configuration at docs/scripts/activemq/activemq.xml .  Please make sure to adapt the configuration to your needs, adding access control rules and configuring the hosts to\nlisten to as necessary. For more information, have a look at the  message broker configuration guide .",
            "title": "Upgrade Message Broker Configuration"
        },
        {
            "location": "/upgrade/#re-build-search-indexes",
            "text": "",
            "title": "Re-Build Search Indexes"
        },
        {
            "location": "/upgrade/#search-service-solr-index",
            "text": "A security issue in the search service, which could potentially allow some\nusers to view private recordings without the proper access rights, was revealed\nand fixed in 2.2.4.  If you update from a version lower than 2.2.4, we recommend to re-build the\nsearch index. An automatic rebuild can be triggered by just deleting the Solr\nsearch index directory at  \u2026/data/solr-indexes/search . The index will populate\nitself again from the database the next time Opencast is started.  If you have already upgraded to 2.2.4 and you rebuilt the search index then,\nyou need not do it again.",
            "title": "Search-Service Solr Index"
        },
        {
            "location": "/upgrade/#elasticsearch-index",
            "text": "The introduction of the new external API requires an update to the Elasticsearch index:   Delete the index directory at  \u2026/data/index .  Restart Opencast and wait until the system is fully started.   Use one of the following methods to recreate the index:   Make an HTTP GET request to  /admin-ng/index/recreateIndex  using your browser or an alternative HTTP client.  Open the REST documentation, which can be found under the \u201cHelp\u201d section in the Admin UI (by clicking on the \u201c?\u201d\n  symbol at the top right corner). Then go to the \u201cAdmin UI - Index Endpoint\u201d section and use the testing form on\n   /recreateIndex .   In both cases, the resulting page is empty but should return a HTTP status 200.",
            "title": "Elasticsearch Index"
        },
        {
            "location": "/changelog/",
            "text": "Opencast 2.3.x\n\n\nOpencast 2.3.5\n\n\nReleased on December 04, 2017\n\n\n\n\n[MH-12588]\n - Stream Security Leaks Secrets\n\n\n[MH-12317]\n - AdminUI create every 5 seconds stats request and may crash on heavy server load\n\n\n[MH-12269]\n - Clarify in the documentation the recommendation of setting \ndispatchinterval\n to 0 applies to non-admin nodes only\n\n\n[MH-12190]\n - Script injection in Media Module and Player\n\n\n[MH-12000]\n - Cross-tenant URL signing\n\n\n[MH-11042]\n - Admin UI NG tests fail in +5:30 timezone\n\n\n\n\nOpencast 2.3.4\n\n\nReleased on August 03, 2017\n\n\n\n\n[MH-12183]\n - Theodul does not load\n\n\n[MH-12203]\n - Unescaped event and series titles when editing event or series (XSS)\n\n\n[MH-12242]\n - Theodul: Quality selector does not display/load\n\n\n[MH-12246]\n - Series WOH does not apply series DublinCore catalogs\n\n\n[MH-12249]\n - Media Module: Paging forgets search parameters\n\n\n\n\nOpencast 2.3.3\n\n\nReleased on May 02, 2017\n\n\n\n\n[MH-10558]\n - Mime type not identified for matroska / mkv files\n\n\n[MH-10595]\n - Incident service returns internal server error if cascade=true requested for deleted workflow\n\n\n[MH-10747]\n - Inputs for capture device should be pre-selected\n\n\n[MH-11736]\n - Difference in start time displayed in overview and metadata details\n\n\n[MH-11811]\n - Opencast build fails when system timezone is set to PDT (Pacific Daylight Time)\n\n\n[MH-12048]\n - Series drop-down not sorted alphabetically in filter\n\n\n[MH-12069]\n - Deleting an event leaves behind orphaned comments\n\n\n[MH-12095]\n - Server default timezone can be incorrect\n\n\n[MH-12106]\n - Preserve user attributes from providers during authentication\n\n\n[MH-12107]\n - Improve performance of Servers table in Admin UI\n\n\n[MH-12118]\n - Paging in media module is broken\n\n\n[MH-12129]\n - Media module only works with english localized browsers\n\n\n[MH-12130]\n - Filters set by selecting a category in the dashboard are not shown\n\n\n[MH-12148]\n - Undocumented Archive WOH Requirements\n\n\n[MH-12150]\n - Matroska files are not recognized\n\n\n[MH-12158]\n - Workflow job dispatching failures\n\n\n[MH-12162]\n - JpaJob object toString override for better log messages\n\n\n[MH-12163]\n - Events with stopped workflows sometimes cannot be deleted\n\n\n[MH-12164]\n - Updating serviceregistry config while running leaves Opencast in a non-functional state\n\n\n[MH-12190]\n - Script injection in Media Module and Player\n\n\n\n\nOpencast 2.3.2\n\n\nReleased on March 22, 2017\n\n\n\n\n[MH-11224]\n - Attempting to view source metadata through the new admin UI generates a stack trace\n\n\n[MH-11340]\n - Uncaught NullPointer Exception in Karaf console from com.entwinemedia.fn.data.json.SimpleSerializer.toJson\n\n\n[MH-11616]\n - Search Service will not remove mp from index if it is not found in database\n\n\n[MH-11743]\n - event.hasPreview() broken\n\n\n[MH-11760]\n - Event edit warning cannot be removed\n\n\n[MH-11790]\n - Slide Previews and slide text are not shown in Theodul Engage player\n\n\n[MH-11817]\n - Unhide volume controls in video-editor\n\n\n[MH-11819]\n - Admin UI Video Editor - Improved Zoom Controls\n\n\n[MH-12009]\n - Admin UI Video Editor: Segmentation lost after publishing\n\n\n[MH-12058]\n - Ingests fail if specified workflow does not exist\n\n\n[MH-12059]\n - Catch invalid dates when indexing\n\n\n[MH-12061]\n - Reduce the number of activemq messages and log entries during index rebuild\n\n\n[MH-12062]\n - Improve robustness of scheduler re-indexing\n\n\n[MH-12063]\n - Catch incomplete archive entries when indexing\n\n\n[MH-12072]\n - Wrong destinationId for External API message receiver\n\n\n[MH-12084]\n - The class \"AsyncTimeoutRedirectFilter\" swallows almost all the exceptions\n\n\n[MH-12087]\n - Null bitrate can cause UI display of source media to fail\n\n\n[MH-12092]\n - Return event ID when event is created through Scheduler API\n\n\n[MH-12097]\n - SegmentVideoWorkflowOperation: Modules not included in Admin Presentation build.\n\n\n\n\nOpencast 2.3.1\n\n\nReleased on Janurary 25, 2017\n\n\n\n\n[MH-11267]\n - Wrong notification text when deleting series\n\n\n[MH-11458]\n - Update translations from crowdin\n\n\n[MH-11687]\n - UI date formats are wrong for most of the English-speaking world\n\n\n[MH-11776]\n - CaptureAgentStateServiceImplTest incorrectly passes a non-long recording id, misses finding the NullPointer in Impl\n\n\n[MH-11960]\n - matterhorn-adminui-ng fails on first build\n\n\n[MH-11961]\n - Cannot access slidetext.xml should not break re-indexing\n\n\n[MH-11963]\n - Fix ingest REST docs\n\n\n[MH-11966]\n - Confusing AdminUI Groups Endpoint Documentation\n\n\n[MH-11967]\n - Publish internal fails on Distrubuted System Admin/Engage\n\n\n[MH-11983]\n - Only administrators should be allowed to assign the admin roles to other users\n\n\n[MH-11987]\n - Declare Admin UI Facade as module internal interface\n\n\n[MH-11988]\n - Advise to change karaf shutdown command in the docs\n\n\n[MH-11989]\n - Allow unknown as well as offline CAs to be removed via UI\n\n\n[MH-11992]\n - Compatibility issue when using contrib Wowza adaptive streaming module\n\n\n[MH-11998]\n - /info/me.json sometimes doesn't provide full information about the user\n\n\n[MH-12004]\n - Removing an recording does not remove all correspronding jobs\n\n\n[MH-12005]\n - UI shows inconsistent version due to missing version in cover-image-remote\n\n\n[MH-12006]\n - Security Issue Allowing Arbitrary Code Execution\n\n\n\n\nOpencast 2.3.0\n\n\nReleased on December 13, 2016\n\n\n\n\n[MH-10342]\n - As an external device I want to immediate start and stop a capture\n\n\n[MH-11327]\n - De-couple smilImpl/wfrImpl from ingestImpl\n\n\n[MH-11378]\n - Conditionally synchronize Archive Service's add mediapackge\n\n\n[MH-11380]\n - As a customer, I want to integrate my third party application to Opencast, so that I can use Opencast content in my application\n\n\n[MH-11381]\n - Remove documentation of items that have never been implemented\n\n\n[MH-11411]\n - move dashboard to header\n\n\n[MH-11675]\n - Add documentation for External API to the Admin Guide\n\n\n[MH-11688]\n - Set java file encoding on startup\n\n\n[MH-11718]\n - As a producer, I want to be able to make workflow settings persistent so that I can reuse them later\n\n\n[MH-11725]\n - Give users a starting point how to report bugs\n\n\n[MH-11726]\n - Add AdminUI style guide to developer guide\n\n\n[MH-11728]\n - Use Apache Commons Lang 3\n\n\n[MH-11729]\n - External API: Add documentation for Groups Endpoint\n\n\n[MH-11731]\n - Typofix Documentation\n\n\n[MH-11737]\n - Comment (mh_event_comment and mh_event_comment_reply) text field is VARCHAR(255) should be TEXT\n\n\n[MH-11740]\n - optimization of segmentation\n\n\n[MH-11741]\n - Admin UI has timezone issues\n\n\n[MH-11749]\n - External API: Add REST documentation for Endpoints\n\n\n[MH-11750]\n - Clean-Up Opencast Code Base\n\n\n[MH-11752]\n - Upgrade Karaf to 3.0.8\n\n\n[MH-11756]\n - Admin UI NG Update CSS+HTML (1): FontAwesome, improve HTML, remove redundant images\n\n\n[MH-11763]\n - Counters hide series tab\n\n\n[MH-11772]\n - Admin UI source dropdowns inappropriately advance\n\n\n[MH-11774]\n - Admin UI Needs better documentation for debugging\n\n\n[MH-11775]\n - Library Update\n\n\n[MH-11783]\n - Custom publications labels not displayed when doing a mouse-over on Events->Published\n\n\n[MH-11784]\n - Remove Participation Management Code Pieces\n\n\n[MH-11786]\n - HttpsRequestWrapper wrongly sets the new URL\n\n\n[MH-11791]\n - As service provider I want to configure which kind of users can see the event counters\n\n\n[MH-11792]\n - NPM Proxy via Nexus\n\n\n[MH-11794]\n - NPM fails on first build\n\n\n[MH-11795]\n - Add support for title slides\n\n\n[MH-11799]\n - Maven bundle names too long\n\n\n[MH-11800]\n - LTI between Opencast and Moodle does not work\n\n\n[MH-11801]\n - Wowza streaming server needs flv: prefix for flv files\n\n\n[MH-11802]\n - Opencast Logo is missing in Player\n\n\n[MH-11803]\n - Player redirect is missing\n\n\n[MH-11804]\n - No video controls in embed mode\n\n\n[MH-11808]\n - Pre-select workflow in case only one option is available\n\n\n[MH-11809]\n - Fix syntax error in encoding profile composite.http\n\n\n[MH-11812]\n - Fix security configuration for ROLE_UI_TASKS_CREATE\n\n\n[MH-11813]\n - Agent state REST endpoint documentation\n\n\n[MH-11815]\n - As a user I expect changes to be reflected in the Admin UI immediately\n\n\n[MH-11817]\n - Admin UI Video Editor - Bug Fixes\n\n\n[MH-11817]\n - Display video details in preview player/ editor of the admin ui\n\n\n[MH-11817]\n - Improve Button Hover Indication\n\n\n[MH-11817]\n - Make Next/Last Frame controls in videoeditor better recognizeable\n\n\n[MH-11827]\n - Recordings->Events->\"Event Details\"->Metadata: Incorrect translation used\n\n\n[MH-11828]\n - exception-handler-workflow not set correctly\n\n\n[MH-11829]\n - High memory usage on the admin server by dispatching jobs\n\n\n[MH-11831]\n - As a service provider, I want to configure whether Opencast creates an admin user automatically\n\n\n[MH-11834]\n - Unable to set capture agent configuration as JSON\n\n\n[MH-11836]\n - Additional ACL actions of series are missing when creating a new event in that series\n\n\n[MH-11837]\n - Unprivileged users have no access to fonts\n\n\n[MH-11839]\n - typo in Event Details: Comments\n\n\n[MH-11841]\n - Wait for NFS shares before start Opencast service\n\n\n[MH-11842]\n - Revert accidental downgrade of grunt version\n\n\n[MH-11851]\n - org.opencastproject.security.admin/pass can't be changed\n\n\n[MH-11857]\n - Fix log output \"Unable to delete non existing object %s/%s\"\n\n\n[MH-11862]\n - Search API handles roles wrong\n\n\n[MH-11863]\n - WOH analyze-tracks & WOH failing cause exceptions when shutting down Opencast\n\n\n[MH-11864]\n - WOH tag shall implement AbstractWorkflowOperationHandler\n\n\n[MH-11865]\n - Videoeditor Preview mixes in 2 Audiofiles\n\n\n[MH-11866]\n - Search box in Organization >> Groups not working\n\n\n[MH-11867]\n - Filter box in Organization >> Groups not working\n\n\n[MH-11869]\n - Deleting Series with 'Actions' is not working\n\n\n[MH-11870]\n - Wordlength in other languages except english too long\n\n\n[MH-11871]\n - ElasticSearch shall bind to 127.0.0.1\n\n\n[MH-11875]\n - ActiveMQ should not listen to all hosts by default\n\n\n[MH-11880]\n - Multiple issues with LDAP in branch 2.3.x\n\n\n[MH-11883]\n - Larger files may remain in system temp directory\n\n\n[MH-11886]\n - login pages throw errors on loading unnecessary scripts\n\n\n[MH-11888]\n - Organization Filter uses Provider where table uses Type\n\n\n[MH-11889]\n - Row size too large\n\n\n[MH-11890]\n - MySQL Connector Version Should Be Consistent\n\n\n[MH-11891]\n - Event counters query large amounts of useless data\n\n\n[MH-11895]\n - \u201cAdd Event\u201d Wizard Input Fields Broken\n\n\n[MH-11896]\n - Java Warnings in AbstractEventEndpoint\n\n\n[MH-11897]\n - Remove Deprecated StringHelper\n\n\n[MH-11898]\n - Fix Technical Duration Calculation\n\n\n[MH-11899]\n - Prevent Requesting Event Objects Multiple Times\n\n\n[MH-11900]\n - Minor Index Service Fixes\n\n\n[MH-11905]\n - Publish Configure WOH incorrectly retracts publications\n\n\n[MH-11912]\n - No slider in playback video player\n\n\n[MH-11919]\n - WOH image claims SUCCEEDED when actually skipping\n\n\n[MH-11920]\n - WOH prepare-av: Misleading log message\n\n\n[MH-11921]\n - WOH partial-import looses partial audio tracks in specific cases\n\n\n[MH-11950]\n - Javadocs build error\n\n\n[MH-11955]\n - Add en-GB to Languages\n\n\n\n\nOpencast 2.2.x\n\n\nOpencast 2.2.5\n\n\nReleased on June 7, 2017\n\n\n\n\n[MH-11983]\n - Only admins should be able to modify other admins\n\n\n[MH-12006]\n - Security Issue Allowing Arbitrary Code Execution\n\n\n[MH-11962]\n - Missing slidetext.xml should not break re-indexing\n\n\n\n\nOpencast 2.2.4\n\n\nReleased on October 13, 2016\n\n\n\n\n[MH-11831]\n - As a service provider, I want to configure whether Opencast creates an admin user automatically\n\n\n[MH-11851]\n - org.opencastproject.security.admin/pass can't be changed\n\n\n[MH-11862]\n - Search API handles roles wrong\n\n\n[MH-11875]\n - ActiveMQ should not listen to all hosts by default\n\n\n\n\nOpencast 2.2.3\n\n\nReleased on October 13, 2016\n\n\n\n\n[MH-11285]\n - Improve developers documentation: remote debugger with karaf\n\n\n[MH-11741]\n - Admin UI has timezone issues\n\n\n[MH-11771]\n - Improve section localization in developer guide\n\n\n[MH-11773]\n - Embed player does not use space very well and has scaling problems\n\n\n[MH-11774]\n - Admin UI Needs better documentation for debugging\n\n\n[MH-11777]\n - Event Details->Comments and Event Details->Assets don't work for unprivileged users\n\n\n[MH-11787]\n - Add release dates to changelog\n\n\n[MH-11800]\n - LTI between Opencast and Moodle does not work\n\n\n[MH-11801]\n - Wowza streaming server needs flv: prefix for flv files\n\n\n\n\nOpencast 2.2.2\n\n\nReleased on September 14, 2016\n\n\n\n\n[MH-11194]\n - created themes not showing up in series branding tab\n\n\n[MH-11572]\n - FFmpeg Inspection Service Test - accurateFrameCount\n\n\n[MH-11587]\n - SQL Error\n\n\n[MH-11714]\n - Fix unit test: Event controller #accessSave saves the event access\n\n\n[MH-11724]\n - Additional actions not available in create event wizard anymore\n\n\n[MH-11734]\n - Fix el7 RPM docs\n\n\n[MH-11735]\n - Fix Stream Security Documentation\n\n\n[MH-11744]\n - Actions->Start Task: Various localization bugs\n\n\n[MH-11748]\n - Inconsistent and incorrect use of translate directive\n\n\n[MH-11751]\n - Player won't work if there are no segments\n\n\n[MH-11755]\n - No quality selection in Theodul Player\n\n\n[MH-11759]\n - Make Inspector Unit Tests More Robust\n\n\n\n\nOpencast 2.2.1\n\n\nReleased on July 30, 2016\n\n\n\n\n[MH-11092]\n - Every Browser has an other \"Remember me\" checkbox\n\n\n[MH-11169]\n - Trimming points not set correctly after workflow is finished\n\n\n[MH-11538]\n - \"No compatible source was found for this video\" videojs player error in iOS device\n\n\n[MH-11561]\n - Style (CSS): Setting a server in Maintenance (srv-det-01)\n\n\n[MH-11598]\n - Wizards should not re-use data that has entered before\n\n\n[MH-11644]\n - Missing Admin Interface Mock Data\n\n\n[MH-11653]\n - Jobs do not always proceed\n\n\n[MH-11655]\n - Jobs with high job load never get processed\n\n\n[MH-11659]\n - Warning is missing that metada and ACL cannot be edited while job is processing.\n\n\n[MH-11661]\n - Link on logo on the media module points to admin ui or welcome page, instead of something that is accessable for every user\n\n\n[MH-11664]\n - Incorrect Inconsistency status when built from tarball\n\n\n[MH-11665]\n - Systems->Servers & Systems->Services show wrong mean runtime and mean queue time\n\n\n[MH-11667]\n - Align main table content\n\n\n[MH-11668]\n - Missing segment previews let to an erro in the player\n\n\n[MH-11669]\n - Do not archive OCR texts\n\n\n[MH-11673]\n - Add documentation for additional ACL actions\n\n\n[MH-11674]\n - Add documentation for metadata configuration\n\n\n[MH-11679]\n - Page size cannot be changed in any table\n\n\n[MH-11681]\n - Add documentation for role-based visibility\n\n\n[MH-11682]\n - Remove useless roles from roles.txt\n\n\n[MH-11686]\n - Extended metadata tab not shown although user has the role ROLE_UI_EVENTS_DETAILS_METADATA_VIEW\n\n\n[MH-11690]\n - Various Documentation Improvements\n\n\n[MH-11692]\n - Remove Superfluous Mh-Db-Version\n\n\n[MH-11693]\n - Remove Superfluous Dependency Versions\n\n\n[MH-11694]\n - JavaDoc Generation Broken\n\n\n[MH-11702]\n - After an upgrade to 2.2.0, series are not displayed in the UI because the series creation date is now mandatory\n\n\n[MH-11720]\n - Opencast 2.2 requires Git to be installed at build time\n\n\n[MH-11727]\n - Fix unit test: adminNg.services.language #toLocalTime converts a zulu time string back to local time FAILED\n\n\n[MH-11730]\n - Make the automatic role prefix in LDAPUserProvider configurable\n\n\n\n\nOpencast 2.2.0\n\n\nReleased on June 15, 2016\n\n\n\n\n[MH-9511]\n - Wrong log level in Tesseract\n\n\n[MH-9831]\n - ehcache and quartz phones home\n\n\n[MH-9950]\n - Update player dependencies\n\n\n[MH-10029]\n - Remove Unnecessary Image Conversion Step From TextAnalysisService\n\n\n[MH-10173]\n - Do not ignore exceptions when closing Closeable's\n\n\n[MH-10748]\n - Matterhorn has to be restarted to schedule an event on a new capture device\n\n\n[MH-10794]\n - Delete Action should be disabled if nothing is selected\n\n\n[MH-10869]\n - ActiveMQ Configuration and Connection Problems\n\n\n[MH-10870]\n - ActiveMQ Exceptions While Shutting Down Matterhorn\n\n\n[MH-10887]\n - Users can schedule events in the past\n\n\n[MH-10898]\n - Update Apache HttpComponents (3.1.7 \u2192 4.4.1)\n\n\n[MH-10923]\n - Theodul player : Filtering \"composite\" tags results in error when the composite workflow is used\n\n\n[MH-10942]\n - Events are not deselected after applying a task\n\n\n[MH-10965]\n - Theodul player : Videos not playable on IE10\n\n\n[MH-10971]\n - Newly created Series don't show up in Series dropdown selection lists without page reload\n\n\n[MH-10978]\n - Unable to retract 'internal' publications\n\n\n[MH-10979]\n - Opencast needs to better distribute load across the available nodes\n\n\n[MH-10984]\n - Extend ingest service by partial upload\n\n\n[MH-11010]\n - Stream Security should be able to prevent cross-tenants access\n\n\n[MH-11014]\n - Add support for additional ACL actions\n\n\n[MH-11077]\n - The Publish Workflow will not retract already published material\n\n\n[MH-11097]\n - View modes not working correctly\n\n\n[MH-11107]\n - Group list pagination not working\n\n\n[MH-11121]\n - MacOS X Installation Guide Needs 2.1 Update\n\n\n[MH-11124]\n - Incorrect documentation on how to create users\n\n\n[MH-11128]\n - Docs about SilenceDetector threashold are incorrect\n\n\n[MH-11139]\n - Unable to find mimetype for mkv\n\n\n[MH-11140]\n - Forward and backward buttons are greyed out\n\n\n[MH-11143]\n - Link to Media Module in Admin UI\n\n\n[MH-11148]\n - Search box layout incorrect: Icon overlaps text\n\n\n[MH-11156]\n - Users: Search box not implemented\n\n\n[MH-11157]\n - Groups: Search box not implemented\n\n\n[MH-11165]\n - Sorting does not work on Systems->Jobs, Systems->Servers and Systems->Services\n\n\n[MH-11167]\n - Layout problem on Workflow Error Details view\n\n\n[MH-11183]\n - Capture->Locations: Search box not implemented\n\n\n[MH-11190]\n - Theodul Shortcuts: Description could be improved\n\n\n[MH-11191]\n - Event Details->Assets: Use human-readable units for duration, bitrates and sizes\n\n\n[MH-11192]\n - Audio level slider does not change audio level while dragging\n\n\n[MH-11199]\n - Playback & video editor don't work while workflow is running\n\n\n[MH-11209]\n - LTI Documentation needs to be incorporated into new docs\n\n\n[MH-11222]\n - Replace System.out.println with logger\n\n\n[MH-11229]\n - workflowoperation unit tests are incredible slow\n\n\n[MH-11252]\n - Some service configuration files are stored in the wrong directory\n\n\n[MH-11265]\n - Ensure configuration files end with newline characters\n\n\n[MH-11266]\n - Logger ConversionPattern stated twice\n\n\n[MH-11276]\n - HttpNotificationWorkflowOperationHandlerTest fails if a certain Domain Exists\n\n\n[MH-11280]\n - Opencast fails to compile due to missing dependencies in test-harness\n\n\n[MH-11281]\n - Enhance WOH image to support extraction of multiple images using multiple encoding profiles from multiple sources\n\n\n[MH-11282]\n - Enhance WOH composite to support single video streams\n\n\n[MH-11287]\n - Update Apereo/Apache License List\n\n\n[MH-11289]\n - Change text extraction documentation or file name\n\n\n[MH-11294]\n - Create admin-worker and ingest distribution\n\n\n[MH-11296]\n - HTTP method POST is not supported by this url in r/2.1.x\n\n\n[MH-11298]\n - Fix json-simple version specification\n\n\n[MH-11300]\n - WOH partial-import looses partial audio tracks beginning at position zero\n\n\n[MH-11304]\n - Documentation for WOH partial-import and load configuration not listed in pages configuration\n\n\n[MH-11306]\n - Change job dispatcher sort order to: restart jobs, non-wf jobs, creation date\n\n\n[MH-11307]\n - Distribution Service is not on Presentation Node\n\n\n[MH-11310]\n - Document encoding profiles used by WOH partial-import\n\n\n[MH-11311]\n - Use existing encoding profiles in WOH partial-import example\n\n\n[MH-11312]\n - Fix Encode WOH Documentation\n\n\n[MH-11313]\n - Update Parallel Encode Profiles\n\n\n[MH-11319]\n - Media Module Always Uses Second Attachment as Preview\n\n\n[MH-11320]\n - Missing Image Preparation for text Extraction\n\n\n[MH-11321]\n - Fix default workflow configuration panel\n\n\n[MH-11322]\n - Update WebM Profiles\n\n\n[MH-11355]\n - Slide texts are not shown correctly in theodul player, except the first segment there a now slide texts shown (\"No slide text available\"). In the XML file the texts are correct\n\n\n[MH-11356]\n - Update Documentation Index Page\n\n\n[MH-11357]\n - Notifications are not removed after a while\n\n\n[MH-11358]\n - Dismiss Button for comments has an inconsistent design\n\n\n[MH-11363]\n - Notification that server is not reachable is missing\n\n\n[MH-11364]\n - Reasons in Comments section are no longer translated\n\n\n[MH-11368]\n - Changing to Chinese translation doesn't work\n\n\n[MH-11369]\n - Series filter displays series id instead of series title\n\n\n[MH-11374]\n - Videoeditor: Times are wrong in zoomed waveform view\n\n\n[MH-11385]\n - Metadata summary not showing any metadata at event creation\n\n\n[MH-11386]\n - Silence Detection / Video Editor Waveform bug\n\n\n[MH-11389]\n - security 1\n\n\n[MH-11391]\n - Improve Flavor creation and parsing\n\n\n[MH-11392]\n - Sorting by series.created does not work correctly\n\n\n[MH-11401]\n - Hiding of columns is globally broken\n\n\n[MH-11404]\n - Group editor shows users and roles twice\n\n\n[MH-11405]\n - Pagination broken for groups table\n\n\n[MH-11409]\n - Translation key EVENTS.EVENTS.GENERAL.SELECT_WORKFLOW_EMPTY is missing\n\n\n[MH-11413]\n - AdminUI comment dialog translations missing\n\n\n[MH-11414]\n - Logger is missing from several modules\n\n\n[MH-11415]\n - Incorrect Urlsigning Module Name\n\n\n[MH-11416]\n - Specify Opencast's Requirements\n\n\n[MH-11417]\n - Tab names of modals not vertically centered\n\n\n[MH-11419]\n - Tables not drawn correctly\n\n\n[MH-11422]\n - add event tab titles not translated\n\n\n[MH-11427]\n - Can't get host details from Serviceregistry REST endpoint\n\n\n[MH-11428]\n - Default Workflow Option Does Not Work\n\n\n[MH-11430]\n - Prevent user from accidentally press \"Save & process\" in Video Editor multiple times\n\n\n[MH-11431]\n - Prevent users from accidentally pressing the Delete/Retract button multiple times\n\n\n[MH-11432]\n - JSHint settings are missing\n\n\n[MH-11434]\n - \"The task could not be created\" error notification always appear when starting a task on multiple events\n\n\n[MH-11435]\n - Fix code style errors in Gruntfile.js\n\n\n[MH-11436]\n - Matterhorn on Login/Welcome Page\n\n\n[MH-11437]\n - Resource Problems On Login Page\n\n\n[MH-11438]\n - Resource Problem on Welcome Page\n\n\n[MH-11439]\n - Event description not available in WOH cover-image\n\n\n[MH-11441]\n - Clicking on Logo in top left corner will nmot get you to the start page\n\n\n[MH-11443]\n - Seeking is not possible before pressing play button at least once?!?\n\n\n[MH-11446]\n - Remove eclipse-gemini repository from main pom.xml\n\n\n[MH-11447]\n - Scheduling conflicts reporting completely broken\n\n\n[MH-11448]\n - Tipps on developing on admin ui ng\n\n\n[MH-11450]\n - Fix Defaults For Documentation Links\n\n\n[MH-11453]\n - Correctly link the stream security documentation\n\n\n[MH-11457]\n - Remove duplicate keys from Admin UI english translation\n\n\n[MH-11458]\n - Update translations from crowdin\n\n\n[MH-11459]\n - Logger Logs Nullpointer on Error\n\n\n[MH-11462]\n - Cover WOH is not included in a useful way\n\n\n[MH-11464]\n - setting personal preferences in admin UI fails\n\n\n[MH-11468]\n - There are unused ressources\n\n\n[MH-11475]\n - Fix typos in English master translation\n\n\n[MH-11476]\n - Series->Actions->Delete displays wrong notifications\n\n\n[MH-11477]\n - Editing status of series displays wrong notification when saving fails for all series\n\n\n[MH-11480]\n - Replace horizontal ellipsis\n\n\n[MH-11481]\n - Workflows started by unprivileged users hang\n\n\n[MH-11492]\n - forward and backward section not working in safari\n\n\n[MH-11509]\n - Failed test: Sorting groups list (grp-lis-01)\n\n\n[MH-11511]\n - Failed test: Manual set time in textbook for IE11\n\n\n[MH-11512]\n - hello world does not follow import statements rules\n\n\n[MH-11518]\n - Language selector is always displayed in system language\n\n\n[MH-11519]\n - Languages are only distinguished by main language\n\n\n[MH-11520]\n - Remove company logos\n\n\n[MH-11521]\n - ActiveMQ Library Configuration\n\n\n[MH-11522]\n - DataLoader Default Value\n\n\n[MH-11523]\n - Working file repository default value\n\n\n[MH-11524]\n - Distribution Service Default Values\n\n\n[MH-11532]\n - Wider language support in player\n\n\n[MH-11534]\n - Add language support for Chinese Simplified\n\n\n[MH-11535]\n - Add documentation about Crowdin to Developer Guide\n\n\n[MH-11536]\n - Remove Commercial Code From Core\n\n\n[MH-11537]\n - Execute Service WOH Cannot be Built\n\n\n[MH-11539]\n - Remove Old MH Logos in Favor of Opencast SVG Logos\n\n\n[MH-11544]\n - Admin UI links used inconsistently\n\n\n[MH-11546]\n - Pagination buttons too small for large numbers\n\n\n[MH-11548]\n - The \"Edit\" button at the top-right corner of the tables doesn't support localization\n\n\n[MH-11550]\n - Update Migration documentation 2.1 to 2.2\n\n\n[MH-11554]\n - Filtering does not work on Systems->Jobs, Systems->Servers and Systems->Services\n\n\n[MH-11555]\n - Localisation of Recordings->Events and Recordings->Series buggy\n\n\n[MH-11556]\n - Failed test: Filter locations (T1733, Filter by status does not work)\n\n\n[MH-11559]\n - outdated shortcurts configuration prevents player from loading.\n\n\n[MH-11571]\n - Elasticsearch shutdown command handler crash opencast\n\n\n[MH-11573]\n - Do not hide warnings\n\n\n[MH-11574]\n - Jetty Error on Large Workflow Instances\n\n\n[MH-11575]\n - Inspection Service Tests Fail With Certain FFmpeg Versions\n\n\n[MH-11576]\n - Servlet Filter Improvements\n\n\n[MH-11578]\n - Improve default order of columns in Systems->Jobs\n\n\n[MH-11579]\n - Admin UI mockup data for Systems->Jobs incomplete\n\n\n[MH-11580]\n - Unit tests for Admin UI language selection broken\n\n\n[MH-11581]\n - Systems->Jobs table not working correctly\n\n\n[MH-11583]\n - Fix Code Style\n\n\n[MH-11588]\n - Create side-by-side preview for video editor\n\n\n[MH-11589]\n - Feedback button does not work\n\n\n[MH-11590]\n - The WorkflowServiceImpl constructor sets the \"waitForResources\" argument incorrectly\n\n\n[MH-11594]\n - Add language support for Galician\n\n\n[MH-11595]\n - Fix admin ui unit tests for tableService\n\n\n[MH-11597]\n - Building matterhorn-engage-theodul-plugin-video-videojs reports a lot of code style issues\n\n\n[MH-11600]\n - Failed test: i18n (gen-int-01)\n\n\n[MH-11601]\n - current language can have undefined state\n\n\n[MH-11604]\n - Date picker for setting up the schedule is always french\n\n\n[MH-11605]\n - Disabling link to mediaplayer creates a broken link and missing logo\n\n\n[MH-11606]\n - Add language support for Greek\n\n\n[MH-11608]\n - Add documentation for WOH cleanup\n\n\n[MH-11613]\n - WOH editor fails when input has uneven width or height\n\n\n[MH-11614]\n - Partial matches not working anymore\n\n\n[MH-11617]\n - Add language support for Dutch\n\n\n[MH-11620]\n - Non privileged user can not login on presentation node\n\n\n[MH-11623]\n - Server statistics: Slow Query\n\n\n[MH-11624]\n - Workflow owners do not necessarily have access to their workflows: user comparison fails\n\n\n[MH-11627]\n - NullPointerException when creating a new Solr index\n\n\n[MH-11629]\n - Hide Some Confusing Warnings\n\n\n[MH-11630]\n - Service registry lacks of getActiveJobs() function\n\n\n[MH-11631]\n - Remove columns \"Blacklisted from\" and \"Blacklisted until\" from Capture->Locations\n\n\n[MH-11632]\n - Library Bugfix Upgrade\n\n\n[MH-11636]\n - Adjust FFmpegComposer Logging for Newer FFmpeg Versions\n\n\n[MH-11637]\n - Add language support for Swedish\n\n\n[MH-11638]\n - Improve Encoding Profiles\n\n\n[MH-11639]\n - Media module login form has poor usability and bugs\n\n\n[MH-11642]\n - Remove binding to non-existing method in WOH analyze-tracks\n\n\n[MH-11643]\n - Add language support for Polish\n\n\n[MH-11645]\n - Open AdminUI menu links in new tab does not work\n\n\n[MH-11646]\n - Add documentation for WOH comment\n\n\n[MH-11652]\n - Unit tests for servicesController broken\n\n\n[MH-11654]\n - Failed ingest jobs block system from dispatching other jobs\n\n\n[MH-11656]\n - Add documentation for WOH copy\n\n\n[MH-11657]\n - Improve documentation for workflow execution conditions\n\n\n[MH-11658]\n - Better quality for video editor previews\n\n\n[MH-11663]\n - Hide Participation Management from UI since not yet working\n\n\n[MH-11666]\n - Not all WOH listed in WOH overview\n\n\n\n\nOpencast 2.1.x\n\n\nOpencast 2.1.2\n\n\nReleased on May 10, 2016\n\n\n\n\n[MH-9831]\n - ehcache and quartz phones home\n\n\n[MH-11121]\n - MacOS X Installation Guide Needs 2.1 Update\n\n\n[MH-11124]\n - Incorrect documentation on how to create users\n\n\n[MH-11128]\n - Docs about SilenceDetector threashold are incorrect\n\n\n[MH-11209]\n - LTI Documentation needs to be incorporated into new docs\n\n\n[MH-11229]\n - workflowoperation unit tests are incredible slow\n\n\n[MH-11283]\n - post-mediapackage WOH breaks further processing\n\n\n[MH-11287]\n - Update Apereo/Apache License List\n\n\n[MH-11296]\n - HTTP method POST is not supported by this url in r/2.1.x\n\n\n[MH-11298]\n - Fix json-simple version specification\n\n\n[MH-11307]\n - Distribution Service is not on Presentation Node\n\n\n[MH-11319]\n - Media Module Always Uses Second Attachment as Preview\n\n\n[MH-11320]\n - Missing Image Preparation for text Extraction\n\n\n[MH-11321]\n - Fix default workflow configuration panel\n\n\n[MH-11323]\n - Workflow Docs are Incorrect\n\n\n[MH-11332]\n - Document acceptance criteria for proposals\n\n\n[MH-11356]\n - Update Documentation Index Page\n\n\n[MH-11377]\n - Opencast does not have an ingest assembly\n\n\n\n\nOpencast 2.1.1\n\n\nReleased on January 22, 2016\n\n\n\n\n[MH-11107]\n - Group list pagination not working\n\n\n[MH-11265]\n - Ensure configuration files end with newline characters\n\n\n[MH-11266]\n - Logger ConversionPattern stated twice\n\n\n[MH-11276]\n - HttpNotificationWorkflowOperationHandlerTest fails if a certain Domain Exists\n\n\n[MH-11280]\n - Opencast fails to compile due to missing dependencies in test-harness\n\n\n\n\nOpencast 2.1.0\n\n\nReleased on December 22, 2015\n\n\n\n\n[MH-10637]\n - Hello World service\n\n\n[MH-10651]\n - Workspace cleaner job param in wrong units (ms vs s) and wrong logic\n\n\n[MH-10714]\n - Two clock icons at the time stamp of a comment\n\n\n[MH-10805]\n - The confirmation dialog are not translated\n\n\n[MH-10818]\n - The creation date is presented as ISO string in the event metadata\n\n\n[MH-10869]\n - ActiveMQ Configuration and Connection Problems\n\n\n[MH-10874]\n - Plugin does not properly handle multiple keys\n\n\n[MH-10875]\n - Include search capabilities into mkdocs documentation build\n\n\n[MH-10890]\n - Update Apache Commons Lang (2.6 \u2192 3.4)\n\n\n[MH-10908]\n - Assemblie Module Names Too Long\n\n\n[MH-10908]\n - Consistency in Documentation: Presentation Server VS Engage Server\n\n\n[MH-10908]\n - Misconfigured Checkstyle Plug-in in Assemblies\n\n\n[MH-10919]\n - Top row for setting roles in the access policy for an event is not showing the right value\n\n\n[MH-10953]\n - Spanish layout is broken\n\n\n[MH-10955]\n - Make sure recent versions of mkdocs work\n\n\n[MH-10956]\n - Update Synchronize.js\n\n\n[MH-10985]\n - As an operator I want to check the health status of Opencast\n\n\n[MH-10986]\n - Scheduling around DST change fails\n\n\n[MH-10987]\n - Improve workflow query to accept paging by index\n\n\n[MH-10988]\n - Rewrite workspace to fix several small issues\n\n\n[MH-10989]\n - Improve working file repository stream response\n\n\n[MH-11007]\n - Remove 3rd party tool script\n\n\n[MH-11026]\n - Several invalid links in the Opencast User Guides\n\n\n[MH-11031]\n - Missing option to create new event using files ingested from the inbox\n\n\n[MH-11036]\n - Adapt Fast Testing Workflow for Admin NG\n\n\n[MH-11051]\n - Fix WOH Documentation\n\n\n[MH-11069]\n - When creating new series, warning about read/write requirements is shown twice.\n\n\n[MH-11072]\n - The ACL editor needs enhanced validation\n\n\n[MH-11074]\n - Admin UI Test: New Event API Resource assembles the metadata for SCHEDULE_MULTIPLE with DST change is failing\n\n\n[MH-11083]\n - Clean-up Codebase after Karaf\n\n\n[MH-11085]\n - Make sure bundle cache is cleared when restarting\n\n\n[MH-11086]\n - Shorten File Names in Log Output\n\n\n[MH-11088]\n - translation error in theodul player\n\n\n[MH-11089]\n - Theodul player seems not to work with Internet Explorer at all\n\n\n[MH-11093]\n - single video screen size jump when clicked\n\n\n[MH-11094]\n - Problems in Theodul controls plugin due to wrong resolves of merge conflicts\n\n\n[MH-11095]\n - Make assemblies more user firedly\n\n\n[MH-11096]\n - Errors when loading admin-ng login page\n\n\n[MH-11099]\n - Removing one role from an Access Policy (acl-det-05)\n\n\n[MH-11101]\n - Creating a Theme with 2 bumper videos - In and Out (thm-new-01)\n\n\n[MH-11109]\n - Event details tab cannot handle long event titles well\n\n\n[MH-11110]\n - minor updates to ffmpeg video-editor and silence detection based on gregs review of the feature in 1.6.3\n\n\n[MH-11111]\n - Formatting issues in \u201cTheodul Pass Player - URL Parameters\u201d\n\n\n[MH-11114]\n - Remove System.out.println from FileReadDeleteTest\n\n\n[MH-11120]\n - Several Services Fail During Shutdown\n\n\n[MH-11122]\n - Create Service Files (Systemd/SysV-Init)\n\n\n[MH-11126]\n - Fix Translation for 2.1\n\n\n[MH-11133]\n - i18n: Theme Detail view layout broken in Spanish\n\n\n[MH-11135]\n - Create Release Manager Docs\n\n\n[MH-11137]\n - Comment reasons are not working correctly\n\n\n[MH-11138]\n - Clock icon displayed twice next to comment creation date\n\n\n[MH-11141]\n - Playback Speed in player needs more useful defaults\n\n\n[MH-11142]\n - fix translations for shortcuts\n\n\n[MH-11144]\n - update documentation regarding property for mediamodule logo\n\n\n[MH-11147]\n - Missing translations: FILTERS.USERS.PROVIDER.LABEL & FILTERS.USERS.ROLE.LABEL\n\n\n[MH-11149]\n - Filter locations: Translations FILTERS.AGENTS.NAME.LABEL & FILTERS.AGENTS.STATUS.LABEL missing\n\n\n[MH-11151]\n - Plaback speed from menu\n\n\n[MH-11152]\n - Editing ACL: Translation for USERS.ACLS.DETAILS.ACCESS.ACCESS_POLICY.DESCRIPTION missing\n\n\n[MH-11153]\n - Access Policy Details: Cannot navigate to previous or next ACL\n\n\n[MH-11154]\n - New Access Policy: Translation for USERS.ACLS.NEW.ACCESS.ACCESS_POLICY.DESCRIPTION missing\n\n\n[MH-11155]\n - ACL Editor: Role not displayed at all\n\n\n[MH-11158]\n - Playback Tool: Time can be edited, but editing has no effect\n\n\n[MH-11159]\n - Users sorting: Sort order for 'Name' not correct\n\n\n[MH-11160]\n - Create Group overwrites existing groups without warning\n\n\n[MH-11162]\n - security_sample_cas.xml in MH 2.0.1 Points to Wrong Welcome Page\n\n\n[MH-11166]\n - Number of rows not displayed on Systems->Servers\n\n\n[MH-11176]\n - Cannot playback a recording via LTI in 2.x\n\n\n[MH-11177]\n - Fix Player OSGI Dependencies\n\n\n[MH-11178]\n - Prevent FFmpeg Experimental AAC Encoder Bug to Affect Opencast\n\n\n[MH-11180]\n - Update video.js to latest 4.x version\n\n\n[MH-11181]\n - Flash streaming with multi-quality video does not work\n\n\n[MH-11185]\n - Event Details->Assets->: Asset size is always 0\n\n\n[MH-11186]\n - Event Details->Assets->Media->Media Details: Superfluous row 'Flavor'\n\n\n[MH-11187]\n - Configuration->Themes: Number of rows not displayed correctly\n\n\n[MH-11189]\n - Actions->Start Task: User can press create button multiple times\n\n\n[MH-11193]\n - Setting audio level slider to \"zero\" does not set the actual audio level to \"zero\"\n\n\n[MH-11196]\n - REST docs cannot be found in new admin ui\n\n\n[MH-11198]\n - Event dashboard seems not to support i18n\n\n\n[MH-11201]\n - Maven Assembly Plug-in Listed Twice\n\n\n[MH-11202]\n - FFmpeg video editor operation is synchronized\n\n\n[MH-11212]\n - Main Pom Clean-Up\n\n\n[MH-11218]\n - Karaf based Solr configuration\n\n\n[MH-11221]\n - ComposerServiceImpl creates incorrect incidents and error messages\n\n\n[MH-11223]\n - Remove unused files\n\n\n[MH-11234]\n - Admin-NG throws a couple of 404 errors\n\n\n[MH-11236]\n - Security ACL \nsee security list\n\n\n[MH-11237]\n - Service files are missing\n\n\n[MH-11238]\n - Silence-detection does not read configuration value for ffmpeg binary path\n\n\n[MH-11248]\n - Publish-Engage Workflow Operation Documentation is Missing Configuration Keys\n\n\n[MH-11249]\n - Apply-ACL WOH not properly replaced by Seried-WOH in Documentation\n\n\n[MH-11250]\n - Put temporary files in karaf data not in opencast.storage\n\n\n[MH-11251]\n - Capture-Admin Tests May Fail When Executed Too Fast\n\n\n[MH-11257]\n - Deprecated Mkdocs Config\n\n\n[MH-11258]\n - Make host configuration easier\n\n\n\n\nOpencast 2.0.x\n\n\nOpencast 2.0.2\n\n\nReleased on December 22, 2015\n\n\n\n\n[MH-10235]\n - Users are unable to determine the Version of Matterhorn\n\n\n[MH-10484]\n - Remove Mediainfo from 3rd-Party-Tools\n\n\n[MH-10558]\n - Mime type not identified for matroska / mkv files\n\n\n[MH-10588]\n - Improve MySQL DDL to make it consistent again\n\n\n[MH-10759]\n - Write QA documentation for Access Policies\n\n\n[MH-10759]\n - Write QA documentation for Series\n\n\n[MH-10759]\n - Write QA documentation for Themes\n\n\n[MH-10818]\n - The creation date is presented as ISO string in the event metadata\n\n\n[MH-10918]\n - Improve the representation of the attachments/catalogs/media/publications in the event details\n\n\n[MH-10956]\n - Update Synchronize.js\n\n\n[MH-10964]\n - The Opencast start script does not work on Mac OS X\n\n\n[MH-10976]\n - Eclipse (m2e) throws NullPointerException erros due to a missing property in the pom.xml file\n\n\n[MH-11007]\n - Remove 3rd party tool script\n\n\n[MH-11007]\n - Switch subtitle embedder to FFmpeg\n\n\n[MH-11026]\n - Several invalid links in the Opencast User Guides\n\n\n[MH-11038]\n - Make ListProviderScanner Scanner Less verbose\n\n\n[MH-11048]\n - admin ui tries to load missing library\n\n\n[MH-11051]\n - Fix WOH Documentation\n\n\n[MH-11060]\n - ActiveMQ settings filename fix (r/2.0.x)\n\n\n[MH-11068]\n - Table 'mh_bundleinfo' doesn't exist\n\n\n[MH-11110]\n - minor updates to ffmpeg video-editor and silence detection based on gregs review of the feature in 1.6.3\n\n\n[MH-11176]\n - Cannot playback a recording via LTI in 2.x\n\n\n[MH-11177]\n - Fix Player OSGI Dependencies\n\n\n[MH-11181]\n - Flash streaming with multi-quality video does not work\n\n\n[MH-11202]\n - FFmpeg video editor operation is synchronized\n\n\n[MH-11221]\n - ComposerServiceImpl creates incorrect incidents and error messages\n\n\n[MH-11236]\n - Security ACL \nsee security list\n\n\n[MH-11238]\n - Silence-detection does not read configuration value for ffmpeg binary path\n\n\n[MH-11256]\n - Opencast docs do not build anymore\n\n\n\n\nOpencast 2.0.1\n\n\nReleased on September 3, 2015\n\n\n\n\n[MH-10822]\n - Possible to create new access policy template without a role with read/write permissions\n\n\n[MH-10938]\n - Missing views counter in player\n\n\n[MH-10941]\n - Usertracking Service Missing Endpoint\n\n\n[MH-10955]\n - Make sure recent versions of mkdocs work\n\n\n[MH-10962]\n - Add missing licenses to NOTICES\n\n\n[MH-10968]\n - Add note about ffmpeg/libav on Ubuntu\n\n\n[MH-10975]\n - async loading of translations\n\n\n[MH-10995]\n - Gathering workflow statistics for JMX causes extreme performance issues\n\n\n\n\nOpencast 2.0.0\n\n\nReleased on July 17, 2015\n\n\n\n\n[MH-9950]\n - \"Clean up\"/Split up nested functions in the core routine (core.js)\n\n\n[MH-9950]\n - Load CSS files in the core HTML file, not the JavaScript\n\n\n[MH-9950]\n - Scrolling is required to see the controls if they are configured to be below the video.\n\n\n[MH-9950]\n - Some Keys don't work\n\n\n[MH-9950]\n - Theodul Core Jasmine Tests Sometimes Failing\n\n\n[MH-10029]\n - FFmpeg based Videosegmenter\n\n\n[MH-10140]\n - Capture agent with no configuration is always shown as \"idle\"\n\n\n[MH-10202]\n - No ACL in new series when ingested a new mediapackage with a new series.\n\n\n[MH-10230]\n - Typos on the welcome page\n\n\n[MH-10332]\n - Remove Mediainfo Inspection Service\n\n\n[MH-10382]\n - Add a UI Element to Easily Unregister Capture Agents\n\n\n[MH-10419]\n - Improve user tracking tables\n\n\n[MH-10510]\n - Move Workflow Operation Handler into their own Packages\n\n\n[MH-10550]\n - Non-Interactive Foreground Mode For Matterhorn\n\n\n[MH-10572]\n - ShibbolethLoginHandler: 500 Error when login the first time\n\n\n[MH-10594]\n - Re-configure Start Scripts for Different Deployment Types\n\n\n[MH-10615]\n - Enable Optional Compiler Arguments\n\n\n[MH-10620]\n - Port Silence Detector from GStreamer to FFmpeg\n\n\n[MH-10622]\n - Wave Generation Improvement\n\n\n[MH-10623]\n - Set Sensible Default for Workspace Cleanup Period\n\n\n[MH-10624]\n - Fixes for FFmpeg Videosegmenter (Set Binary)\n\n\n[MH-10630]\n - Extending common functionality\n\n\n[MH-10631]\n - Scheduler service authorization handling\n\n\n[MH-10635]\n - Text extractor dead lock\n\n\n[MH-10640]\n - several problems with the metadata form to create a new event\n\n\n[MH-10656]\n - Login Screen: Placeholder and Focus\n\n\n[MH-10658]\n - Email template: diverse problems\n\n\n[MH-10664]\n - What is a template in Access Policy and how do I create it?\n\n\n[MH-10665]\n - 404 for variables.json\n\n\n[MH-10667]\n - Previous Button does not always work\n\n\n[MH-10681]\n - Time is missing when a workflow operation has been started and stopped\n\n\n[MH-10683]\n - Remove Capture Agent\n\n\n[MH-10683]\n - Remove the Capture Agent integration tests\n\n\n[MH-10684]\n - Admin UI seems only unresponsive if server is down\n\n\n[MH-10689]\n - I should get a warning, if I leave the Admin UI while I still create an event (upload a file)\n\n\n[MH-10698]\n - workflow after videoeditor does not produce any \n*/delivery\n flavors\n\n\n[MH-10700]\n - Service Registry throws NPE exception on startup\n\n\n[MH-10704]\n - Workflows fail if adding themes\n\n\n[MH-10705]\n - Row counter in Jobs table is 1 too much\n\n\n[MH-10707]\n - Unit Test Failure\n\n\n[MH-10710]\n - NullPointerException in VideoSegmentationWOH\n\n\n[MH-10711]\n - OptimisticLockException after ingest\n\n\n[MH-10712]\n - Workflow cleanup out of memory error\n\n\n[MH-10713]\n - Cache util blocks forever\n\n\n[MH-10726]\n - Archive operation should use filesystem copy rather than http download\n\n\n[MH-10736]\n - Engage is currently broken and won't play videos but Theodule does\n\n\n[MH-10740]\n - NPE in ToolsEndpoint\n\n\n[MH-10746]\n - There is no event status column\n\n\n[MH-10758]\n - Issues found in production use of Theodul: changing icons, seeking in Chrome, using configured logos, wording, layout...\n\n\n[MH-10759]\n - Write QA documentation for Events\n\n\n[MH-10759]\n - Write QA documentation for Groups\n\n\n[MH-10759]\n - Write QA documentation for Servers\n\n\n[MH-10759]\n - Write QA documentation for Services\n\n\n[MH-10763]\n - Remove Old Confirations\n\n\n[MH-10765]\n - Operation details doesn't show operation attributes when state is instantiated\n\n\n[MH-10768]\n - Workflow operations table in the events details should refresh automatically\n\n\n[MH-10769]\n - Add (x) icon in the events and series tableview to allow deletion of single Events/Series\n\n\n[MH-10770]\n - Some captions of tabs are not yet translated\n\n\n[MH-10772]\n - Ensure that buttons order is consistent in the actions column\n\n\n[MH-10773]\n - Allow to have free-text value for presenters, contributors, organizers or publishers\n\n\n[MH-10774]\n - ACL editing should be locked on the Series level when events of the series are being processed\n\n\n[MH-10775]\n - All the roles with read/write rights can be deleted from the ACL editor in Events/Series details\n\n\n[MH-10776]\n - Include Spanish and French translation into Theodul.\n\n\n[MH-10780]\n - Specify Requirements\n\n\n[MH-10781]\n - Respect tags while filtering for suitable tracks in Theodul player\n\n\n[MH-10792]\n - Pom.xml Extra Modules\n\n\n[MH-10798]\n - Event Details tile shows hash identifier\n\n\n[MH-10799]\n - Videoeditor operation does not properly handle missing preview formats\n\n\n[MH-10804]\n - It is unclear in which timezone you schedule in the admin-ui\n\n\n[MH-10807]\n - New event POST request contains every series and user\n\n\n[MH-10808]\n - Disable Demo Users\n\n\n[MH-10810]\n - Rename upgrade script form 1.6 to 2.0\n\n\n[MH-10812]\n - Use bundles.configuration.location in admin ng settings.yml\n\n\n[MH-10814]\n - Pressing play while buffering breaks player\n\n\n[MH-10816]\n - Move Message Broker Configuration to Global Config\n\n\n[MH-10821]\n - Severe Issue with Scheduled Events\n\n\n[MH-10829]\n - Unchecking \"Remember me\" checkbox has no effect when logged out. Pressing the browsers back button you're still logged in an d can use all functions.\n\n\n[MH-10836]\n - Issues with matterhorn-engage-theodul-plugin-archetype\n\n\n[MH-10837]\n - Bulk deletion of events doesn't work correctly\n\n\n[MH-10843]\n - different video qualities are not filtered correctly.\n\n\n[MH-10845]\n - Summary of \"Add Events\" and \"Add Series\" shows irrelevant data\n\n\n[MH-10847]\n - Missing with-role directive in \"Start Task\" option in Actions dropdown\n\n\n[MH-10848]\n - Event conflict endpoint returns Server error 500\n\n\n[MH-10849]\n - Temporary videoeditor files get not deleted\n\n\n[MH-10850]\n - Interface MatterhornConstans has a typo\n\n\n[MH-10853]\n - Improve admin UI ng workflows\n\n\n[MH-10855]\n - Task Menu displays wrong UI\n\n\n[MH-10864]\n - Remove Trailing Spaces From Less Files\n\n\n[MH-10866]\n - Documentation: Incorrect Repository Links\n\n\n[MH-10868]\n - Linebreak before last segment in player\n\n\n[MH-10873]\n - capture-admin-service-impl tests randomly failing\n\n\n[MH-10876]\n - Admin UI NG makes calls to remote resources\n\n\n[MH-10880]\n - Remote base keeps try to call a service\n\n\n[MH-10881]\n - Wrong links to r/2.0.x on documentation page\n\n\n[MH-10884]\n - WokflowOperation getTimeInQueue should return 0 if value is NULL\n\n\n[MH-10888]\n - Theodul player: audio-only does not work - player checked for unavailable size.\n\n\n[MH-10901]\n - Execute Service is not in main pom.xml and will not be built\n\n\n[MH-10902]\n - ./modules/matterhorn-publication-service-youtube/ obsolete\n\n\n[MH-10905]\n - FFmpeg videoeditor only works with audio and video available\n\n\n[MH-10911]\n - Remove executable flag from non-executables\n\n\n[MH-10912]\n - Init scripts contain undefined references to DEBUG_PORT and DEBUG_SUSPEND\n\n\n[MH-10913]\n - Add Event: License Metadata Field Text\n\n\n[MH-10924]\n - Update to new Opencast logos\n\n\n[MH-10926]\n - Extensive PhantomJS warnings when building admin-ng\n\n\n[MH-10928]\n - Adjust loglevel in DictionaryService\n\n\n[MH-10929]\n - Cutting and Review are skipped when config is set to do so\n\n\n[MH-10930]\n - Fix missing German translation\n\n\n[MH-10934]\n - Once set, one cannot remove some metadata in the create event dialog\n\n\n[MH-10938]\n - Missing views counter in player\n\n\n[MH-10939]\n - Task Summary does not display configuration values\n\n\n[MH-10946]\n - Fix Opencast 2 Installation Guides\n\n\n[MH-10950]\n - Fix DDL Readme\n\n\n[MH-10952]\n - Fix matterhorn-execute-operations naming\n\n\n[MH-10957]\n - Add License Guide for Developers",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#opencast-23x",
            "text": "",
            "title": "Opencast 2.3.x"
        },
        {
            "location": "/changelog/#opencast-235",
            "text": "Released on December 04, 2017   [MH-12588]  - Stream Security Leaks Secrets  [MH-12317]  - AdminUI create every 5 seconds stats request and may crash on heavy server load  [MH-12269]  - Clarify in the documentation the recommendation of setting  dispatchinterval  to 0 applies to non-admin nodes only  [MH-12190]  - Script injection in Media Module and Player  [MH-12000]  - Cross-tenant URL signing  [MH-11042]  - Admin UI NG tests fail in +5:30 timezone",
            "title": "Opencast 2.3.5"
        },
        {
            "location": "/changelog/#opencast-234",
            "text": "Released on August 03, 2017   [MH-12183]  - Theodul does not load  [MH-12203]  - Unescaped event and series titles when editing event or series (XSS)  [MH-12242]  - Theodul: Quality selector does not display/load  [MH-12246]  - Series WOH does not apply series DublinCore catalogs  [MH-12249]  - Media Module: Paging forgets search parameters",
            "title": "Opencast 2.3.4"
        },
        {
            "location": "/changelog/#opencast-233",
            "text": "Released on May 02, 2017   [MH-10558]  - Mime type not identified for matroska / mkv files  [MH-10595]  - Incident service returns internal server error if cascade=true requested for deleted workflow  [MH-10747]  - Inputs for capture device should be pre-selected  [MH-11736]  - Difference in start time displayed in overview and metadata details  [MH-11811]  - Opencast build fails when system timezone is set to PDT (Pacific Daylight Time)  [MH-12048]  - Series drop-down not sorted alphabetically in filter  [MH-12069]  - Deleting an event leaves behind orphaned comments  [MH-12095]  - Server default timezone can be incorrect  [MH-12106]  - Preserve user attributes from providers during authentication  [MH-12107]  - Improve performance of Servers table in Admin UI  [MH-12118]  - Paging in media module is broken  [MH-12129]  - Media module only works with english localized browsers  [MH-12130]  - Filters set by selecting a category in the dashboard are not shown  [MH-12148]  - Undocumented Archive WOH Requirements  [MH-12150]  - Matroska files are not recognized  [MH-12158]  - Workflow job dispatching failures  [MH-12162]  - JpaJob object toString override for better log messages  [MH-12163]  - Events with stopped workflows sometimes cannot be deleted  [MH-12164]  - Updating serviceregistry config while running leaves Opencast in a non-functional state  [MH-12190]  - Script injection in Media Module and Player",
            "title": "Opencast 2.3.3"
        },
        {
            "location": "/changelog/#opencast-232",
            "text": "Released on March 22, 2017   [MH-11224]  - Attempting to view source metadata through the new admin UI generates a stack trace  [MH-11340]  - Uncaught NullPointer Exception in Karaf console from com.entwinemedia.fn.data.json.SimpleSerializer.toJson  [MH-11616]  - Search Service will not remove mp from index if it is not found in database  [MH-11743]  - event.hasPreview() broken  [MH-11760]  - Event edit warning cannot be removed  [MH-11790]  - Slide Previews and slide text are not shown in Theodul Engage player  [MH-11817]  - Unhide volume controls in video-editor  [MH-11819]  - Admin UI Video Editor - Improved Zoom Controls  [MH-12009]  - Admin UI Video Editor: Segmentation lost after publishing  [MH-12058]  - Ingests fail if specified workflow does not exist  [MH-12059]  - Catch invalid dates when indexing  [MH-12061]  - Reduce the number of activemq messages and log entries during index rebuild  [MH-12062]  - Improve robustness of scheduler re-indexing  [MH-12063]  - Catch incomplete archive entries when indexing  [MH-12072]  - Wrong destinationId for External API message receiver  [MH-12084]  - The class \"AsyncTimeoutRedirectFilter\" swallows almost all the exceptions  [MH-12087]  - Null bitrate can cause UI display of source media to fail  [MH-12092]  - Return event ID when event is created through Scheduler API  [MH-12097]  - SegmentVideoWorkflowOperation: Modules not included in Admin Presentation build.",
            "title": "Opencast 2.3.2"
        },
        {
            "location": "/changelog/#opencast-231",
            "text": "Released on Janurary 25, 2017   [MH-11267]  - Wrong notification text when deleting series  [MH-11458]  - Update translations from crowdin  [MH-11687]  - UI date formats are wrong for most of the English-speaking world  [MH-11776]  - CaptureAgentStateServiceImplTest incorrectly passes a non-long recording id, misses finding the NullPointer in Impl  [MH-11960]  - matterhorn-adminui-ng fails on first build  [MH-11961]  - Cannot access slidetext.xml should not break re-indexing  [MH-11963]  - Fix ingest REST docs  [MH-11966]  - Confusing AdminUI Groups Endpoint Documentation  [MH-11967]  - Publish internal fails on Distrubuted System Admin/Engage  [MH-11983]  - Only administrators should be allowed to assign the admin roles to other users  [MH-11987]  - Declare Admin UI Facade as module internal interface  [MH-11988]  - Advise to change karaf shutdown command in the docs  [MH-11989]  - Allow unknown as well as offline CAs to be removed via UI  [MH-11992]  - Compatibility issue when using contrib Wowza adaptive streaming module  [MH-11998]  - /info/me.json sometimes doesn't provide full information about the user  [MH-12004]  - Removing an recording does not remove all correspronding jobs  [MH-12005]  - UI shows inconsistent version due to missing version in cover-image-remote  [MH-12006]  - Security Issue Allowing Arbitrary Code Execution",
            "title": "Opencast 2.3.1"
        },
        {
            "location": "/changelog/#opencast-230",
            "text": "Released on December 13, 2016   [MH-10342]  - As an external device I want to immediate start and stop a capture  [MH-11327]  - De-couple smilImpl/wfrImpl from ingestImpl  [MH-11378]  - Conditionally synchronize Archive Service's add mediapackge  [MH-11380]  - As a customer, I want to integrate my third party application to Opencast, so that I can use Opencast content in my application  [MH-11381]  - Remove documentation of items that have never been implemented  [MH-11411]  - move dashboard to header  [MH-11675]  - Add documentation for External API to the Admin Guide  [MH-11688]  - Set java file encoding on startup  [MH-11718]  - As a producer, I want to be able to make workflow settings persistent so that I can reuse them later  [MH-11725]  - Give users a starting point how to report bugs  [MH-11726]  - Add AdminUI style guide to developer guide  [MH-11728]  - Use Apache Commons Lang 3  [MH-11729]  - External API: Add documentation for Groups Endpoint  [MH-11731]  - Typofix Documentation  [MH-11737]  - Comment (mh_event_comment and mh_event_comment_reply) text field is VARCHAR(255) should be TEXT  [MH-11740]  - optimization of segmentation  [MH-11741]  - Admin UI has timezone issues  [MH-11749]  - External API: Add REST documentation for Endpoints  [MH-11750]  - Clean-Up Opencast Code Base  [MH-11752]  - Upgrade Karaf to 3.0.8  [MH-11756]  - Admin UI NG Update CSS+HTML (1): FontAwesome, improve HTML, remove redundant images  [MH-11763]  - Counters hide series tab  [MH-11772]  - Admin UI source dropdowns inappropriately advance  [MH-11774]  - Admin UI Needs better documentation for debugging  [MH-11775]  - Library Update  [MH-11783]  - Custom publications labels not displayed when doing a mouse-over on Events->Published  [MH-11784]  - Remove Participation Management Code Pieces  [MH-11786]  - HttpsRequestWrapper wrongly sets the new URL  [MH-11791]  - As service provider I want to configure which kind of users can see the event counters  [MH-11792]  - NPM Proxy via Nexus  [MH-11794]  - NPM fails on first build  [MH-11795]  - Add support for title slides  [MH-11799]  - Maven bundle names too long  [MH-11800]  - LTI between Opencast and Moodle does not work  [MH-11801]  - Wowza streaming server needs flv: prefix for flv files  [MH-11802]  - Opencast Logo is missing in Player  [MH-11803]  - Player redirect is missing  [MH-11804]  - No video controls in embed mode  [MH-11808]  - Pre-select workflow in case only one option is available  [MH-11809]  - Fix syntax error in encoding profile composite.http  [MH-11812]  - Fix security configuration for ROLE_UI_TASKS_CREATE  [MH-11813]  - Agent state REST endpoint documentation  [MH-11815]  - As a user I expect changes to be reflected in the Admin UI immediately  [MH-11817]  - Admin UI Video Editor - Bug Fixes  [MH-11817]  - Display video details in preview player/ editor of the admin ui  [MH-11817]  - Improve Button Hover Indication  [MH-11817]  - Make Next/Last Frame controls in videoeditor better recognizeable  [MH-11827]  - Recordings->Events->\"Event Details\"->Metadata: Incorrect translation used  [MH-11828]  - exception-handler-workflow not set correctly  [MH-11829]  - High memory usage on the admin server by dispatching jobs  [MH-11831]  - As a service provider, I want to configure whether Opencast creates an admin user automatically  [MH-11834]  - Unable to set capture agent configuration as JSON  [MH-11836]  - Additional ACL actions of series are missing when creating a new event in that series  [MH-11837]  - Unprivileged users have no access to fonts  [MH-11839]  - typo in Event Details: Comments  [MH-11841]  - Wait for NFS shares before start Opencast service  [MH-11842]  - Revert accidental downgrade of grunt version  [MH-11851]  - org.opencastproject.security.admin/pass can't be changed  [MH-11857]  - Fix log output \"Unable to delete non existing object %s/%s\"  [MH-11862]  - Search API handles roles wrong  [MH-11863]  - WOH analyze-tracks & WOH failing cause exceptions when shutting down Opencast  [MH-11864]  - WOH tag shall implement AbstractWorkflowOperationHandler  [MH-11865]  - Videoeditor Preview mixes in 2 Audiofiles  [MH-11866]  - Search box in Organization >> Groups not working  [MH-11867]  - Filter box in Organization >> Groups not working  [MH-11869]  - Deleting Series with 'Actions' is not working  [MH-11870]  - Wordlength in other languages except english too long  [MH-11871]  - ElasticSearch shall bind to 127.0.0.1  [MH-11875]  - ActiveMQ should not listen to all hosts by default  [MH-11880]  - Multiple issues with LDAP in branch 2.3.x  [MH-11883]  - Larger files may remain in system temp directory  [MH-11886]  - login pages throw errors on loading unnecessary scripts  [MH-11888]  - Organization Filter uses Provider where table uses Type  [MH-11889]  - Row size too large  [MH-11890]  - MySQL Connector Version Should Be Consistent  [MH-11891]  - Event counters query large amounts of useless data  [MH-11895]  - \u201cAdd Event\u201d Wizard Input Fields Broken  [MH-11896]  - Java Warnings in AbstractEventEndpoint  [MH-11897]  - Remove Deprecated StringHelper  [MH-11898]  - Fix Technical Duration Calculation  [MH-11899]  - Prevent Requesting Event Objects Multiple Times  [MH-11900]  - Minor Index Service Fixes  [MH-11905]  - Publish Configure WOH incorrectly retracts publications  [MH-11912]  - No slider in playback video player  [MH-11919]  - WOH image claims SUCCEEDED when actually skipping  [MH-11920]  - WOH prepare-av: Misleading log message  [MH-11921]  - WOH partial-import looses partial audio tracks in specific cases  [MH-11950]  - Javadocs build error  [MH-11955]  - Add en-GB to Languages",
            "title": "Opencast 2.3.0"
        },
        {
            "location": "/changelog/#opencast-22x",
            "text": "",
            "title": "Opencast 2.2.x"
        },
        {
            "location": "/changelog/#opencast-225",
            "text": "Released on June 7, 2017   [MH-11983]  - Only admins should be able to modify other admins  [MH-12006]  - Security Issue Allowing Arbitrary Code Execution  [MH-11962]  - Missing slidetext.xml should not break re-indexing",
            "title": "Opencast 2.2.5"
        },
        {
            "location": "/changelog/#opencast-224",
            "text": "Released on October 13, 2016   [MH-11831]  - As a service provider, I want to configure whether Opencast creates an admin user automatically  [MH-11851]  - org.opencastproject.security.admin/pass can't be changed  [MH-11862]  - Search API handles roles wrong  [MH-11875]  - ActiveMQ should not listen to all hosts by default",
            "title": "Opencast 2.2.4"
        },
        {
            "location": "/changelog/#opencast-223",
            "text": "Released on October 13, 2016   [MH-11285]  - Improve developers documentation: remote debugger with karaf  [MH-11741]  - Admin UI has timezone issues  [MH-11771]  - Improve section localization in developer guide  [MH-11773]  - Embed player does not use space very well and has scaling problems  [MH-11774]  - Admin UI Needs better documentation for debugging  [MH-11777]  - Event Details->Comments and Event Details->Assets don't work for unprivileged users  [MH-11787]  - Add release dates to changelog  [MH-11800]  - LTI between Opencast and Moodle does not work  [MH-11801]  - Wowza streaming server needs flv: prefix for flv files",
            "title": "Opencast 2.2.3"
        },
        {
            "location": "/changelog/#opencast-222",
            "text": "Released on September 14, 2016   [MH-11194]  - created themes not showing up in series branding tab  [MH-11572]  - FFmpeg Inspection Service Test - accurateFrameCount  [MH-11587]  - SQL Error  [MH-11714]  - Fix unit test: Event controller #accessSave saves the event access  [MH-11724]  - Additional actions not available in create event wizard anymore  [MH-11734]  - Fix el7 RPM docs  [MH-11735]  - Fix Stream Security Documentation  [MH-11744]  - Actions->Start Task: Various localization bugs  [MH-11748]  - Inconsistent and incorrect use of translate directive  [MH-11751]  - Player won't work if there are no segments  [MH-11755]  - No quality selection in Theodul Player  [MH-11759]  - Make Inspector Unit Tests More Robust",
            "title": "Opencast 2.2.2"
        },
        {
            "location": "/changelog/#opencast-221",
            "text": "Released on July 30, 2016   [MH-11092]  - Every Browser has an other \"Remember me\" checkbox  [MH-11169]  - Trimming points not set correctly after workflow is finished  [MH-11538]  - \"No compatible source was found for this video\" videojs player error in iOS device  [MH-11561]  - Style (CSS): Setting a server in Maintenance (srv-det-01)  [MH-11598]  - Wizards should not re-use data that has entered before  [MH-11644]  - Missing Admin Interface Mock Data  [MH-11653]  - Jobs do not always proceed  [MH-11655]  - Jobs with high job load never get processed  [MH-11659]  - Warning is missing that metada and ACL cannot be edited while job is processing.  [MH-11661]  - Link on logo on the media module points to admin ui or welcome page, instead of something that is accessable for every user  [MH-11664]  - Incorrect Inconsistency status when built from tarball  [MH-11665]  - Systems->Servers & Systems->Services show wrong mean runtime and mean queue time  [MH-11667]  - Align main table content  [MH-11668]  - Missing segment previews let to an erro in the player  [MH-11669]  - Do not archive OCR texts  [MH-11673]  - Add documentation for additional ACL actions  [MH-11674]  - Add documentation for metadata configuration  [MH-11679]  - Page size cannot be changed in any table  [MH-11681]  - Add documentation for role-based visibility  [MH-11682]  - Remove useless roles from roles.txt  [MH-11686]  - Extended metadata tab not shown although user has the role ROLE_UI_EVENTS_DETAILS_METADATA_VIEW  [MH-11690]  - Various Documentation Improvements  [MH-11692]  - Remove Superfluous Mh-Db-Version  [MH-11693]  - Remove Superfluous Dependency Versions  [MH-11694]  - JavaDoc Generation Broken  [MH-11702]  - After an upgrade to 2.2.0, series are not displayed in the UI because the series creation date is now mandatory  [MH-11720]  - Opencast 2.2 requires Git to be installed at build time  [MH-11727]  - Fix unit test: adminNg.services.language #toLocalTime converts a zulu time string back to local time FAILED  [MH-11730]  - Make the automatic role prefix in LDAPUserProvider configurable",
            "title": "Opencast 2.2.1"
        },
        {
            "location": "/changelog/#opencast-220",
            "text": "Released on June 15, 2016   [MH-9511]  - Wrong log level in Tesseract  [MH-9831]  - ehcache and quartz phones home  [MH-9950]  - Update player dependencies  [MH-10029]  - Remove Unnecessary Image Conversion Step From TextAnalysisService  [MH-10173]  - Do not ignore exceptions when closing Closeable's  [MH-10748]  - Matterhorn has to be restarted to schedule an event on a new capture device  [MH-10794]  - Delete Action should be disabled if nothing is selected  [MH-10869]  - ActiveMQ Configuration and Connection Problems  [MH-10870]  - ActiveMQ Exceptions While Shutting Down Matterhorn  [MH-10887]  - Users can schedule events in the past  [MH-10898]  - Update Apache HttpComponents (3.1.7 \u2192 4.4.1)  [MH-10923]  - Theodul player : Filtering \"composite\" tags results in error when the composite workflow is used  [MH-10942]  - Events are not deselected after applying a task  [MH-10965]  - Theodul player : Videos not playable on IE10  [MH-10971]  - Newly created Series don't show up in Series dropdown selection lists without page reload  [MH-10978]  - Unable to retract 'internal' publications  [MH-10979]  - Opencast needs to better distribute load across the available nodes  [MH-10984]  - Extend ingest service by partial upload  [MH-11010]  - Stream Security should be able to prevent cross-tenants access  [MH-11014]  - Add support for additional ACL actions  [MH-11077]  - The Publish Workflow will not retract already published material  [MH-11097]  - View modes not working correctly  [MH-11107]  - Group list pagination not working  [MH-11121]  - MacOS X Installation Guide Needs 2.1 Update  [MH-11124]  - Incorrect documentation on how to create users  [MH-11128]  - Docs about SilenceDetector threashold are incorrect  [MH-11139]  - Unable to find mimetype for mkv  [MH-11140]  - Forward and backward buttons are greyed out  [MH-11143]  - Link to Media Module in Admin UI  [MH-11148]  - Search box layout incorrect: Icon overlaps text  [MH-11156]  - Users: Search box not implemented  [MH-11157]  - Groups: Search box not implemented  [MH-11165]  - Sorting does not work on Systems->Jobs, Systems->Servers and Systems->Services  [MH-11167]  - Layout problem on Workflow Error Details view  [MH-11183]  - Capture->Locations: Search box not implemented  [MH-11190]  - Theodul Shortcuts: Description could be improved  [MH-11191]  - Event Details->Assets: Use human-readable units for duration, bitrates and sizes  [MH-11192]  - Audio level slider does not change audio level while dragging  [MH-11199]  - Playback & video editor don't work while workflow is running  [MH-11209]  - LTI Documentation needs to be incorporated into new docs  [MH-11222]  - Replace System.out.println with logger  [MH-11229]  - workflowoperation unit tests are incredible slow  [MH-11252]  - Some service configuration files are stored in the wrong directory  [MH-11265]  - Ensure configuration files end with newline characters  [MH-11266]  - Logger ConversionPattern stated twice  [MH-11276]  - HttpNotificationWorkflowOperationHandlerTest fails if a certain Domain Exists  [MH-11280]  - Opencast fails to compile due to missing dependencies in test-harness  [MH-11281]  - Enhance WOH image to support extraction of multiple images using multiple encoding profiles from multiple sources  [MH-11282]  - Enhance WOH composite to support single video streams  [MH-11287]  - Update Apereo/Apache License List  [MH-11289]  - Change text extraction documentation or file name  [MH-11294]  - Create admin-worker and ingest distribution  [MH-11296]  - HTTP method POST is not supported by this url in r/2.1.x  [MH-11298]  - Fix json-simple version specification  [MH-11300]  - WOH partial-import looses partial audio tracks beginning at position zero  [MH-11304]  - Documentation for WOH partial-import and load configuration not listed in pages configuration  [MH-11306]  - Change job dispatcher sort order to: restart jobs, non-wf jobs, creation date  [MH-11307]  - Distribution Service is not on Presentation Node  [MH-11310]  - Document encoding profiles used by WOH partial-import  [MH-11311]  - Use existing encoding profiles in WOH partial-import example  [MH-11312]  - Fix Encode WOH Documentation  [MH-11313]  - Update Parallel Encode Profiles  [MH-11319]  - Media Module Always Uses Second Attachment as Preview  [MH-11320]  - Missing Image Preparation for text Extraction  [MH-11321]  - Fix default workflow configuration panel  [MH-11322]  - Update WebM Profiles  [MH-11355]  - Slide texts are not shown correctly in theodul player, except the first segment there a now slide texts shown (\"No slide text available\"). In the XML file the texts are correct  [MH-11356]  - Update Documentation Index Page  [MH-11357]  - Notifications are not removed after a while  [MH-11358]  - Dismiss Button for comments has an inconsistent design  [MH-11363]  - Notification that server is not reachable is missing  [MH-11364]  - Reasons in Comments section are no longer translated  [MH-11368]  - Changing to Chinese translation doesn't work  [MH-11369]  - Series filter displays series id instead of series title  [MH-11374]  - Videoeditor: Times are wrong in zoomed waveform view  [MH-11385]  - Metadata summary not showing any metadata at event creation  [MH-11386]  - Silence Detection / Video Editor Waveform bug  [MH-11389]  - security 1  [MH-11391]  - Improve Flavor creation and parsing  [MH-11392]  - Sorting by series.created does not work correctly  [MH-11401]  - Hiding of columns is globally broken  [MH-11404]  - Group editor shows users and roles twice  [MH-11405]  - Pagination broken for groups table  [MH-11409]  - Translation key EVENTS.EVENTS.GENERAL.SELECT_WORKFLOW_EMPTY is missing  [MH-11413]  - AdminUI comment dialog translations missing  [MH-11414]  - Logger is missing from several modules  [MH-11415]  - Incorrect Urlsigning Module Name  [MH-11416]  - Specify Opencast's Requirements  [MH-11417]  - Tab names of modals not vertically centered  [MH-11419]  - Tables not drawn correctly  [MH-11422]  - add event tab titles not translated  [MH-11427]  - Can't get host details from Serviceregistry REST endpoint  [MH-11428]  - Default Workflow Option Does Not Work  [MH-11430]  - Prevent user from accidentally press \"Save & process\" in Video Editor multiple times  [MH-11431]  - Prevent users from accidentally pressing the Delete/Retract button multiple times  [MH-11432]  - JSHint settings are missing  [MH-11434]  - \"The task could not be created\" error notification always appear when starting a task on multiple events  [MH-11435]  - Fix code style errors in Gruntfile.js  [MH-11436]  - Matterhorn on Login/Welcome Page  [MH-11437]  - Resource Problems On Login Page  [MH-11438]  - Resource Problem on Welcome Page  [MH-11439]  - Event description not available in WOH cover-image  [MH-11441]  - Clicking on Logo in top left corner will nmot get you to the start page  [MH-11443]  - Seeking is not possible before pressing play button at least once?!?  [MH-11446]  - Remove eclipse-gemini repository from main pom.xml  [MH-11447]  - Scheduling conflicts reporting completely broken  [MH-11448]  - Tipps on developing on admin ui ng  [MH-11450]  - Fix Defaults For Documentation Links  [MH-11453]  - Correctly link the stream security documentation  [MH-11457]  - Remove duplicate keys from Admin UI english translation  [MH-11458]  - Update translations from crowdin  [MH-11459]  - Logger Logs Nullpointer on Error  [MH-11462]  - Cover WOH is not included in a useful way  [MH-11464]  - setting personal preferences in admin UI fails  [MH-11468]  - There are unused ressources  [MH-11475]  - Fix typos in English master translation  [MH-11476]  - Series->Actions->Delete displays wrong notifications  [MH-11477]  - Editing status of series displays wrong notification when saving fails for all series  [MH-11480]  - Replace horizontal ellipsis  [MH-11481]  - Workflows started by unprivileged users hang  [MH-11492]  - forward and backward section not working in safari  [MH-11509]  - Failed test: Sorting groups list (grp-lis-01)  [MH-11511]  - Failed test: Manual set time in textbook for IE11  [MH-11512]  - hello world does not follow import statements rules  [MH-11518]  - Language selector is always displayed in system language  [MH-11519]  - Languages are only distinguished by main language  [MH-11520]  - Remove company logos  [MH-11521]  - ActiveMQ Library Configuration  [MH-11522]  - DataLoader Default Value  [MH-11523]  - Working file repository default value  [MH-11524]  - Distribution Service Default Values  [MH-11532]  - Wider language support in player  [MH-11534]  - Add language support for Chinese Simplified  [MH-11535]  - Add documentation about Crowdin to Developer Guide  [MH-11536]  - Remove Commercial Code From Core  [MH-11537]  - Execute Service WOH Cannot be Built  [MH-11539]  - Remove Old MH Logos in Favor of Opencast SVG Logos  [MH-11544]  - Admin UI links used inconsistently  [MH-11546]  - Pagination buttons too small for large numbers  [MH-11548]  - The \"Edit\" button at the top-right corner of the tables doesn't support localization  [MH-11550]  - Update Migration documentation 2.1 to 2.2  [MH-11554]  - Filtering does not work on Systems->Jobs, Systems->Servers and Systems->Services  [MH-11555]  - Localisation of Recordings->Events and Recordings->Series buggy  [MH-11556]  - Failed test: Filter locations (T1733, Filter by status does not work)  [MH-11559]  - outdated shortcurts configuration prevents player from loading.  [MH-11571]  - Elasticsearch shutdown command handler crash opencast  [MH-11573]  - Do not hide warnings  [MH-11574]  - Jetty Error on Large Workflow Instances  [MH-11575]  - Inspection Service Tests Fail With Certain FFmpeg Versions  [MH-11576]  - Servlet Filter Improvements  [MH-11578]  - Improve default order of columns in Systems->Jobs  [MH-11579]  - Admin UI mockup data for Systems->Jobs incomplete  [MH-11580]  - Unit tests for Admin UI language selection broken  [MH-11581]  - Systems->Jobs table not working correctly  [MH-11583]  - Fix Code Style  [MH-11588]  - Create side-by-side preview for video editor  [MH-11589]  - Feedback button does not work  [MH-11590]  - The WorkflowServiceImpl constructor sets the \"waitForResources\" argument incorrectly  [MH-11594]  - Add language support for Galician  [MH-11595]  - Fix admin ui unit tests for tableService  [MH-11597]  - Building matterhorn-engage-theodul-plugin-video-videojs reports a lot of code style issues  [MH-11600]  - Failed test: i18n (gen-int-01)  [MH-11601]  - current language can have undefined state  [MH-11604]  - Date picker for setting up the schedule is always french  [MH-11605]  - Disabling link to mediaplayer creates a broken link and missing logo  [MH-11606]  - Add language support for Greek  [MH-11608]  - Add documentation for WOH cleanup  [MH-11613]  - WOH editor fails when input has uneven width or height  [MH-11614]  - Partial matches not working anymore  [MH-11617]  - Add language support for Dutch  [MH-11620]  - Non privileged user can not login on presentation node  [MH-11623]  - Server statistics: Slow Query  [MH-11624]  - Workflow owners do not necessarily have access to their workflows: user comparison fails  [MH-11627]  - NullPointerException when creating a new Solr index  [MH-11629]  - Hide Some Confusing Warnings  [MH-11630]  - Service registry lacks of getActiveJobs() function  [MH-11631]  - Remove columns \"Blacklisted from\" and \"Blacklisted until\" from Capture->Locations  [MH-11632]  - Library Bugfix Upgrade  [MH-11636]  - Adjust FFmpegComposer Logging for Newer FFmpeg Versions  [MH-11637]  - Add language support for Swedish  [MH-11638]  - Improve Encoding Profiles  [MH-11639]  - Media module login form has poor usability and bugs  [MH-11642]  - Remove binding to non-existing method in WOH analyze-tracks  [MH-11643]  - Add language support for Polish  [MH-11645]  - Open AdminUI menu links in new tab does not work  [MH-11646]  - Add documentation for WOH comment  [MH-11652]  - Unit tests for servicesController broken  [MH-11654]  - Failed ingest jobs block system from dispatching other jobs  [MH-11656]  - Add documentation for WOH copy  [MH-11657]  - Improve documentation for workflow execution conditions  [MH-11658]  - Better quality for video editor previews  [MH-11663]  - Hide Participation Management from UI since not yet working  [MH-11666]  - Not all WOH listed in WOH overview",
            "title": "Opencast 2.2.0"
        },
        {
            "location": "/changelog/#opencast-21x",
            "text": "",
            "title": "Opencast 2.1.x"
        },
        {
            "location": "/changelog/#opencast-212",
            "text": "Released on May 10, 2016   [MH-9831]  - ehcache and quartz phones home  [MH-11121]  - MacOS X Installation Guide Needs 2.1 Update  [MH-11124]  - Incorrect documentation on how to create users  [MH-11128]  - Docs about SilenceDetector threashold are incorrect  [MH-11209]  - LTI Documentation needs to be incorporated into new docs  [MH-11229]  - workflowoperation unit tests are incredible slow  [MH-11283]  - post-mediapackage WOH breaks further processing  [MH-11287]  - Update Apereo/Apache License List  [MH-11296]  - HTTP method POST is not supported by this url in r/2.1.x  [MH-11298]  - Fix json-simple version specification  [MH-11307]  - Distribution Service is not on Presentation Node  [MH-11319]  - Media Module Always Uses Second Attachment as Preview  [MH-11320]  - Missing Image Preparation for text Extraction  [MH-11321]  - Fix default workflow configuration panel  [MH-11323]  - Workflow Docs are Incorrect  [MH-11332]  - Document acceptance criteria for proposals  [MH-11356]  - Update Documentation Index Page  [MH-11377]  - Opencast does not have an ingest assembly",
            "title": "Opencast 2.1.2"
        },
        {
            "location": "/changelog/#opencast-211",
            "text": "Released on January 22, 2016   [MH-11107]  - Group list pagination not working  [MH-11265]  - Ensure configuration files end with newline characters  [MH-11266]  - Logger ConversionPattern stated twice  [MH-11276]  - HttpNotificationWorkflowOperationHandlerTest fails if a certain Domain Exists  [MH-11280]  - Opencast fails to compile due to missing dependencies in test-harness",
            "title": "Opencast 2.1.1"
        },
        {
            "location": "/changelog/#opencast-210",
            "text": "Released on December 22, 2015   [MH-10637]  - Hello World service  [MH-10651]  - Workspace cleaner job param in wrong units (ms vs s) and wrong logic  [MH-10714]  - Two clock icons at the time stamp of a comment  [MH-10805]  - The confirmation dialog are not translated  [MH-10818]  - The creation date is presented as ISO string in the event metadata  [MH-10869]  - ActiveMQ Configuration and Connection Problems  [MH-10874]  - Plugin does not properly handle multiple keys  [MH-10875]  - Include search capabilities into mkdocs documentation build  [MH-10890]  - Update Apache Commons Lang (2.6 \u2192 3.4)  [MH-10908]  - Assemblie Module Names Too Long  [MH-10908]  - Consistency in Documentation: Presentation Server VS Engage Server  [MH-10908]  - Misconfigured Checkstyle Plug-in in Assemblies  [MH-10919]  - Top row for setting roles in the access policy for an event is not showing the right value  [MH-10953]  - Spanish layout is broken  [MH-10955]  - Make sure recent versions of mkdocs work  [MH-10956]  - Update Synchronize.js  [MH-10985]  - As an operator I want to check the health status of Opencast  [MH-10986]  - Scheduling around DST change fails  [MH-10987]  - Improve workflow query to accept paging by index  [MH-10988]  - Rewrite workspace to fix several small issues  [MH-10989]  - Improve working file repository stream response  [MH-11007]  - Remove 3rd party tool script  [MH-11026]  - Several invalid links in the Opencast User Guides  [MH-11031]  - Missing option to create new event using files ingested from the inbox  [MH-11036]  - Adapt Fast Testing Workflow for Admin NG  [MH-11051]  - Fix WOH Documentation  [MH-11069]  - When creating new series, warning about read/write requirements is shown twice.  [MH-11072]  - The ACL editor needs enhanced validation  [MH-11074]  - Admin UI Test: New Event API Resource assembles the metadata for SCHEDULE_MULTIPLE with DST change is failing  [MH-11083]  - Clean-up Codebase after Karaf  [MH-11085]  - Make sure bundle cache is cleared when restarting  [MH-11086]  - Shorten File Names in Log Output  [MH-11088]  - translation error in theodul player  [MH-11089]  - Theodul player seems not to work with Internet Explorer at all  [MH-11093]  - single video screen size jump when clicked  [MH-11094]  - Problems in Theodul controls plugin due to wrong resolves of merge conflicts  [MH-11095]  - Make assemblies more user firedly  [MH-11096]  - Errors when loading admin-ng login page  [MH-11099]  - Removing one role from an Access Policy (acl-det-05)  [MH-11101]  - Creating a Theme with 2 bumper videos - In and Out (thm-new-01)  [MH-11109]  - Event details tab cannot handle long event titles well  [MH-11110]  - minor updates to ffmpeg video-editor and silence detection based on gregs review of the feature in 1.6.3  [MH-11111]  - Formatting issues in \u201cTheodul Pass Player - URL Parameters\u201d  [MH-11114]  - Remove System.out.println from FileReadDeleteTest  [MH-11120]  - Several Services Fail During Shutdown  [MH-11122]  - Create Service Files (Systemd/SysV-Init)  [MH-11126]  - Fix Translation for 2.1  [MH-11133]  - i18n: Theme Detail view layout broken in Spanish  [MH-11135]  - Create Release Manager Docs  [MH-11137]  - Comment reasons are not working correctly  [MH-11138]  - Clock icon displayed twice next to comment creation date  [MH-11141]  - Playback Speed in player needs more useful defaults  [MH-11142]  - fix translations for shortcuts  [MH-11144]  - update documentation regarding property for mediamodule logo  [MH-11147]  - Missing translations: FILTERS.USERS.PROVIDER.LABEL & FILTERS.USERS.ROLE.LABEL  [MH-11149]  - Filter locations: Translations FILTERS.AGENTS.NAME.LABEL & FILTERS.AGENTS.STATUS.LABEL missing  [MH-11151]  - Plaback speed from menu  [MH-11152]  - Editing ACL: Translation for USERS.ACLS.DETAILS.ACCESS.ACCESS_POLICY.DESCRIPTION missing  [MH-11153]  - Access Policy Details: Cannot navigate to previous or next ACL  [MH-11154]  - New Access Policy: Translation for USERS.ACLS.NEW.ACCESS.ACCESS_POLICY.DESCRIPTION missing  [MH-11155]  - ACL Editor: Role not displayed at all  [MH-11158]  - Playback Tool: Time can be edited, but editing has no effect  [MH-11159]  - Users sorting: Sort order for 'Name' not correct  [MH-11160]  - Create Group overwrites existing groups without warning  [MH-11162]  - security_sample_cas.xml in MH 2.0.1 Points to Wrong Welcome Page  [MH-11166]  - Number of rows not displayed on Systems->Servers  [MH-11176]  - Cannot playback a recording via LTI in 2.x  [MH-11177]  - Fix Player OSGI Dependencies  [MH-11178]  - Prevent FFmpeg Experimental AAC Encoder Bug to Affect Opencast  [MH-11180]  - Update video.js to latest 4.x version  [MH-11181]  - Flash streaming with multi-quality video does not work  [MH-11185]  - Event Details->Assets->: Asset size is always 0  [MH-11186]  - Event Details->Assets->Media->Media Details: Superfluous row 'Flavor'  [MH-11187]  - Configuration->Themes: Number of rows not displayed correctly  [MH-11189]  - Actions->Start Task: User can press create button multiple times  [MH-11193]  - Setting audio level slider to \"zero\" does not set the actual audio level to \"zero\"  [MH-11196]  - REST docs cannot be found in new admin ui  [MH-11198]  - Event dashboard seems not to support i18n  [MH-11201]  - Maven Assembly Plug-in Listed Twice  [MH-11202]  - FFmpeg video editor operation is synchronized  [MH-11212]  - Main Pom Clean-Up  [MH-11218]  - Karaf based Solr configuration  [MH-11221]  - ComposerServiceImpl creates incorrect incidents and error messages  [MH-11223]  - Remove unused files  [MH-11234]  - Admin-NG throws a couple of 404 errors  [MH-11236]  - Security ACL  see security list  [MH-11237]  - Service files are missing  [MH-11238]  - Silence-detection does not read configuration value for ffmpeg binary path  [MH-11248]  - Publish-Engage Workflow Operation Documentation is Missing Configuration Keys  [MH-11249]  - Apply-ACL WOH not properly replaced by Seried-WOH in Documentation  [MH-11250]  - Put temporary files in karaf data not in opencast.storage  [MH-11251]  - Capture-Admin Tests May Fail When Executed Too Fast  [MH-11257]  - Deprecated Mkdocs Config  [MH-11258]  - Make host configuration easier",
            "title": "Opencast 2.1.0"
        },
        {
            "location": "/changelog/#opencast-20x",
            "text": "",
            "title": "Opencast 2.0.x"
        },
        {
            "location": "/changelog/#opencast-202",
            "text": "Released on December 22, 2015   [MH-10235]  - Users are unable to determine the Version of Matterhorn  [MH-10484]  - Remove Mediainfo from 3rd-Party-Tools  [MH-10558]  - Mime type not identified for matroska / mkv files  [MH-10588]  - Improve MySQL DDL to make it consistent again  [MH-10759]  - Write QA documentation for Access Policies  [MH-10759]  - Write QA documentation for Series  [MH-10759]  - Write QA documentation for Themes  [MH-10818]  - The creation date is presented as ISO string in the event metadata  [MH-10918]  - Improve the representation of the attachments/catalogs/media/publications in the event details  [MH-10956]  - Update Synchronize.js  [MH-10964]  - The Opencast start script does not work on Mac OS X  [MH-10976]  - Eclipse (m2e) throws NullPointerException erros due to a missing property in the pom.xml file  [MH-11007]  - Remove 3rd party tool script  [MH-11007]  - Switch subtitle embedder to FFmpeg  [MH-11026]  - Several invalid links in the Opencast User Guides  [MH-11038]  - Make ListProviderScanner Scanner Less verbose  [MH-11048]  - admin ui tries to load missing library  [MH-11051]  - Fix WOH Documentation  [MH-11060]  - ActiveMQ settings filename fix (r/2.0.x)  [MH-11068]  - Table 'mh_bundleinfo' doesn't exist  [MH-11110]  - minor updates to ffmpeg video-editor and silence detection based on gregs review of the feature in 1.6.3  [MH-11176]  - Cannot playback a recording via LTI in 2.x  [MH-11177]  - Fix Player OSGI Dependencies  [MH-11181]  - Flash streaming with multi-quality video does not work  [MH-11202]  - FFmpeg video editor operation is synchronized  [MH-11221]  - ComposerServiceImpl creates incorrect incidents and error messages  [MH-11236]  - Security ACL  see security list  [MH-11238]  - Silence-detection does not read configuration value for ffmpeg binary path  [MH-11256]  - Opencast docs do not build anymore",
            "title": "Opencast 2.0.2"
        },
        {
            "location": "/changelog/#opencast-201",
            "text": "Released on September 3, 2015   [MH-10822]  - Possible to create new access policy template without a role with read/write permissions  [MH-10938]  - Missing views counter in player  [MH-10941]  - Usertracking Service Missing Endpoint  [MH-10955]  - Make sure recent versions of mkdocs work  [MH-10962]  - Add missing licenses to NOTICES  [MH-10968]  - Add note about ffmpeg/libav on Ubuntu  [MH-10975]  - async loading of translations  [MH-10995]  - Gathering workflow statistics for JMX causes extreme performance issues",
            "title": "Opencast 2.0.1"
        },
        {
            "location": "/changelog/#opencast-200",
            "text": "Released on July 17, 2015   [MH-9950]  - \"Clean up\"/Split up nested functions in the core routine (core.js)  [MH-9950]  - Load CSS files in the core HTML file, not the JavaScript  [MH-9950]  - Scrolling is required to see the controls if they are configured to be below the video.  [MH-9950]  - Some Keys don't work  [MH-9950]  - Theodul Core Jasmine Tests Sometimes Failing  [MH-10029]  - FFmpeg based Videosegmenter  [MH-10140]  - Capture agent with no configuration is always shown as \"idle\"  [MH-10202]  - No ACL in new series when ingested a new mediapackage with a new series.  [MH-10230]  - Typos on the welcome page  [MH-10332]  - Remove Mediainfo Inspection Service  [MH-10382]  - Add a UI Element to Easily Unregister Capture Agents  [MH-10419]  - Improve user tracking tables  [MH-10510]  - Move Workflow Operation Handler into their own Packages  [MH-10550]  - Non-Interactive Foreground Mode For Matterhorn  [MH-10572]  - ShibbolethLoginHandler: 500 Error when login the first time  [MH-10594]  - Re-configure Start Scripts for Different Deployment Types  [MH-10615]  - Enable Optional Compiler Arguments  [MH-10620]  - Port Silence Detector from GStreamer to FFmpeg  [MH-10622]  - Wave Generation Improvement  [MH-10623]  - Set Sensible Default for Workspace Cleanup Period  [MH-10624]  - Fixes for FFmpeg Videosegmenter (Set Binary)  [MH-10630]  - Extending common functionality  [MH-10631]  - Scheduler service authorization handling  [MH-10635]  - Text extractor dead lock  [MH-10640]  - several problems with the metadata form to create a new event  [MH-10656]  - Login Screen: Placeholder and Focus  [MH-10658]  - Email template: diverse problems  [MH-10664]  - What is a template in Access Policy and how do I create it?  [MH-10665]  - 404 for variables.json  [MH-10667]  - Previous Button does not always work  [MH-10681]  - Time is missing when a workflow operation has been started and stopped  [MH-10683]  - Remove Capture Agent  [MH-10683]  - Remove the Capture Agent integration tests  [MH-10684]  - Admin UI seems only unresponsive if server is down  [MH-10689]  - I should get a warning, if I leave the Admin UI while I still create an event (upload a file)  [MH-10698]  - workflow after videoeditor does not produce any  */delivery  flavors  [MH-10700]  - Service Registry throws NPE exception on startup  [MH-10704]  - Workflows fail if adding themes  [MH-10705]  - Row counter in Jobs table is 1 too much  [MH-10707]  - Unit Test Failure  [MH-10710]  - NullPointerException in VideoSegmentationWOH  [MH-10711]  - OptimisticLockException after ingest  [MH-10712]  - Workflow cleanup out of memory error  [MH-10713]  - Cache util blocks forever  [MH-10726]  - Archive operation should use filesystem copy rather than http download  [MH-10736]  - Engage is currently broken and won't play videos but Theodule does  [MH-10740]  - NPE in ToolsEndpoint  [MH-10746]  - There is no event status column  [MH-10758]  - Issues found in production use of Theodul: changing icons, seeking in Chrome, using configured logos, wording, layout...  [MH-10759]  - Write QA documentation for Events  [MH-10759]  - Write QA documentation for Groups  [MH-10759]  - Write QA documentation for Servers  [MH-10759]  - Write QA documentation for Services  [MH-10763]  - Remove Old Confirations  [MH-10765]  - Operation details doesn't show operation attributes when state is instantiated  [MH-10768]  - Workflow operations table in the events details should refresh automatically  [MH-10769]  - Add (x) icon in the events and series tableview to allow deletion of single Events/Series  [MH-10770]  - Some captions of tabs are not yet translated  [MH-10772]  - Ensure that buttons order is consistent in the actions column  [MH-10773]  - Allow to have free-text value for presenters, contributors, organizers or publishers  [MH-10774]  - ACL editing should be locked on the Series level when events of the series are being processed  [MH-10775]  - All the roles with read/write rights can be deleted from the ACL editor in Events/Series details  [MH-10776]  - Include Spanish and French translation into Theodul.  [MH-10780]  - Specify Requirements  [MH-10781]  - Respect tags while filtering for suitable tracks in Theodul player  [MH-10792]  - Pom.xml Extra Modules  [MH-10798]  - Event Details tile shows hash identifier  [MH-10799]  - Videoeditor operation does not properly handle missing preview formats  [MH-10804]  - It is unclear in which timezone you schedule in the admin-ui  [MH-10807]  - New event POST request contains every series and user  [MH-10808]  - Disable Demo Users  [MH-10810]  - Rename upgrade script form 1.6 to 2.0  [MH-10812]  - Use bundles.configuration.location in admin ng settings.yml  [MH-10814]  - Pressing play while buffering breaks player  [MH-10816]  - Move Message Broker Configuration to Global Config  [MH-10821]  - Severe Issue with Scheduled Events  [MH-10829]  - Unchecking \"Remember me\" checkbox has no effect when logged out. Pressing the browsers back button you're still logged in an d can use all functions.  [MH-10836]  - Issues with matterhorn-engage-theodul-plugin-archetype  [MH-10837]  - Bulk deletion of events doesn't work correctly  [MH-10843]  - different video qualities are not filtered correctly.  [MH-10845]  - Summary of \"Add Events\" and \"Add Series\" shows irrelevant data  [MH-10847]  - Missing with-role directive in \"Start Task\" option in Actions dropdown  [MH-10848]  - Event conflict endpoint returns Server error 500  [MH-10849]  - Temporary videoeditor files get not deleted  [MH-10850]  - Interface MatterhornConstans has a typo  [MH-10853]  - Improve admin UI ng workflows  [MH-10855]  - Task Menu displays wrong UI  [MH-10864]  - Remove Trailing Spaces From Less Files  [MH-10866]  - Documentation: Incorrect Repository Links  [MH-10868]  - Linebreak before last segment in player  [MH-10873]  - capture-admin-service-impl tests randomly failing  [MH-10876]  - Admin UI NG makes calls to remote resources  [MH-10880]  - Remote base keeps try to call a service  [MH-10881]  - Wrong links to r/2.0.x on documentation page  [MH-10884]  - WokflowOperation getTimeInQueue should return 0 if value is NULL  [MH-10888]  - Theodul player: audio-only does not work - player checked for unavailable size.  [MH-10901]  - Execute Service is not in main pom.xml and will not be built  [MH-10902]  - ./modules/matterhorn-publication-service-youtube/ obsolete  [MH-10905]  - FFmpeg videoeditor only works with audio and video available  [MH-10911]  - Remove executable flag from non-executables  [MH-10912]  - Init scripts contain undefined references to DEBUG_PORT and DEBUG_SUSPEND  [MH-10913]  - Add Event: License Metadata Field Text  [MH-10924]  - Update to new Opencast logos  [MH-10926]  - Extensive PhantomJS warnings when building admin-ng  [MH-10928]  - Adjust loglevel in DictionaryService  [MH-10929]  - Cutting and Review are skipped when config is set to do so  [MH-10930]  - Fix missing German translation  [MH-10934]  - Once set, one cannot remove some metadata in the create event dialog  [MH-10938]  - Missing views counter in player  [MH-10939]  - Task Summary does not display configuration values  [MH-10946]  - Fix Opencast 2 Installation Guides  [MH-10950]  - Fix DDL Readme  [MH-10952]  - Fix matterhorn-execute-operations naming  [MH-10957]  - Add License Guide for Developers",
            "title": "Opencast 2.0.0"
        },
        {
            "location": "/installation/",
            "text": "Install Opencast\n\n\nInstallation from Source\n\n\nThese guides will help you to build Opencast, including all necessary third party tools. This method will most likely\nwork on all Unix-like systems.\n\n\n\n\nRedHat Enterprise Linux\n\n\nCentOS\n\n\nScientific Linux\n\n\nFedora\n\n\nDebian\n\n\nUbuntu\n\n\nMac OS X\n\n\n\n\nBuilding on most other Unix-like operating systems should be very much alike.\n\n\nInstallation from Repository\n\n\nThere is an RPM repository available for some operating systems. It provides packages containing pre-configured and\npre-built Opencast installations.\n\n\n\n\nRedHat Enterprise Linux\n\n\nCentOS\n\n\nScientific Linux\n\n\nFedora\n\n\n\n\nInstallation Across Multiple Servers\n\n\nFor production systems, it is recommended to install Opencast across multiple servers to separate the processing,\nmanagement and presentation layer, so that, for example, even if the processing layer is under full load, users can\nstill watch recordings unaffected since the presentation layer is running on a separate machine.\n\n\n\n\nInstallation Across Multiple Servers",
            "title": "Overview"
        },
        {
            "location": "/installation/#install-opencast",
            "text": "",
            "title": "Install Opencast"
        },
        {
            "location": "/installation/#installation-from-source",
            "text": "These guides will help you to build Opencast, including all necessary third party tools. This method will most likely\nwork on all Unix-like systems.   RedHat Enterprise Linux  CentOS  Scientific Linux  Fedora  Debian  Ubuntu  Mac OS X   Building on most other Unix-like operating systems should be very much alike.",
            "title": "Installation from Source"
        },
        {
            "location": "/installation/#installation-from-repository",
            "text": "There is an RPM repository available for some operating systems. It provides packages containing pre-configured and\npre-built Opencast installations.   RedHat Enterprise Linux  CentOS  Scientific Linux  Fedora",
            "title": "Installation from Repository"
        },
        {
            "location": "/installation/#installation-across-multiple-servers",
            "text": "For production systems, it is recommended to install Opencast across multiple servers to separate the processing,\nmanagement and presentation layer, so that, for example, even if the processing layer is under full load, users can\nstill watch recordings unaffected since the presentation layer is running on a separate machine.   Installation Across Multiple Servers",
            "title": "Installation Across Multiple Servers"
        },
        {
            "location": "/installation/multiple-servers/",
            "text": "Install Across Multiple Servers\n\n\nNote that this is not a comprehensive guide of all possible ways to install Opencast. It is more like a guide to good\npractices and presents what a lot of people are running.\n\n\nStep 1: Install Opencast\n\n\nOpencast consists of a large set of modules which together build the whole system. In a distributed set-up, different\nkinds of nodes are basically only defined by the existence or absence of specific modules.\n\n\nWhile it is possible to stick together a system module by module, opencast comes with a set of pre-defined distribution\nwhich can directly be built and installed. To build these distributions, you would compile Opencast just like it is\noutlined in the basic installation guides and will then find a set of different distributions, both as archive and in a\nseparate directory.\n\n\nTo list all distributions, run the following command after Opencast is built:\n\n\n% ls -1 build/*.tar.gz\nbuild/opencast-dist-admin-${version}.tar.gz\nbuild/opencast-dist-allinone-${version}.tar.gz\nbuild/opencast-dist-presentation-${version}.tar.gz\nbuild/opencast-dist-worker-${version}.tar.g\n...\n\n\n\nThe same distributions can be found in the packages provided in the Opencast RPM repository.  These packages will\nautomatically install all dependencies for a given node type. For example, to install an Opencast worker node, you would\ninstall the package \nopencast21-distribution-worker\n.\n\n\nThe following list describes possible set-ups:\n\n\nAll-In-One\n\n\nThis is the default set-up described in the basic installation guides. It works fine for testing purposes. It should\nusually not be used in production. It is not distributed but is listed here to have a comprehensive list of predefined\ndistributions.\n\n\nTwo-Server Set-up\n\n\nThis set-up is the minimum set-up recommended for productive use. It will separate the presentation layer from the\nadministrative and working layer. This means that even if one server is under heavy load while videos are processed, it\nwill not effect the distribution and users should still be able to watch videos smoothly. However, it might happen that\nunder heavy load the handling of the administrative user interface gets a bit rough.\n\n\nThree (or more) Server Set-up\n\n\nWhile in the last example we have created one combined node for both the administrative tools and the workers, in this\nexample we will split it into dedicated worker and admin nodes. Using this set-up it is easy to increase the systems\nperformance simply by adding further worker nodes to the system.\n\n\nStep 2: Set-Up NFS Server\n\n\nThough it is possible to have Opencast run without shared storage, it is still a good idea to do so, as hard links can\nbe used to link files instead of copying them and not everything has to be tunneled over HTTP.\n\n\nThus you should first set-up your NFS server. The best solution is certainly to have a dedicated storage server. For\nsmaller set-ups, however, it can also be put on one of the Opencast nodes, i.e. on the admin node.\n\n\nTo do this, you first have to install and enable the NFS server:\n\n\nyum install nfs-utils nfs-utils-lib\nchkconfig  --level 345 nfs on\nservice nfs start\n\n\n\nYou want to have one common user on all your systems, so that file permissions do not become an issue.. As preparation\nfor this it makes sense to manually create an \nopencast\n user and group with a common UID and GID:\n\n\ngroupadd -g 1234 opencast\nuseradd -g 1234 -u 1234 opencast\n\n\n\nIf the user and group id \n1234\n is already used, just pick another one but make sure to pick the same one on all your\nOpencast nodes.\n\n\nThen create the directory to be shared and set its ownership to the newly created users:\n\n\nmkdir -p /srv/opencast\nchown opencast:opencast /srv/opencast\n\n\n\nNext we actually share the storage dir. For this we need to edit the file \n/etc/exports\n and set:\n\n\n/srv/opencast  131.173.172.190(rw,sync,no_subtree_check)\n\n\n\nwith 131.173.172.190 being the IP address of the other machine that should get access. Finally we enable the share with:\n\n\nexportfs -a\n\n\n\nOf cause you have to open the necessary ports in your firewall configuration.  For iptables, appropriate rules could be\nfor example:\n\n\n-A INPUT -m state --state NEW -p tcp -m multiport --dport 111,892,2049,32803 -j ACCEPT\n-A INPUT -m state --state NEW -p udp -m multiport --dport 111,892,2049,32803 -j ACCEPT\n\n\n\nYou can set them by editing \n/etc/sysconfig/iptables\n and restarting the service afterwards.\n\n\nNow you have set-up your storage server. What is still left to do is to mount the network storage on all other servers\nof the Opencast clusters except the capture agents. To do that you need to edit the \n/etc/fstab\n on each server and add\nthe command to mount the network storage on startup:\n\n\nstorageserver.example.com:/srv/opencast /srv/opencast   nfs rw,hard,intr,rsize=32768,wsize=32768 0 0\n\n\n\nImportant:\n Do not use multiple NFS shares for different parts of the Opencast storage dir. Opencast will check if\nhard links are possible across in a distributed set-up, but the detection may fail if hard links are only possible\nbetween certain parts of the storage. This may lead to failures.\n\n\nImportant:\n Do not share the Karaf data directory. Doing so will cause Opencast to fail. Please share the storage\ndirectory only.\n\n\nStep 3: Set-Up the Database\n\n\nFirst make sure to follow the \nregular database set-up\n.\n\n\nDo not forget to set the user also for the remote servers and grant them the necessary rights. Additionally, you need to\nconfigure your firewall:\n\n\n-A INPUT -p tcp -s 131.173.172.190 --dport 3306 -m state --state NEW,ESTABLISHED -j ACCEPT\n\n\n\nStep 4: Set-Up ActiveMQ\n\n\nSince version 2, Opencast requires an Apache ActiveMQ message broker as message relay for the administrative user\ninterface. ActiveMQ can either be set up to run on its own machine or on one of the existing Opencast nodes (usually the\nadmin node).\n\n\nActiveMQ 5.10 or above should work. ActiveMQ 5.6 will not work. Versions in between are untested.\n\n\nInstallation\n\n\n\n\nIf you use the Opencast RPM repository, simply install the \nactivemq-dist\n package.\n\n\nIf you are running RHEL, CentOS or Fedora you can use the \nActiveMQ-dist Copr RPM repository\n   \n\n\nYou can download binary distributions from the \nApache ActiveMQ website\n\n\n\n\nConfiguration\n\n\nWhat you basically need to do is to point all your Opencast nodes to your message broker. For more information about\nthe configuration, have a look at the \nMessage Broker Set-Up Guide\n.\n\n\nDo not forget that ActiveMQ uses TCP port 61616 (default configuration) for communication which you might have to allow\nin your firewall.\n\n\nStep 5: Configure Opencast\n\n\nYou did already set-up and configured your database and message broker in the last steps, but there is some more\nconfiguration you have to do. First of all you should follow the Basic Configuration guide which will tell you how to\nset the login credentials etc. After that continue with the following steps:\n\n\ncustom.properties\n\n\nSet the server URL to the public url of each server (admin URL on admin, worker URL on worker, engage URL on engage, \u2026).\nThis may either be this nodes IP address or preferable its domain name:\n\n\norg.opencastproject.server.url=http://<URL>:8080\n\n\n\nSet the location of the shared storage directory:\n\n\norg.opencastproject.storage.dir=/srv/opencast\n\n\n\nDefine that the file repository shall access all files locally:\n\n\norg.opencastproject.file.repo.url=${org.opencastproject.admin.ui.url}\n\n\n\norg.opencastproject.organization-mh_default_org.cfg\n\n\nSet the base URL of the server hosting the administrative tools. Again use a domain name instead of an IP address if\npossible:\n\n\norg.opencastproject.admin.ui.url=http://<ADMIN-URL>:8080\n\n\n\nSet the base URL of the server hosting the engage tools:\n\n\norg.opencastproject.engage.ui.url=http://<ENGAGE-URL>:8080\n\n\n\norg.opencastproject.serviceregistry.impl.ServiceRegistryJpaImpl.cfg\n\n\nTo ensure that jobs are not dispatched by non-admin nodes, on these you should also set:\n\n\ndispatchinterval=0",
            "title": "Multiple Servers"
        },
        {
            "location": "/installation/multiple-servers/#install-across-multiple-servers",
            "text": "Note that this is not a comprehensive guide of all possible ways to install Opencast. It is more like a guide to good\npractices and presents what a lot of people are running.",
            "title": "Install Across Multiple Servers"
        },
        {
            "location": "/installation/multiple-servers/#step-1-install-opencast",
            "text": "Opencast consists of a large set of modules which together build the whole system. In a distributed set-up, different\nkinds of nodes are basically only defined by the existence or absence of specific modules.  While it is possible to stick together a system module by module, opencast comes with a set of pre-defined distribution\nwhich can directly be built and installed. To build these distributions, you would compile Opencast just like it is\noutlined in the basic installation guides and will then find a set of different distributions, both as archive and in a\nseparate directory.  To list all distributions, run the following command after Opencast is built:  % ls -1 build/*.tar.gz\nbuild/opencast-dist-admin-${version}.tar.gz\nbuild/opencast-dist-allinone-${version}.tar.gz\nbuild/opencast-dist-presentation-${version}.tar.gz\nbuild/opencast-dist-worker-${version}.tar.g\n...  The same distributions can be found in the packages provided in the Opencast RPM repository.  These packages will\nautomatically install all dependencies for a given node type. For example, to install an Opencast worker node, you would\ninstall the package  opencast21-distribution-worker .  The following list describes possible set-ups:",
            "title": "Step 1: Install Opencast"
        },
        {
            "location": "/installation/multiple-servers/#all-in-one",
            "text": "This is the default set-up described in the basic installation guides. It works fine for testing purposes. It should\nusually not be used in production. It is not distributed but is listed here to have a comprehensive list of predefined\ndistributions.",
            "title": "All-In-One"
        },
        {
            "location": "/installation/multiple-servers/#two-server-set-up",
            "text": "This set-up is the minimum set-up recommended for productive use. It will separate the presentation layer from the\nadministrative and working layer. This means that even if one server is under heavy load while videos are processed, it\nwill not effect the distribution and users should still be able to watch videos smoothly. However, it might happen that\nunder heavy load the handling of the administrative user interface gets a bit rough.",
            "title": "Two-Server Set-up"
        },
        {
            "location": "/installation/multiple-servers/#three-or-more-server-set-up",
            "text": "While in the last example we have created one combined node for both the administrative tools and the workers, in this\nexample we will split it into dedicated worker and admin nodes. Using this set-up it is easy to increase the systems\nperformance simply by adding further worker nodes to the system.",
            "title": "Three (or more) Server Set-up"
        },
        {
            "location": "/installation/multiple-servers/#step-2-set-up-nfs-server",
            "text": "Though it is possible to have Opencast run without shared storage, it is still a good idea to do so, as hard links can\nbe used to link files instead of copying them and not everything has to be tunneled over HTTP.  Thus you should first set-up your NFS server. The best solution is certainly to have a dedicated storage server. For\nsmaller set-ups, however, it can also be put on one of the Opencast nodes, i.e. on the admin node.  To do this, you first have to install and enable the NFS server:  yum install nfs-utils nfs-utils-lib\nchkconfig  --level 345 nfs on\nservice nfs start  You want to have one common user on all your systems, so that file permissions do not become an issue.. As preparation\nfor this it makes sense to manually create an  opencast  user and group with a common UID and GID:  groupadd -g 1234 opencast\nuseradd -g 1234 -u 1234 opencast  If the user and group id  1234  is already used, just pick another one but make sure to pick the same one on all your\nOpencast nodes.  Then create the directory to be shared and set its ownership to the newly created users:  mkdir -p /srv/opencast\nchown opencast:opencast /srv/opencast  Next we actually share the storage dir. For this we need to edit the file  /etc/exports  and set:  /srv/opencast  131.173.172.190(rw,sync,no_subtree_check)  with 131.173.172.190 being the IP address of the other machine that should get access. Finally we enable the share with:  exportfs -a  Of cause you have to open the necessary ports in your firewall configuration.  For iptables, appropriate rules could be\nfor example:  -A INPUT -m state --state NEW -p tcp -m multiport --dport 111,892,2049,32803 -j ACCEPT\n-A INPUT -m state --state NEW -p udp -m multiport --dport 111,892,2049,32803 -j ACCEPT  You can set them by editing  /etc/sysconfig/iptables  and restarting the service afterwards.  Now you have set-up your storage server. What is still left to do is to mount the network storage on all other servers\nof the Opencast clusters except the capture agents. To do that you need to edit the  /etc/fstab  on each server and add\nthe command to mount the network storage on startup:  storageserver.example.com:/srv/opencast /srv/opencast   nfs rw,hard,intr,rsize=32768,wsize=32768 0 0  Important:  Do not use multiple NFS shares for different parts of the Opencast storage dir. Opencast will check if\nhard links are possible across in a distributed set-up, but the detection may fail if hard links are only possible\nbetween certain parts of the storage. This may lead to failures.  Important:  Do not share the Karaf data directory. Doing so will cause Opencast to fail. Please share the storage\ndirectory only.",
            "title": "Step 2: Set-Up NFS Server"
        },
        {
            "location": "/installation/multiple-servers/#step-3-set-up-the-database",
            "text": "First make sure to follow the  regular database set-up .  Do not forget to set the user also for the remote servers and grant them the necessary rights. Additionally, you need to\nconfigure your firewall:  -A INPUT -p tcp -s 131.173.172.190 --dport 3306 -m state --state NEW,ESTABLISHED -j ACCEPT",
            "title": "Step 3: Set-Up the Database"
        },
        {
            "location": "/installation/multiple-servers/#step-4-set-up-activemq",
            "text": "Since version 2, Opencast requires an Apache ActiveMQ message broker as message relay for the administrative user\ninterface. ActiveMQ can either be set up to run on its own machine or on one of the existing Opencast nodes (usually the\nadmin node).  ActiveMQ 5.10 or above should work. ActiveMQ 5.6 will not work. Versions in between are untested.",
            "title": "Step 4: Set-Up ActiveMQ"
        },
        {
            "location": "/installation/multiple-servers/#installation",
            "text": "If you use the Opencast RPM repository, simply install the  activemq-dist  package.  If you are running RHEL, CentOS or Fedora you can use the  ActiveMQ-dist Copr RPM repository\n     You can download binary distributions from the  Apache ActiveMQ website",
            "title": "Installation"
        },
        {
            "location": "/installation/multiple-servers/#configuration",
            "text": "What you basically need to do is to point all your Opencast nodes to your message broker. For more information about\nthe configuration, have a look at the  Message Broker Set-Up Guide .  Do not forget that ActiveMQ uses TCP port 61616 (default configuration) for communication which you might have to allow\nin your firewall.",
            "title": "Configuration"
        },
        {
            "location": "/installation/multiple-servers/#step-5-configure-opencast",
            "text": "You did already set-up and configured your database and message broker in the last steps, but there is some more\nconfiguration you have to do. First of all you should follow the Basic Configuration guide which will tell you how to\nset the login credentials etc. After that continue with the following steps:",
            "title": "Step 5: Configure Opencast"
        },
        {
            "location": "/installation/multiple-servers/#customproperties",
            "text": "Set the server URL to the public url of each server (admin URL on admin, worker URL on worker, engage URL on engage, \u2026).\nThis may either be this nodes IP address or preferable its domain name:  org.opencastproject.server.url=http://<URL>:8080  Set the location of the shared storage directory:  org.opencastproject.storage.dir=/srv/opencast  Define that the file repository shall access all files locally:  org.opencastproject.file.repo.url=${org.opencastproject.admin.ui.url}",
            "title": "custom.properties"
        },
        {
            "location": "/installation/multiple-servers/#orgopencastprojectorganization-mh_default_orgcfg",
            "text": "Set the base URL of the server hosting the administrative tools. Again use a domain name instead of an IP address if\npossible:  org.opencastproject.admin.ui.url=http://<ADMIN-URL>:8080  Set the base URL of the server hosting the engage tools:  org.opencastproject.engage.ui.url=http://<ENGAGE-URL>:8080",
            "title": "org.opencastproject.organization-mh_default_org.cfg"
        },
        {
            "location": "/installation/multiple-servers/#orgopencastprojectserviceregistryimplserviceregistryjpaimplcfg",
            "text": "To ensure that jobs are not dispatched by non-admin nodes, on these you should also set:  dispatchinterval=0",
            "title": "org.opencastproject.serviceregistry.impl.ServiceRegistryJpaImpl.cfg"
        },
        {
            "location": "/installation/source-debian-ubuntu/",
            "text": "Install from Source (Debian, Ubuntu)\n\n\nThese instructions outline how to install an all in one Opencast system on Ubuntu 12.04 with LTS.\n\n\nPreparation\n\n\nCreate a dedicated Opencast user:\n\n\nuseradd -d /opt/opencast opencast\n\n\n\nGet Opencast source:\n\n\nYou can get the Opencast source code by either downloading a tarball of the source code or by cloning the Git\nrepository. The latter option is more flexible, it is easier to upgrade and in general preferred for developers. The\nprior option, the tarball download, needs less tools and you do not have to download nearly as much as with Git.\n\n\nUsing the tarball:\n\n\nSelect the tarball for the version you want to install from the \nBitBucket downloads section\n\n.\n\n\n# Download desired tarball\ncurl -O https://bitbucket.org/opencast-community/matterhorn/...\ntar xf ....tar.gz\ncd opencast-community-...\n\n\n\nCloning the Git repository:\n\n\ngit clone https://bitbucket.org/opencast-community/matterhorn.git\ncd matterhorn\ngit tag   <-  List all available versions\ngit checkout TAG   <-  Switch to desired version\n\n\n\nInstall Dependencies\n\n\nPlease make sure to install the following dependencies. Note that not all dependencies are in the system repositories.\n\n\nRequired:\n\n\nopenjdk-7-jdk or openjdk-8-jdk\nffmpeg >= 3.0.1\nmaven >= 3.1\nunzip\ngcc-c++\ntar\nbzip2\n\n\n\nRequired (not necessarily on the same machine):\n\n\nActiveMQ >= 5.10 (older versions untested)\n\n\n\nRequired for text extraction (recommended):\n\n\ntesseract >= 3\n\n\n\nRequired for hunspell based text filtering (optional):\n\n\nhunspell >= 1.2.8\n\n\n\nRequired for audio normalization (optional):\n\n\nsox >= 14.4\n\n\n\nDependency Download\n\n\nPre-built versions of most dependencies that are not in the repositories can be downloaded from the respective project\nwebsite:\n\n\n\n\nGet FFmpeg\n\n\nGet Apache Maven\n\n\nGet Apache ActiveMQ\n\n\n\n\nBuilding Opencast\n\n\nAutomatically build all Opencast modules and assemble distributions for different server types:\n\n\ncd opencast-dir\nmvn clean install\n\n\n\nDeploy all-in-one distribution:\n\n\ncd build/\nmv opencast-dist-allinone-*/ /opt/opencast\n\n\n\nMake sure everything belongs to the user \nopencast\n:\n\n\nsudo chown -R opencast:opencast /opt/opencast\n\n\n\nConfigure\n\n\nPlease follow the steps of the \nBasic Configuration guide\n. It will help you to set your\nhostname, login information, \u2026\n\n\nRunning Opencast\n\n\nTo start Opencast, run \n.../bin/start-opencast\n as user \nopencast\n:\n\n\nsudo -u opencast /opt/opencast/bin/start-opencast\n\n\n\nAs soon as Opencast is completely started, browse to \nhttp://localhost:8080\n to get to the\nadministration interface.\n\n\nRun Opencast as a service\n\n\nUsually, you do not want to run Opencast in interactive mode but as system service to make sure it is only running\nonce on a system and is started automatically.\n\n\nYou will find service files for Opencast in \ndocs/scripts/service/{opt,system}/\n.\n\n\nUsing Systemd\n\n\nMake sure the path to Opencast is set correctly:\n\n\nvim docs/scripts/service/opencast.service\n\n\n\nInstall the unit file:\n\n\ncp docs/scripts/service/opencast.service /usr/lib/systemd/system/\nsystemctl daemon-reload\n\n\n\nStart Opencast and make it run automatically:\n\n\nsystemctl start opencast.service\nsystemctl enable opencast.service\n\n\n\nUsing SysV-Init\n\n\n\n\nNote that this option is for compatibility to older systems. If you have the choice of either using the Systemd unit\nfile or the Init script, it is recommended to use the Systemd unit file.\n\n\n\n\nMake sure the path to Opencast is set correctly:\n\n\nvim docs/scripts/service/etc-init.d-opencast\n\n\n\n\n\n\n\nInstall init script:\n\n\ncp docs/scripts/service/etc-init.d-opencast /etc/init.d/opencast\n\n\n\n\n\n\n\nEnable service using \nchkconfig\n or \nupdate-rc.d\n\n\n\n\n\n\nStart Opencast using\n\n\nservice opencast start",
            "title": "Debian/Ubuntu"
        },
        {
            "location": "/installation/source-debian-ubuntu/#install-from-source-debian-ubuntu",
            "text": "These instructions outline how to install an all in one Opencast system on Ubuntu 12.04 with LTS.",
            "title": "Install from Source (Debian, Ubuntu)"
        },
        {
            "location": "/installation/source-debian-ubuntu/#preparation",
            "text": "Create a dedicated Opencast user:  useradd -d /opt/opencast opencast  Get Opencast source:  You can get the Opencast source code by either downloading a tarball of the source code or by cloning the Git\nrepository. The latter option is more flexible, it is easier to upgrade and in general preferred for developers. The\nprior option, the tarball download, needs less tools and you do not have to download nearly as much as with Git.  Using the tarball:  Select the tarball for the version you want to install from the  BitBucket downloads section .  # Download desired tarball\ncurl -O https://bitbucket.org/opencast-community/matterhorn/...\ntar xf ....tar.gz\ncd opencast-community-...  Cloning the Git repository:  git clone https://bitbucket.org/opencast-community/matterhorn.git\ncd matterhorn\ngit tag   <-  List all available versions\ngit checkout TAG   <-  Switch to desired version",
            "title": "Preparation"
        },
        {
            "location": "/installation/source-debian-ubuntu/#install-dependencies",
            "text": "Please make sure to install the following dependencies. Note that not all dependencies are in the system repositories.  Required:  openjdk-7-jdk or openjdk-8-jdk\nffmpeg >= 3.0.1\nmaven >= 3.1\nunzip\ngcc-c++\ntar\nbzip2  Required (not necessarily on the same machine):  ActiveMQ >= 5.10 (older versions untested)  Required for text extraction (recommended):  tesseract >= 3  Required for hunspell based text filtering (optional):  hunspell >= 1.2.8  Required for audio normalization (optional):  sox >= 14.4",
            "title": "Install Dependencies"
        },
        {
            "location": "/installation/source-debian-ubuntu/#dependency-download",
            "text": "Pre-built versions of most dependencies that are not in the repositories can be downloaded from the respective project\nwebsite:   Get FFmpeg  Get Apache Maven  Get Apache ActiveMQ",
            "title": "Dependency Download"
        },
        {
            "location": "/installation/source-debian-ubuntu/#building-opencast",
            "text": "Automatically build all Opencast modules and assemble distributions for different server types:  cd opencast-dir\nmvn clean install  Deploy all-in-one distribution:  cd build/\nmv opencast-dist-allinone-*/ /opt/opencast  Make sure everything belongs to the user  opencast :  sudo chown -R opencast:opencast /opt/opencast",
            "title": "Building Opencast"
        },
        {
            "location": "/installation/source-debian-ubuntu/#configure",
            "text": "Please follow the steps of the  Basic Configuration guide . It will help you to set your\nhostname, login information, \u2026",
            "title": "Configure"
        },
        {
            "location": "/installation/source-debian-ubuntu/#running-opencast",
            "text": "To start Opencast, run  .../bin/start-opencast  as user  opencast :  sudo -u opencast /opt/opencast/bin/start-opencast  As soon as Opencast is completely started, browse to  http://localhost:8080  to get to the\nadministration interface.",
            "title": "Running Opencast"
        },
        {
            "location": "/installation/source-debian-ubuntu/#run-opencast-as-a-service",
            "text": "Usually, you do not want to run Opencast in interactive mode but as system service to make sure it is only running\nonce on a system and is started automatically.  You will find service files for Opencast in  docs/scripts/service/{opt,system}/ .",
            "title": "Run Opencast as a service"
        },
        {
            "location": "/installation/source-debian-ubuntu/#using-systemd",
            "text": "Make sure the path to Opencast is set correctly:  vim docs/scripts/service/opencast.service  Install the unit file:  cp docs/scripts/service/opencast.service /usr/lib/systemd/system/\nsystemctl daemon-reload  Start Opencast and make it run automatically:  systemctl start opencast.service\nsystemctl enable opencast.service",
            "title": "Using Systemd"
        },
        {
            "location": "/installation/source-debian-ubuntu/#using-sysv-init",
            "text": "Note that this option is for compatibility to older systems. If you have the choice of either using the Systemd unit\nfile or the Init script, it is recommended to use the Systemd unit file.   Make sure the path to Opencast is set correctly:  vim docs/scripts/service/etc-init.d-opencast    Install init script:  cp docs/scripts/service/etc-init.d-opencast /etc/init.d/opencast    Enable service using  chkconfig  or  update-rc.d    Start Opencast using  service opencast start",
            "title": "Using SysV-Init"
        },
        {
            "location": "/installation/source-rhel-sl-centos/",
            "text": "Install from Source (RedHat Enterprise Linux, CentOS, Scientific Linux, Fedora)\n\n\nPreparation\n\n\nCreate a dedicated Opencast user:\n\n\nuseradd -d /opt/opencast opencast\n\n\n\nGet Opencast source:\n\n\nYou can get the Opencast source code by either downloading a tarball of the source code or by cloning the Git\nrepository. The latter option is more flexible, it is easier to upgrade and in general preferred for developers. The\nprior option, the tarball download, needs less tools and you do not have to download nearly as much as with Git.\n\n\nUsing the tarball:\n\n\nSelect the tarball for the version you want to install from the \nBitBucket downloads section\n\n.\n\n\n# Download desired tarball\ncurl -O https://bitbucket.org/opencast-community/matterhorn/...\ntar xf ....tar.gz\ncd opencast-community-...\n\n\n\nCloning the Git repository:\n\n\ngit clone https://bitbucket.org/opencast-community/matterhorn.git\ncd matterhorn\ngit tag   <-  List all available versions\ngit checkout TAG   <-  Switch to desired version\n\n\n\nInstall Dependencies\n\n\nPlease make sure to install the following dependencies. Note that not all dependencies are in the system repositories.\n\n\nRequired:\n\n\njava-devel >= 1:1.7.0\nffmpeg >= 3.0.1\nmaven >= 3.1\nunzip\ngcc-c++\ntar\nbzip2\n\n\n\nRequired (not necessarily on the same machine):\n\n\nActiveMQ >= 5.10 (older versions untested)\n\n\n\nRequired for text extraction (recommended):\n\n\ntesseract >= 3\n\n\n\nRequired for hunspell based text filtering (optional):\n\n\nhunspell >= 1.2.8\n\n\n\nRequired for audio normalization (optional):\n\n\nsox >= 14.4\n\n\n\nDependency Download\n\n\nPre-built versions of most dependencies that are not in the repositories can be downloaded from the respective project\nwebsite:\n\n\n\n\nGet FFmpeg\n\n\nGet Apache Maven\n\n\nGet Apache ActiveMQ\n\n\n\n\nBuilding Opencast\n\n\nAutomatically build all Opencast modules and assemble distributions for different server types:\n\n\ncd opencast-dir\nmvn clean install\n\n\n\nDeploy all-in-one distribution:\n\n\ncd build/\nmv opencast-dist-allinone-*/ /opt/opencast\n\n\n\nMake sure everything belongs to the user \nopencast\n:\n\n\nsudo chown -R opencast:opencast /opt/opencast\n\n\n\nConfigure\n\n\nPlease follow the steps of the \nBasic Configuration guide\n. It will help you to set your\nhostname, login information, \u2026\n\n\nRunning Opencast\n\n\nTo start Opencast, run \n.../bin/start-opencast\n as user \nopencast\n:\n\n\nsudo -u opencast /opt/opencast/bin/start-opencast\n\n\n\nAs soon as Opencast is completely started, browse to \nhttp://localhost:8080\n to get to the\nadministration interface.\n\n\nRun Opencast as a service\n\n\nUsually, you do not want to run Opencast in interactive mode but as system service to make sure it is only running\nonce on a system and is started automatically.\n\n\nYou will find service files for Opencast in \ndocs/scripts/service/{opt,system}/\n.\n\n\nUsing Systemd\n\n\nMake sure the path to Opencast is set correctly:\n\n\nvim docs/scripts/service/opencast.service\n\n\n\nInstall the unit file:\n\n\ncp docs/scripts/service/opencast.service /usr/lib/systemd/system/\nsystemctl daemon-reload\n\n\n\nStart Opencast and make it run automatically:\n\n\nsystemctl start opencast.service\nsystemctl enable opencast.service\n\n\n\nUsing SysV-Init\n\n\n\n\nNote that this option is for compatibility to older systems. If you have the choice of either using the Systemd unit\nfile or the Init script, it is recommended to use the Systemd unit file.\n\n\n\n\nMake sure the path to Opencast is set correctly:\n\n\nvim docs/scripts/service/etc-init.d-opencast\n\n\n\n\n\n\n\nInstall init script:\n\n\ncp docs/scripts/service/etc-init.d-opencast /etc/init.d/opencast\n\n\n\n\n\n\n\nEnable service using \nchkconfig\n or \nupdate-rc.d\n\n\n\n\n\n\nStart Opencast using\n\n\nservice opencast start",
            "title": "RHEL/CentOS"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#install-from-source-redhat-enterprise-linux-centos-scientific-linux-fedora",
            "text": "",
            "title": "Install from Source (RedHat Enterprise Linux, CentOS, Scientific Linux, Fedora)"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#preparation",
            "text": "Create a dedicated Opencast user:  useradd -d /opt/opencast opencast  Get Opencast source:  You can get the Opencast source code by either downloading a tarball of the source code or by cloning the Git\nrepository. The latter option is more flexible, it is easier to upgrade and in general preferred for developers. The\nprior option, the tarball download, needs less tools and you do not have to download nearly as much as with Git.  Using the tarball:  Select the tarball for the version you want to install from the  BitBucket downloads section .  # Download desired tarball\ncurl -O https://bitbucket.org/opencast-community/matterhorn/...\ntar xf ....tar.gz\ncd opencast-community-...  Cloning the Git repository:  git clone https://bitbucket.org/opencast-community/matterhorn.git\ncd matterhorn\ngit tag   <-  List all available versions\ngit checkout TAG   <-  Switch to desired version",
            "title": "Preparation"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#install-dependencies",
            "text": "Please make sure to install the following dependencies. Note that not all dependencies are in the system repositories.  Required:  java-devel >= 1:1.7.0\nffmpeg >= 3.0.1\nmaven >= 3.1\nunzip\ngcc-c++\ntar\nbzip2  Required (not necessarily on the same machine):  ActiveMQ >= 5.10 (older versions untested)  Required for text extraction (recommended):  tesseract >= 3  Required for hunspell based text filtering (optional):  hunspell >= 1.2.8  Required for audio normalization (optional):  sox >= 14.4",
            "title": "Install Dependencies"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#dependency-download",
            "text": "Pre-built versions of most dependencies that are not in the repositories can be downloaded from the respective project\nwebsite:   Get FFmpeg  Get Apache Maven  Get Apache ActiveMQ",
            "title": "Dependency Download"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#building-opencast",
            "text": "Automatically build all Opencast modules and assemble distributions for different server types:  cd opencast-dir\nmvn clean install  Deploy all-in-one distribution:  cd build/\nmv opencast-dist-allinone-*/ /opt/opencast  Make sure everything belongs to the user  opencast :  sudo chown -R opencast:opencast /opt/opencast",
            "title": "Building Opencast"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#configure",
            "text": "Please follow the steps of the  Basic Configuration guide . It will help you to set your\nhostname, login information, \u2026",
            "title": "Configure"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#running-opencast",
            "text": "To start Opencast, run  .../bin/start-opencast  as user  opencast :  sudo -u opencast /opt/opencast/bin/start-opencast  As soon as Opencast is completely started, browse to  http://localhost:8080  to get to the\nadministration interface.",
            "title": "Running Opencast"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#run-opencast-as-a-service",
            "text": "Usually, you do not want to run Opencast in interactive mode but as system service to make sure it is only running\nonce on a system and is started automatically.  You will find service files for Opencast in  docs/scripts/service/{opt,system}/ .",
            "title": "Run Opencast as a service"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#using-systemd",
            "text": "Make sure the path to Opencast is set correctly:  vim docs/scripts/service/opencast.service  Install the unit file:  cp docs/scripts/service/opencast.service /usr/lib/systemd/system/\nsystemctl daemon-reload  Start Opencast and make it run automatically:  systemctl start opencast.service\nsystemctl enable opencast.service",
            "title": "Using Systemd"
        },
        {
            "location": "/installation/source-rhel-sl-centos/#using-sysv-init",
            "text": "Note that this option is for compatibility to older systems. If you have the choice of either using the Systemd unit\nfile or the Init script, it is recommended to use the Systemd unit file.   Make sure the path to Opencast is set correctly:  vim docs/scripts/service/etc-init.d-opencast    Install init script:  cp docs/scripts/service/etc-init.d-opencast /etc/init.d/opencast    Enable service using  chkconfig  or  update-rc.d    Start Opencast using  service opencast start",
            "title": "Using SysV-Init"
        },
        {
            "location": "/installation/source-macosx/",
            "text": "Install from Source (Mac OS X)\n\n\nThese instructions outline how to install an all in one Opencast system on the Mac OS X operating system.\nTested on OS X 10.9 Mavericks.\n\n\n\n\nThe installation on Mac OS X is not officially supported. Use this at your own risk.\n\n\n\n\nPreparation\n\n\nOpen a Terminal and switch to the directory, in which the Opencast installation should be placed, e.g. \n/opt/\n, \n~/develop/\n or whatever you prefer.\n\n\nGet Opencast source\n\n\nYou can get the Opencast source code by either downloading a tarball of the source code or by cloning the Git repository. The latter option is more flexible, it is easier to upgrade and in general preferred for developers. The prior option, the tarball download, needs less tools and you don't have to download nearly as much as with Git.\n\n\nCloning the Git repository:\n\n\ngit clone https://bitbucket.org/opencast-community/matterhorn.git\ncd matterhorn\ngit tag   <-  List all available versions\ngit checkout TAG   <-  Switch to desired version\n\n\n\nUsing the tarball:\n\n\nSelect the tarball for the version you want to install from the \nBitBucket downloads section\n\n under the \"Tags\" tab and download it directly from there or with the curl command specified below.\n\n\n# Download desired tarball, replace [...] with the desired version\ncurl -O https://bitbucket.org/opencast-community/matterhorn/get/[...].tar.gz\ntar xf [...].tar.gz\n\n\n\nInstall Dependencies\n\n\nPlease make sure to install the following dependencies.\n\n\nRequired:\n\n\nXcode\njdk 7 or jdk 8 (recommended)\nffmpeg >= 2.8\nmaven >= 3.1\n\n\n\nRequired (not necessarily on the same machine):\n\n\nActiveMQ >= 5.10 (older versions untested)\n\n\n\nRequired for text extraction:\n\n\ntesseract >= 3\n\n\n\nRequired for hunspell based text filtering:\n\n\nhunspell >= 1.2.8\n\n\n\nRequired for audio normalization:\n\n\nsox >= 14.4 (with MP3, FLAC and OGG support)\n\n\n\nDependency Download\n\n\nYou can download Xcode in the Mac App Store. JDK 8 for OS X is available from \nOracle\n.\n\n\nUsing Homebrew\n\n\nHomebrew is a package manager for OS X. For installation instruction see \ntheir website\n.\n\n\nbrew install maven\nbrew install ffmpeg\nbrew install apache-activemq\n\nbrew install tesseract\nbrew install hunspell\nbrew install sox --with-lame --with-flac --with-libvorbis\n\n\n\nUsing pre-built binaries\n\n\nPre-built versions of most dependencies can be downloaded from the respective project website:\n\n\n\n\nGet Apache Maven\n\n\nGet FFmpeg\n\n\nGet Apache ActiveMQ\n\n\n\n\nBuilding Opencast\n\n\nSwitch to the opencast folder. If you downloaded the tarball, this is the folder you just unpacked (called something like \nopencast-community-matterhorn-[...]\n). If you chose to download via git, use \ncd matterhorn\n. You can proceed by building opencast (depending on the folder permissions, you might need to start the command with \nsudo\n):\n\n\nmvn clean install\n\n\n\n\n\nPlease be patient, as building Opencast for the first time will take quite long.\n\n\n\n\nConfigure\n\n\nPlease follow the steps of the \nBasic Configuration guide\n. It will help you to set your host name, login information, etc. Be aware that the config files now reside in the build folders for the desired distribution. For the allinone distribution, this would be \n/your/path/to/opencast/build/opencast-dist-allinone-[...]/etc/\n, again with \n[...]\n representing the selected version.\nAs specified in the guide, make sure you replace the default ActiveMQ configuration with the one provided in \ndocs/scripts/activemq/activemq.xml\n. If you installed ActiveMQ using homebrew, you can find the installation path with \nbrew info activemq\n.\n\n\nRunning Opencast\n\n\nMake sure you have ActiveMQ running (unless you're running it on a different machine). Then you can start Opencast using the start-opencast script:\n\n\nactivemq start\ncd /your/path/to/opencast/\ncd build/opencast-dist-allinone-[...]\n./bin/start-opencast\n\n\n\nAs soon as Opencast is completely started, browse to \nhttp://localhost:8080\n to get to the administration interface.",
            "title": "MacOS X"
        },
        {
            "location": "/installation/source-macosx/#install-from-source-mac-os-x",
            "text": "These instructions outline how to install an all in one Opencast system on the Mac OS X operating system.\nTested on OS X 10.9 Mavericks.   The installation on Mac OS X is not officially supported. Use this at your own risk.",
            "title": "Install from Source (Mac OS X)"
        },
        {
            "location": "/installation/source-macosx/#preparation",
            "text": "Open a Terminal and switch to the directory, in which the Opencast installation should be placed, e.g.  /opt/ ,  ~/develop/  or whatever you prefer.",
            "title": "Preparation"
        },
        {
            "location": "/installation/source-macosx/#get-opencast-source",
            "text": "You can get the Opencast source code by either downloading a tarball of the source code or by cloning the Git repository. The latter option is more flexible, it is easier to upgrade and in general preferred for developers. The prior option, the tarball download, needs less tools and you don't have to download nearly as much as with Git.  Cloning the Git repository:  git clone https://bitbucket.org/opencast-community/matterhorn.git\ncd matterhorn\ngit tag   <-  List all available versions\ngit checkout TAG   <-  Switch to desired version  Using the tarball:  Select the tarball for the version you want to install from the  BitBucket downloads section  under the \"Tags\" tab and download it directly from there or with the curl command specified below.  # Download desired tarball, replace [...] with the desired version\ncurl -O https://bitbucket.org/opencast-community/matterhorn/get/[...].tar.gz\ntar xf [...].tar.gz",
            "title": "Get Opencast source"
        },
        {
            "location": "/installation/source-macosx/#install-dependencies",
            "text": "Please make sure to install the following dependencies.  Required:  Xcode\njdk 7 or jdk 8 (recommended)\nffmpeg >= 2.8\nmaven >= 3.1  Required (not necessarily on the same machine):  ActiveMQ >= 5.10 (older versions untested)  Required for text extraction:  tesseract >= 3  Required for hunspell based text filtering:  hunspell >= 1.2.8  Required for audio normalization:  sox >= 14.4 (with MP3, FLAC and OGG support)",
            "title": "Install Dependencies"
        },
        {
            "location": "/installation/source-macosx/#dependency-download",
            "text": "You can download Xcode in the Mac App Store. JDK 8 for OS X is available from  Oracle .",
            "title": "Dependency Download"
        },
        {
            "location": "/installation/source-macosx/#using-homebrew",
            "text": "Homebrew is a package manager for OS X. For installation instruction see  their website .  brew install maven\nbrew install ffmpeg\nbrew install apache-activemq\n\nbrew install tesseract\nbrew install hunspell\nbrew install sox --with-lame --with-flac --with-libvorbis",
            "title": "Using Homebrew"
        },
        {
            "location": "/installation/source-macosx/#using-pre-built-binaries",
            "text": "Pre-built versions of most dependencies can be downloaded from the respective project website:   Get Apache Maven  Get FFmpeg  Get Apache ActiveMQ",
            "title": "Using pre-built binaries"
        },
        {
            "location": "/installation/source-macosx/#building-opencast",
            "text": "Switch to the opencast folder. If you downloaded the tarball, this is the folder you just unpacked (called something like  opencast-community-matterhorn-[...] ). If you chose to download via git, use  cd matterhorn . You can proceed by building opencast (depending on the folder permissions, you might need to start the command with  sudo ):  mvn clean install   Please be patient, as building Opencast for the first time will take quite long.",
            "title": "Building Opencast"
        },
        {
            "location": "/installation/source-macosx/#configure",
            "text": "Please follow the steps of the  Basic Configuration guide . It will help you to set your host name, login information, etc. Be aware that the config files now reside in the build folders for the desired distribution. For the allinone distribution, this would be  /your/path/to/opencast/build/opencast-dist-allinone-[...]/etc/ , again with  [...]  representing the selected version.\nAs specified in the guide, make sure you replace the default ActiveMQ configuration with the one provided in  docs/scripts/activemq/activemq.xml . If you installed ActiveMQ using homebrew, you can find the installation path with  brew info activemq .",
            "title": "Configure"
        },
        {
            "location": "/installation/source-macosx/#running-opencast",
            "text": "Make sure you have ActiveMQ running (unless you're running it on a different machine). Then you can start Opencast using the start-opencast script:  activemq start\ncd /your/path/to/opencast/\ncd build/opencast-dist-allinone-[...]\n./bin/start-opencast  As soon as Opencast is completely started, browse to  http://localhost:8080  to get to the administration interface.",
            "title": "Running Opencast"
        },
        {
            "location": "/installation/rpm-fedora/",
            "text": "Install from Repository (Fedora)\n\n\nThe Opencast RPM repository for Fedora has been discontinued since Fedora with RPMfusion now provides nearly all\nnecessary dependencies for Opencast. Use the following steps to install them, then continue with the \ninstallation from\nsource\n.\n\n\nThis guide is to be merged into the guide for the installation from source.\n\n\nAdd RPMfusion repository\n\n\nRPMFusion\n is a community-driven RPM repository for Fedora. It provides tools like FFmpeg. You\ncan activate it using:\n\n\ndnf install --nogpgcheck \\\n  http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \\\n  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm\n\n\n\nInstall 3rd-party-tools\n\n\nYou can install all necessary 3rd-Party-Tools for Opencast like this:\n\n\ndnf install maven ffmpeg tesseract hunspell sox\n\n\n\nFor additional Unicode tests run during the build process, you can also install:\n\n\ndnf install hunspell-de tesseract-langpack-deu\n\n\n\nInstall Apache ActiveMQ\n\n\nThe Apache ActiveMQ message broker is commonly installed on the same machine as Opencast for an all-in-one system. The\nversion of ActiveMQ shipped with Fedora is too old but you can use the \nActiveMQ-dist Copr RPM repository\n\n\n\nMake sure it is properly configured for Opencast. For more information about the setup, have a look at the\n\nmessage broker configuration documentation\n.\n\n\nInstall Opencast\n\n\nFor the installation of Opencast, please have a look at the \ninstallation from source documentation\n\n.",
            "title": "Fedora"
        },
        {
            "location": "/installation/rpm-fedora/#install-from-repository-fedora",
            "text": "The Opencast RPM repository for Fedora has been discontinued since Fedora with RPMfusion now provides nearly all\nnecessary dependencies for Opencast. Use the following steps to install them, then continue with the  installation from\nsource .  This guide is to be merged into the guide for the installation from source.",
            "title": "Install from Repository (Fedora)"
        },
        {
            "location": "/installation/rpm-fedora/#add-rpmfusion-repository",
            "text": "RPMFusion  is a community-driven RPM repository for Fedora. It provides tools like FFmpeg. You\ncan activate it using:  dnf install --nogpgcheck \\\n  http://download1.rpmfusion.org/free/fedora/rpmfusion-free-release-$(rpm -E %fedora).noarch.rpm \\\n  http://download1.rpmfusion.org/nonfree/fedora/rpmfusion-nonfree-release-$(rpm -E %fedora).noarch.rpm",
            "title": "Add RPMfusion repository"
        },
        {
            "location": "/installation/rpm-fedora/#install-3rd-party-tools",
            "text": "You can install all necessary 3rd-Party-Tools for Opencast like this:  dnf install maven ffmpeg tesseract hunspell sox  For additional Unicode tests run during the build process, you can also install:  dnf install hunspell-de tesseract-langpack-deu",
            "title": "Install 3rd-party-tools"
        },
        {
            "location": "/installation/rpm-fedora/#install-apache-activemq",
            "text": "The Apache ActiveMQ message broker is commonly installed on the same machine as Opencast for an all-in-one system. The\nversion of ActiveMQ shipped with Fedora is too old but you can use the  ActiveMQ-dist Copr RPM repository  Make sure it is properly configured for Opencast. For more information about the setup, have a look at the message broker configuration documentation .",
            "title": "Install Apache ActiveMQ"
        },
        {
            "location": "/installation/rpm-fedora/#install-opencast",
            "text": "For the installation of Opencast, please have a look at the  installation from source documentation .",
            "title": "Install Opencast"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/",
            "text": "Install from Repository (RedHat Enterprise Linux, CentOS, Scientific Linux)\n\n\nThere is an RPM software repository available for RedHat-based Linux distributions provided by the University of\nOsnabr\u00fcck. This repository provides preconfigured Opencast installations, including all 3rd-Party-Tools. Using this\nmethod, you do not have to compile the software by yourself.\n\n\nIt may also be interesting for developers as all dependencies for Opencast usage, testing and development are provided\nby the RPM repository.\n\n\nAvailability\n\n\nNote that it may take some time (usually about two weeks after a new release is out) before the RPMs are available.\nWatch for announcements on list or just check which versions are available in the repository.\n\n\nCurrently Supported\n\n\n\n\nCentOS 7.x (x86_64)\n\n\nRedHat Enterprise Linux 7.x (x86_64)\n\n\nScientific Linux 7.x (x86_64)\n\n\n\n\n\n\nOther architectures like i386, i686, arm, \u2026 are not supported!\n\n\n\n\nRegistration\n\n\nBefore you can start you need to get an account for the repository. You will need the credentials that you get by mail\nafter the registration to successfully complete this manual. The placeholders \n[your_username]\n and \n[your_password]\n\nare used in this manual wherever the credentials are needed.\n\n\nPlease visit https://pkg.opencast.org\n\n\nActivate Repository\n\n\nFirst you have to install the necessary repositories so that your package manager can access them:\n\n\n\n\n\n\nAdd Opencast repository:\n\n\ncd /etc/yum.repos.d\ncurl -O https://pkg.opencast.org/opencast.repo \\\n   -d os=el -d version=7 -u [YOUR_USERNAME]\n\n\n\nYou will be asked for your password.\n\n\nIt might take some time after the release of a new Opencast version before the RPMs are moved to the stable\nrepository. Until then, you can use \n.../opencast-testing.repo\n instead to get the latest version. Note that the\ntesting repository is an additional repository and still requires the stable repository to be active.\n\n\n\n\n\n\nAdd EPEL repository:\n\n\nyum install epel-release\n\n\n\n\n\n\n\nInstall Apache ActiveMQ\n\n\nThe Apache ActiveMQ message broker is required by Opencast since version 2.0. It does not necessarily have to be\ninstalled on the same machine as Opencast but would commonly for an all-in-one system. ActiveMQ is available from the\nOpencast RPM repository as well and can be installed by running:\n\n\nyum install activemq-dist\n\n\n\nA prepared configuration file for ActiveMQ can be found at \n/usr/share/opencast/docs/scripts/activemq/activemq.xml\n\n\nafter Opencast itself has been installed\n and should replace \n/etc/activemq/activemq.xml\n. For an all-in-one\ninstallation the following command should suffice:\n\n\ncp /usr/share/opencast/docs/scripts/activemq/activemq.xml /etc/activemq/activemq.xml\n\n\n\nActiveMQ should be started \nprior to\n Opencast.\n\n\nMore information about how to properly set up ActiveMQ for Opencast can be found in the \nmessage broker configuration\ndocumentation\n.\n\n\nInstall Opencast\n\n\nFor this guide, \nopencast22-*\n is used as placeholder for the package name. It will install the latest version of the\nOpencast 2.2.x branch. If you want to install another version, please change the name accordingly.\n\n\nBasic Installation\n\n\nFor a basic installation (All-In-One) just run:\n\n\nyum install opencast22-allinone\n\n\n\nThis will install the default distribution of Opencast and all its dependencies, including the 3rd-Party-Tools.\n\n\nNow you can start Opencast:\n\n\n\n\n\n\nOn a SysV-init based system\n\n\nservice opencast start\n\n\n\n\n\n\n\nOn a Systemd based system\n\n\nsystemctl start opencast.service\n\n\n\n\n\n\n\nWhile Opencast is preconfigured, it is strongly recommended to follow at least the \nBasic Configuration\nguide\n. It will help you to set your hostname, login information, \u2026\n\n\nAdvanced Installation\n\n\nWhile the basic installation will give you an all-in-one Opencast distribution which is nice for testing, you might\nwant to have more control over your system and deploy it over several machines by choosing which parts of Opencast you\nwant to install. You can list all Opencast packages with:\n\n\nyum search opencast\n\n\n\nThis will list all available Opencast distributions in the form \nopencast<version>-<dist-type>\n\n\nSome available distributions are:\n\n\n\n\nopencastXX-allinone\n\n\nopencastXX-admin\n\n\nopencastXX-presentation\n\n\nopencastXX-worker\n\n\n\n\n\u2026where \nXX\n stands for a specific Opencast version.\n\n\nInstall 3rd-party-tools\n\n\nThis step is optional and only recommended for those who want to build Opencast from source. If you install Opencast\nfrom the repository, all necessary dependencies will be installed automatically.\n\n\nYou can install all necessary 3rd-Party-Tools for Opencast like this:\n\n\nyum install ffmpeg tesseract hunspell sox\n\n\n\nUninstall Opencast\n\n\nTo uninstall Opencast, you can run:\n\n\nyum remove 'opencast*'\n\n\n\nThis will not touch your created media files or modified configuration files.  If you want to remove them as well, you\nhave to do that by yourself.\n\n\n# Remove media files\nsudo rm -rf /srv/opencast\n\n# Remove local db, search indexes and working files\nsudo rm -rf /var/lib/opencast\n\n# Remove configuration files\nsudo rm -rf /etc/opencast\n\n# Remove logs\nsudo rm -rf /var/log/opencast\n\n\n\nTroubleshooting\n\n\nMissing Dependencies\n\n\nIf you try to install Opencast but yum is complaining about missing dependencies, please check if the epel repository is\nreally activated on your system. Some distributions come with epel preinstalled but disabled. The installation of the\nepel-release package will not fix this. You can check what repositories are installed and enabled by executing \nyum\nrepolist enabled\n which should give you a list with epel, opencast and opencast-noarch in it. To enable a repository,\nedit the configuration file in \n/etc/yum.repos.d/\n.",
            "title": "RHEL/CentOS"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#install-from-repository-redhat-enterprise-linux-centos-scientific-linux",
            "text": "There is an RPM software repository available for RedHat-based Linux distributions provided by the University of\nOsnabr\u00fcck. This repository provides preconfigured Opencast installations, including all 3rd-Party-Tools. Using this\nmethod, you do not have to compile the software by yourself.  It may also be interesting for developers as all dependencies for Opencast usage, testing and development are provided\nby the RPM repository.",
            "title": "Install from Repository (RedHat Enterprise Linux, CentOS, Scientific Linux)"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#availability",
            "text": "Note that it may take some time (usually about two weeks after a new release is out) before the RPMs are available.\nWatch for announcements on list or just check which versions are available in the repository.",
            "title": "Availability"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#currently-supported",
            "text": "CentOS 7.x (x86_64)  RedHat Enterprise Linux 7.x (x86_64)  Scientific Linux 7.x (x86_64)    Other architectures like i386, i686, arm, \u2026 are not supported!",
            "title": "Currently Supported"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#registration",
            "text": "Before you can start you need to get an account for the repository. You will need the credentials that you get by mail\nafter the registration to successfully complete this manual. The placeholders  [your_username]  and  [your_password] \nare used in this manual wherever the credentials are needed.  Please visit https://pkg.opencast.org",
            "title": "Registration"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#activate-repository",
            "text": "First you have to install the necessary repositories so that your package manager can access them:    Add Opencast repository:  cd /etc/yum.repos.d\ncurl -O https://pkg.opencast.org/opencast.repo \\\n   -d os=el -d version=7 -u [YOUR_USERNAME]  You will be asked for your password.  It might take some time after the release of a new Opencast version before the RPMs are moved to the stable\nrepository. Until then, you can use  .../opencast-testing.repo  instead to get the latest version. Note that the\ntesting repository is an additional repository and still requires the stable repository to be active.    Add EPEL repository:  yum install epel-release",
            "title": "Activate Repository"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#install-apache-activemq",
            "text": "The Apache ActiveMQ message broker is required by Opencast since version 2.0. It does not necessarily have to be\ninstalled on the same machine as Opencast but would commonly for an all-in-one system. ActiveMQ is available from the\nOpencast RPM repository as well and can be installed by running:  yum install activemq-dist  A prepared configuration file for ActiveMQ can be found at  /usr/share/opencast/docs/scripts/activemq/activemq.xml  after Opencast itself has been installed  and should replace  /etc/activemq/activemq.xml . For an all-in-one\ninstallation the following command should suffice:  cp /usr/share/opencast/docs/scripts/activemq/activemq.xml /etc/activemq/activemq.xml  ActiveMQ should be started  prior to  Opencast.  More information about how to properly set up ActiveMQ for Opencast can be found in the  message broker configuration\ndocumentation .",
            "title": "Install Apache ActiveMQ"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#install-opencast",
            "text": "For this guide,  opencast22-*  is used as placeholder for the package name. It will install the latest version of the\nOpencast 2.2.x branch. If you want to install another version, please change the name accordingly.",
            "title": "Install Opencast"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#basic-installation",
            "text": "For a basic installation (All-In-One) just run:  yum install opencast22-allinone  This will install the default distribution of Opencast and all its dependencies, including the 3rd-Party-Tools.  Now you can start Opencast:    On a SysV-init based system  service opencast start    On a Systemd based system  systemctl start opencast.service    While Opencast is preconfigured, it is strongly recommended to follow at least the  Basic Configuration\nguide . It will help you to set your hostname, login information, \u2026",
            "title": "Basic Installation"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#advanced-installation",
            "text": "While the basic installation will give you an all-in-one Opencast distribution which is nice for testing, you might\nwant to have more control over your system and deploy it over several machines by choosing which parts of Opencast you\nwant to install. You can list all Opencast packages with:  yum search opencast  This will list all available Opencast distributions in the form  opencast<version>-<dist-type>  Some available distributions are:   opencastXX-allinone  opencastXX-admin  opencastXX-presentation  opencastXX-worker   \u2026where  XX  stands for a specific Opencast version.",
            "title": "Advanced Installation"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#install-3rd-party-tools",
            "text": "This step is optional and only recommended for those who want to build Opencast from source. If you install Opencast\nfrom the repository, all necessary dependencies will be installed automatically.  You can install all necessary 3rd-Party-Tools for Opencast like this:  yum install ffmpeg tesseract hunspell sox",
            "title": "Install 3rd-party-tools"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#uninstall-opencast",
            "text": "To uninstall Opencast, you can run:  yum remove 'opencast*'  This will not touch your created media files or modified configuration files.  If you want to remove them as well, you\nhave to do that by yourself.  # Remove media files\nsudo rm -rf /srv/opencast\n\n# Remove local db, search indexes and working files\nsudo rm -rf /var/lib/opencast\n\n# Remove configuration files\nsudo rm -rf /etc/opencast\n\n# Remove logs\nsudo rm -rf /var/log/opencast",
            "title": "Uninstall Opencast"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/installation/rpm-rhel-sl-centos/#missing-dependencies",
            "text": "If you try to install Opencast but yum is complaining about missing dependencies, please check if the epel repository is\nreally activated on your system. Some distributions come with epel preinstalled but disabled. The installation of the\nepel-release package will not fix this. You can check what repositories are installed and enabled by executing  yum\nrepolist enabled  which should give you a list with epel, opencast and opencast-noarch in it. To enable a repository,\nedit the configuration file in  /etc/yum.repos.d/ .",
            "title": "Missing Dependencies"
        },
        {
            "location": "/configuration/",
            "text": "Opencast Configuration Guides\n\n\nThese guides will help you to configure Opencast. If you are a first-time user, please make sure to at lease have a look\nat the \nbasic configuration guide\n.\n\n\nGeneral Configuration\n\n\n\n\nBasic Configuration\n\n\nDatabase Configuration\n\n\nEncoding Profile Configuration\n\n\nLoad Configuration\n\n\nLogging and Privacy Configuration\n\n\nMessage Broker Configuration\n\n\nMetadata Configuration\n\n\nMulti Tenancy Configuration\n\n\nSecurity Configuration\n\n\nCAS Security Configuration\n\n\nLDAP Authentication and Authorization (without CAS)\n\n\nStream Security\n\n\nAccess Control Lists\n\n\n\n\n\n\nWorkflow Configuration\n\n\nWorkflow Operation Handler\n\n\n\n\n\n\nExternal API Configuration",
            "title": "Overview"
        },
        {
            "location": "/configuration/#opencast-configuration-guides",
            "text": "These guides will help you to configure Opencast. If you are a first-time user, please make sure to at lease have a look\nat the  basic configuration guide .",
            "title": "Opencast Configuration Guides"
        },
        {
            "location": "/configuration/#general-configuration",
            "text": "Basic Configuration  Database Configuration  Encoding Profile Configuration  Load Configuration  Logging and Privacy Configuration  Message Broker Configuration  Metadata Configuration  Multi Tenancy Configuration  Security Configuration  CAS Security Configuration  LDAP Authentication and Authorization (without CAS)  Stream Security  Access Control Lists    Workflow Configuration  Workflow Operation Handler    External API Configuration",
            "title": "General Configuration"
        },
        {
            "location": "/configuration/basic/",
            "text": "Basic Configuration\n\n\nThis guide will help you to change the basic configuration settings which are required or at least strongly recommended\nfor each Opencast installation. This is basically what you should do, right after installing Opencast on your machine.\n\n\nAll settings are made to files, residing in the Opencast configuration directory. In most cases, that should be either\n\n/etc/opencast/custom.properties\n or \n/opt/opencast/etc/custom.properties\n. Edit the files, using the editor of your\nchoice, e.g.:\n\n\nvim /etc/opencast/custom.properties\n\n\n\nStep 1: Setting the Server URL\n\n\nBy default, only connections from the local machine are accepted by Opencast.  You want to change this if the system\nshould be accessible within a network.\n\n\nFirst, find the property \norg.opencastproject.server.url\n in your \ncustom.properties\n configuration file and set it to\nyour own domain name:\n\n\norg.opencastproject.server.url=http://example.com:8080\n\n\n\nNote:\n This value will be written to all generated mediapackages and thus cannot be changed easily for already\nprocessed media. At least not without an extra amount of work involving modifications to the database. That is why you\nshould think about this setting carefully.\n\n\nSecond, adjust the binding address in \ncustom.properties\n. The binding address can be set to \n0.0.0.0\n for general\nnetwork access. The property to modify is:\n\n\norg.ops4j.pax.web.listening.addresses=127.0.0.1\n\n\n\nStep 2: Setting the Login Details\n\n\nThere are two authentication methods for Opencast. HTTP Digest authentication and form-based authentication. Both\nmethods need a username and a password. Change the password for both! The important keys for this are:\n\n\n\n\norg.opencastproject.security.admin.user\n\n\nThe user for the administrative account. This is set to \nadmin\n by default.\n\n\n\n\n\n\norg.opencastproject.security.admin.pass\n\n\nThe password for the administrative account. This is set to \nopencast\n by default.\n\n\n\n\n\n\norg.opencastproject.security.digest.user\n\n\nThe user for the communication between Opencast nodes, as well as for capture agents. This is set to\n  \nopencast_system_account\n by default.\n\n\n\n\n\n\norg.opencastproject.security.digest.pass\n\n\nThe password for the communication between Opencast nodes and capture agents. This is set to \nCHANGE_ME\n by\n  default.\n\n\n\n\n\n\n\n\nNote:\n The digest credentials are also used for internal communication of Opencast servers. So these keys have to be\nset to the same value on each of you Opencast nodes (Core, Worker, Capture Agent, \u2026)\n\n\nStep 3: Change the default shutdown command\n\n\nKaraf provides a socket over wich you can send a shutdown command. The socket does not provide any kind of\nauthentication. Therefore anyone who obtains write access to this socket is able to shutdown karaf and everything\nthat runs on it. There is a default \nkaraf.shutdown.command\n defined in \ncustom.properties\n. Change this to something\nsecret.\n\n\nStep 4: Setting up Apache ActiveMQ Message Broker\n\n\nSince version 2.0, Opencast requires a running Apache ActiveMQ instance with a specific configuration.  The message\nbroker is mostly run on the admin server of Opencast but can be run separately. It needs to be started before Opencast.\nFor more details about the setup, have a look at the \nApache ActiveMQ configuration guide\n.\n\n\nStep 5: Database Configuration\n\n\nOpencast uses an integrated HSQL database by default. While you will find it perfectly functional, it has certain\ndrawbacks:\n\n\n\n\nIt is rather slow\n\n\nIt cannot be used for distributed set-ups\n\n\nUpgrading Opencast with this database is not possible\n\n\n\n\nFor testing, it is totally fine to keep the internal database, but you are highly encouraged to switch to a stand-alone\ndatabase for productional use. For more information about database configuration, have a look at the \nDatabase\nConfiguration\n section.\n\n\nStep 6: Setting the Storage Directory (optional)\n\n\nEven though it is not important for all systems \u2013 on test setups you can probably omit this \u2013 you will often want to set\nthe storage directory. This directory is used to store all media, metadata, \u2026 Often, an NFS mount is used for this. You\ncan set the directory by changing \norg.opencastproject.storage.dir\n like:\n\n\norg.opencastproject.storage.dir=/media/mhdatamount",
            "title": "Basic"
        },
        {
            "location": "/configuration/basic/#basic-configuration",
            "text": "This guide will help you to change the basic configuration settings which are required or at least strongly recommended\nfor each Opencast installation. This is basically what you should do, right after installing Opencast on your machine.  All settings are made to files, residing in the Opencast configuration directory. In most cases, that should be either /etc/opencast/custom.properties  or  /opt/opencast/etc/custom.properties . Edit the files, using the editor of your\nchoice, e.g.:  vim /etc/opencast/custom.properties",
            "title": "Basic Configuration"
        },
        {
            "location": "/configuration/basic/#step-1-setting-the-server-url",
            "text": "By default, only connections from the local machine are accepted by Opencast.  You want to change this if the system\nshould be accessible within a network.  First, find the property  org.opencastproject.server.url  in your  custom.properties  configuration file and set it to\nyour own domain name:  org.opencastproject.server.url=http://example.com:8080  Note:  This value will be written to all generated mediapackages and thus cannot be changed easily for already\nprocessed media. At least not without an extra amount of work involving modifications to the database. That is why you\nshould think about this setting carefully.  Second, adjust the binding address in  custom.properties . The binding address can be set to  0.0.0.0  for general\nnetwork access. The property to modify is:  org.ops4j.pax.web.listening.addresses=127.0.0.1",
            "title": "Step 1: Setting the Server URL"
        },
        {
            "location": "/configuration/basic/#step-2-setting-the-login-details",
            "text": "There are two authentication methods for Opencast. HTTP Digest authentication and form-based authentication. Both\nmethods need a username and a password. Change the password for both! The important keys for this are:   org.opencastproject.security.admin.user  The user for the administrative account. This is set to  admin  by default.    org.opencastproject.security.admin.pass  The password for the administrative account. This is set to  opencast  by default.    org.opencastproject.security.digest.user  The user for the communication between Opencast nodes, as well as for capture agents. This is set to\n   opencast_system_account  by default.    org.opencastproject.security.digest.pass  The password for the communication between Opencast nodes and capture agents. This is set to  CHANGE_ME  by\n  default.     Note:  The digest credentials are also used for internal communication of Opencast servers. So these keys have to be\nset to the same value on each of you Opencast nodes (Core, Worker, Capture Agent, \u2026)",
            "title": "Step 2: Setting the Login Details"
        },
        {
            "location": "/configuration/basic/#step-3-change-the-default-shutdown-command",
            "text": "Karaf provides a socket over wich you can send a shutdown command. The socket does not provide any kind of\nauthentication. Therefore anyone who obtains write access to this socket is able to shutdown karaf and everything\nthat runs on it. There is a default  karaf.shutdown.command  defined in  custom.properties . Change this to something\nsecret.",
            "title": "Step 3: Change the default shutdown command"
        },
        {
            "location": "/configuration/basic/#step-4-setting-up-apache-activemq-message-broker",
            "text": "Since version 2.0, Opencast requires a running Apache ActiveMQ instance with a specific configuration.  The message\nbroker is mostly run on the admin server of Opencast but can be run separately. It needs to be started before Opencast.\nFor more details about the setup, have a look at the  Apache ActiveMQ configuration guide .",
            "title": "Step 4: Setting up Apache ActiveMQ Message Broker"
        },
        {
            "location": "/configuration/basic/#step-5-database-configuration",
            "text": "Opencast uses an integrated HSQL database by default. While you will find it perfectly functional, it has certain\ndrawbacks:   It is rather slow  It cannot be used for distributed set-ups  Upgrading Opencast with this database is not possible   For testing, it is totally fine to keep the internal database, but you are highly encouraged to switch to a stand-alone\ndatabase for productional use. For more information about database configuration, have a look at the  Database\nConfiguration  section.",
            "title": "Step 5: Database Configuration"
        },
        {
            "location": "/configuration/basic/#step-6-setting-the-storage-directory-optional",
            "text": "Even though it is not important for all systems \u2013 on test setups you can probably omit this \u2013 you will often want to set\nthe storage directory. This directory is used to store all media, metadata, \u2026 Often, an NFS mount is used for this. You\ncan set the directory by changing  org.opencastproject.storage.dir  like:  org.opencastproject.storage.dir=/media/mhdatamount",
            "title": "Step 6: Setting the Storage Directory (optional)"
        },
        {
            "location": "/configuration/database/",
            "text": "Database Configuration\n\n\nOpencast ships with embedded JDBC drivers for the H2 (HSQL), MySQL and MariaDB databases. The built-in H2 database is\nused by default, and needs no configuration, but it is strongly recommended to use MariaDB 10.0 instead as there will be\na huge performance gain.\n\n\n\n\nNotice:\n Opencast 2.2 is not compatible with MySQL 5.7 (and probably MariaDB 10.1). \nPlease use MariaDB 10.0 or MySQL\n5.5 or 5.6.\n\n\nNotice:\n In general, it is recommended to use MariaDB 10.0 instead of MySQL 5.5, as MariaDB is fully compatible with\nMySQL 5.5 but not vice versa. MariaDB's extra features allow for robust migration scripts than with MySQL.\n\n\nNotice:\n For a distributed setup of Opencast, you cannot use the internal H2 database.\n\n\n\n\nOther databases\n\n\nRunning Opencast with PostgreSQL should be possible and there is some community support for this. While it should work,\nthe support for this is unofficial and we cannot guarantee that every new feature is well tested on that platform.\n\n\nThe EclipseLink JPA implementation which is used in Opencast supports other databases as well and it should be\npossible to attach other database engines.\n\n\nSetting up MariaDB/MySQL\n\n\nRequirements\n\n\nBefore following this guide, you should have:\n\n\n\n\nInstalled the Opencast Core System\n\n\nFollowed the \nBasic Configuration instructions\n\n\n\n\nStep 0: Set-up MariaDB/MySQL\n\n\nThis step is not Opencast-specific and may be different depending on your scenario (e.g. if you want to have a dedicated\ndatabase server). It shall only be a guide for people with no experience setting up MariaDB/MySQL to help them get the\ndatabase running.\n\n\n\n\nNotice:\n If your distribution includes MySQL instead of MariaDB, the installation should still be very much the\nsame.\n\n\n\n\nFirst you have to install the MariaDB server. Usually you would do that by using the package management tool of you\ndistribution. On RedHat-based systems (CentOS, Scientific Linux, etc.) this should be:\n\n\nyum install mariadb mariadb-server\n\n\n\nAfter the installation, you can start the server and set it up to start automatically after each reboot with the\nfollowing commands:\n\n\n# If you are using Systemd\nsystemctl start mariadb.service\nsystemctl enable mariadb.service\n# If you are using SysV-Init\nservice mariadb start\nchkconfig --level 345 mariadb on\n\n\n\nNow you have a MariaDB server running, but without a properly configured root account (no password, etc.) which might \npose a security risk. MariaDB includes a useful tool to secure your database server (it is also included in MySQL).\nYou can launch this tool by executing (yes, it is still called mysql_\u2026):\n\n\nmysql_secure_installation\n\n\n\nIt will guide you through the steps of setting up a root account with password, etc.\n\n\nStep 1: Create an Opencast Database\n\n\nThe first step, if you have not already done this, is obviously to create a database for Opencast. You can use the\nfollowing SQL code to to that. For executing the SQL, use the MariaDB/MySQL client (run the mysql program from your\nshell) or use a graphical tool like phpMyAdmin. For now, we will use the MySQL shell client and the default\nadministrative (root) user. Launch the client with:\n\n\nmysql -u root -p\n\n\n\nYou will be asked for the password of the user root. After entering it, you will end up in the MariaDB/MySQL shell.\nNext, create a database called \nopencast\n by executing:\n\n\nCREATE DATABASE opencast CHARACTER SET utf8 COLLATE utf8_general_ci;\n\n\n\nThen create a user \nopencast\n with the password \nopencast_password\n and grant him all necessary rights:\n\n\nGRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX ON opencast.*\n  TO 'opencast'@'localhost' IDENTIFIED BY 'opencast_password';\n\n\n\n\n\nNotice:\n You can choose another name for the user and database and we strongly recommend that you use a different\npassword.\n\n\n\n\nIn a distributed system, apart from \n'username'@'localhost'\n (which would allow access from the local machine only),\nyou should grant a external user access to the database by running the same command for a user like\n\n'username'@'10.0.1.%'\n, where the \n10.0.1.%\n specifies the IP range allowed to access the server with \n%\n being a\nwildcard for \"anything\". For more details on MariaDB/MySQL user creation have a look at any of the following links:\n\n\n\n\nMariaDB Reference Manual :: \nGRANT\n statement\n\n\nMySQL Reference Manual :: Adding User Accounts\n.\n\n\n\n\nFinally, leave the MariaDB/MySQL client shell and restart the database server to enable the new user(s) with:\n\n\nservice mysqld restart\n\n\n\nor, if you have a systemd based system:\n\n\nsystemctl restart mariadb.service\n\n\n\nStep 2: Set up the Database Structure\n\n\nTo set up the database structure you can (and should!) use the Opencast ddl scripts. You can find them in the \ninstallation document folder \n.../docs/scripts/ddl/mysql5.sql\n. You can also download the script from BitBucket.\n\n\nTo import the database structure using the MariaDB/MySQL client, switch to the directory that contains the \nmysql5.sql\n \nfile and run the MariaDB/MySQL client with the user you created in the previous step (\n-u opencast\n) and switch to \nthe database you want to use (\nopencast\n):\n\n\nmysql -u opencast -p opencast\n\n\n\nRun the ddl script:\n\n\nmysql> source mysql5.sql;\n\n\n\nAlternatively, you can import the script directly from the command line:\n\n\nmysql -u opencast -p opencast < .../docs/scripts/ddl/mysql5.sql\n\n\n\nInstead of using the MariaDB/MySQL Client, you can also use other methods for executing SQL code like phpMyAdmin or \nMySQL-Workbench.\n\n\nStep 3: Configure Opencast\n\n\nThe following changes must be made in the \n.../etc/custom.properties\n file (\n/etc/opencast/custom.properties\n in an RPM\ninstallation).\n\n\n\n\n\n\nUse the editor of your choice to open the file, e.g.:\n\n\nvim etc/opencast/custom.properties\n\n\n\n\n\n\n\nChange the following configuration key (uncomment if necessary):\n\n\norg.opencastproject.db.ddl.generation=false\n\n\n\nIf set to true, the database structure will be generated automatically. It works, but without all the database\noptimizations implemented in the DDL scripts used in the step 2. While convenient for development, you should never\nset this to \ntrue\n in a production environment.\n\n\n\n\n\n\nConfigure Opencast to use MariaDB/MySQL:\n\n\norg.opencastproject.db.vendor=MySQL\n\n\n\n\n\n\n\nConfigure Opencast to use the JDBC driver for MariaDB/MySQL:\n\n\norg.opencastproject.db.jdbc.driver=com.mysql.jdbc.Driver\n\n\n\n\n\n\n\nConfigure the host where Opencast should find the database (\nlocalhost\n) and the database name (\nopencast\n). Adjust\nthe names in this example to match your configuration:\n\n\norg.opencastproject.db.jdbc.url=jdbc:mysql://localhost/opencast\n\n\n\n\n\n\n\nConfigure the username and password which Opencast should use to access the database:\n\n\norg.opencastproject.db.jdbc.user=opencast\norg.opencastproject.db.jdbc.pass=opencast_password\n\n\n\nNotice:\n The user specified here must have the necessary rights to the database, as explained in the Step 1.",
            "title": "Database"
        },
        {
            "location": "/configuration/database/#database-configuration",
            "text": "Opencast ships with embedded JDBC drivers for the H2 (HSQL), MySQL and MariaDB databases. The built-in H2 database is\nused by default, and needs no configuration, but it is strongly recommended to use MariaDB 10.0 instead as there will be\na huge performance gain.   Notice:  Opencast 2.2 is not compatible with MySQL 5.7 (and probably MariaDB 10.1).  Please use MariaDB 10.0 or MySQL\n5.5 or 5.6.  Notice:  In general, it is recommended to use MariaDB 10.0 instead of MySQL 5.5, as MariaDB is fully compatible with\nMySQL 5.5 but not vice versa. MariaDB's extra features allow for robust migration scripts than with MySQL.  Notice:  For a distributed setup of Opencast, you cannot use the internal H2 database.",
            "title": "Database Configuration"
        },
        {
            "location": "/configuration/database/#other-databases",
            "text": "Running Opencast with PostgreSQL should be possible and there is some community support for this. While it should work,\nthe support for this is unofficial and we cannot guarantee that every new feature is well tested on that platform.  The EclipseLink JPA implementation which is used in Opencast supports other databases as well and it should be\npossible to attach other database engines.",
            "title": "Other databases"
        },
        {
            "location": "/configuration/database/#setting-up-mariadbmysql",
            "text": "",
            "title": "Setting up MariaDB/MySQL"
        },
        {
            "location": "/configuration/database/#requirements",
            "text": "Before following this guide, you should have:   Installed the Opencast Core System  Followed the  Basic Configuration instructions",
            "title": "Requirements"
        },
        {
            "location": "/configuration/database/#step-0-set-up-mariadbmysql",
            "text": "This step is not Opencast-specific and may be different depending on your scenario (e.g. if you want to have a dedicated\ndatabase server). It shall only be a guide for people with no experience setting up MariaDB/MySQL to help them get the\ndatabase running.   Notice:  If your distribution includes MySQL instead of MariaDB, the installation should still be very much the\nsame.   First you have to install the MariaDB server. Usually you would do that by using the package management tool of you\ndistribution. On RedHat-based systems (CentOS, Scientific Linux, etc.) this should be:  yum install mariadb mariadb-server  After the installation, you can start the server and set it up to start automatically after each reboot with the\nfollowing commands:  # If you are using Systemd\nsystemctl start mariadb.service\nsystemctl enable mariadb.service\n# If you are using SysV-Init\nservice mariadb start\nchkconfig --level 345 mariadb on  Now you have a MariaDB server running, but without a properly configured root account (no password, etc.) which might \npose a security risk. MariaDB includes a useful tool to secure your database server (it is also included in MySQL).\nYou can launch this tool by executing (yes, it is still called mysql_\u2026):  mysql_secure_installation  It will guide you through the steps of setting up a root account with password, etc.",
            "title": "Step 0: Set-up MariaDB/MySQL"
        },
        {
            "location": "/configuration/database/#step-1-create-an-opencast-database",
            "text": "The first step, if you have not already done this, is obviously to create a database for Opencast. You can use the\nfollowing SQL code to to that. For executing the SQL, use the MariaDB/MySQL client (run the mysql program from your\nshell) or use a graphical tool like phpMyAdmin. For now, we will use the MySQL shell client and the default\nadministrative (root) user. Launch the client with:  mysql -u root -p  You will be asked for the password of the user root. After entering it, you will end up in the MariaDB/MySQL shell.\nNext, create a database called  opencast  by executing:  CREATE DATABASE opencast CHARACTER SET utf8 COLLATE utf8_general_ci;  Then create a user  opencast  with the password  opencast_password  and grant him all necessary rights:  GRANT SELECT,INSERT,UPDATE,DELETE,CREATE,DROP,INDEX ON opencast.*\n  TO 'opencast'@'localhost' IDENTIFIED BY 'opencast_password';   Notice:  You can choose another name for the user and database and we strongly recommend that you use a different\npassword.   In a distributed system, apart from  'username'@'localhost'  (which would allow access from the local machine only),\nyou should grant a external user access to the database by running the same command for a user like 'username'@'10.0.1.%' , where the  10.0.1.%  specifies the IP range allowed to access the server with  %  being a\nwildcard for \"anything\". For more details on MariaDB/MySQL user creation have a look at any of the following links:   MariaDB Reference Manual ::  GRANT  statement  MySQL Reference Manual :: Adding User Accounts .   Finally, leave the MariaDB/MySQL client shell and restart the database server to enable the new user(s) with:  service mysqld restart  or, if you have a systemd based system:  systemctl restart mariadb.service",
            "title": "Step 1: Create an Opencast Database"
        },
        {
            "location": "/configuration/database/#step-2-set-up-the-database-structure",
            "text": "To set up the database structure you can (and should!) use the Opencast ddl scripts. You can find them in the \ninstallation document folder  .../docs/scripts/ddl/mysql5.sql . You can also download the script from BitBucket.  To import the database structure using the MariaDB/MySQL client, switch to the directory that contains the  mysql5.sql  \nfile and run the MariaDB/MySQL client with the user you created in the previous step ( -u opencast ) and switch to \nthe database you want to use ( opencast ):  mysql -u opencast -p opencast  Run the ddl script:  mysql> source mysql5.sql;  Alternatively, you can import the script directly from the command line:  mysql -u opencast -p opencast < .../docs/scripts/ddl/mysql5.sql  Instead of using the MariaDB/MySQL Client, you can also use other methods for executing SQL code like phpMyAdmin or \nMySQL-Workbench.",
            "title": "Step 2: Set up the Database Structure"
        },
        {
            "location": "/configuration/database/#step-3-configure-opencast",
            "text": "The following changes must be made in the  .../etc/custom.properties  file ( /etc/opencast/custom.properties  in an RPM\ninstallation).    Use the editor of your choice to open the file, e.g.:  vim etc/opencast/custom.properties    Change the following configuration key (uncomment if necessary):  org.opencastproject.db.ddl.generation=false  If set to true, the database structure will be generated automatically. It works, but without all the database\noptimizations implemented in the DDL scripts used in the step 2. While convenient for development, you should never\nset this to  true  in a production environment.    Configure Opencast to use MariaDB/MySQL:  org.opencastproject.db.vendor=MySQL    Configure Opencast to use the JDBC driver for MariaDB/MySQL:  org.opencastproject.db.jdbc.driver=com.mysql.jdbc.Driver    Configure the host where Opencast should find the database ( localhost ) and the database name ( opencast ). Adjust\nthe names in this example to match your configuration:  org.opencastproject.db.jdbc.url=jdbc:mysql://localhost/opencast    Configure the username and password which Opencast should use to access the database:  org.opencastproject.db.jdbc.user=opencast\norg.opencastproject.db.jdbc.pass=opencast_password  Notice:  The user specified here must have the necessary rights to the database, as explained in the Step 1.",
            "title": "Step 3: Configure Opencast"
        },
        {
            "location": "/configuration/message-broker/",
            "text": "Message Broker Configuration\n\n\nSince version 2, Opencast requires an Apache ActiveMQ message broker as message relay for the administrative user\ninterface. ActiveMQ can either be set up to run on its own machine or on one of the existing Opencast nodes (usually the\nadmin node).\n\n\nRequired Version\n\n\n\n\nActiveMQ 5.10 or above\n\n\n\n\nInstallation\n\n\n\n\nIf you use the Opencast RPM repository, simply install the \nactivemq-dist\n package.\n\n\nIf you are running RHEL, CentOS or Fedora you can use the \nActiveMQ-dist Copr RPM repository\n   \n\n\nNewer Debian based operating systems contain a sufficient new version.\n\n\nYou can download binary distributions from the \nApache ActiveMQ website\n\n\n\n\nConfiguration\n\n\nWhat you need to do:\n\n\n\n\nSet-up required message queues for Opencast\n\n\nPoint all your Opencast nodes to your message broker.\n\n\nConfigure authentication and access control\n\n\n\n\nThe first task is easy. Opencast comes with a ActiveMQ configuration file, located at\n\ndocs/scripts/activemq/activemq.xml\n (RPM repo: \n/usr/share/opencast/docs/scripts/activemq/activemq.xml\n). This file\nwill give you a basic configuration with all queues set-up and accepting connections from all hosts over TCP port\n\n61616\n.\n\n\nReplacing the default ActiveMQ configuration with this file will already give you a fully functional ActiveMQ set-up for\nan all-in-one server. You will find the configuration in the usually locations, e.g. \n/etc/activemq/\n. On Debian you\nfirst need to activate or create a new ActiveMQ instance. For more details on that see\n\n/usr/share/doc/activemq/README.Debian\n.\n\n\nNote that the default configuration needs to be adjusted for distributed set-ups since:\n\n\n\n\nActiveMQ listens to localhost only (\nactivemq.xml\n)\n\n\nOpencast tries to connect to ActiveMQ locally (\ncustom.properties\n)\n\n\nNo password is set (\nactivemq.xml\n, \ncustom.properties\n)\n\n\n\n\nConnection\n\n\nThe ActiveMQ connection is configured in the \ncustom.properties\n. The default configuration points to a local\ninstallation of ActiveMQ. You can easily configure this to point somewhere else:\n\n\nactivemq.broker.url = failover://tcp://example.opencast.org:61616\n\n\n\nBind Host\n\n\nThe default configuration tells ActiveMQ to listen to \n127.0.0.1\n only. On a distributed system, you want to set this to\n\n0.0.0.0\n to listen to all hosts by changing the \ntransportConnector\n:\n\n\n<transportConnector name=\"openwire\" uri=\"tcp://127.0.0.1:61616?...\"/>\n\n\n\nUsername and Password\n\n\nActiveMQ can secure its message queues by requiring login credentials. This section will go through the steps of setting\nup a username and a password. Have a look at the \nActiveMQ security site\n for\ndetails about using alternative authentication and authorization providers.\n\n\nCreate ActiveMQ Admin User\n\n\nFirst, you need to create a new user that will have access to the queues. This is configured in the \nusers.properties\n\nconfiguration file in the configuration directory for ActiveMQ. It is a list of the format \nusername = password\n so, for\nexample, we could create a new admin user with the following file contents:\n\n\nadmin=password\n\n\n\nCreate ActiveMQ Admin Group\n\n\nThe next step is to provide a group that will have our user in it and will secure access to the message queues. This is\nconfigured in the file \ngroups.properties\n in the configuration directory for ActiveMQ. It is a list of the format\n\ngroup = user1,user2,\u2026\n. For example:\n\n\ngroups=user1,user2,user3\n\n\n\nTo set-up our new user to be a part of the admins group:\n\n\nadmins=admin\n\n\n\nConfigure Users and Groups Configuration Files\n\n\nNext, we need to make sure that ActiveMQ is using our \nusers.properties\n and \ngroups.properties\n files to authenticate\nand authorize users. The \nlogin.config\n file should be in the ActiveMQ configuration directory and contain:\n\n\nactivemq {\n    org.apache.activemq.jaas.PropertiesLoginModule required\n    org.apache.activemq.jaas.properties.user=\"users.properties\"\n    org.apache.activemq.jaas.properties.group=\"groups.properties\";\n};\n\n\n\nConfigure Message Broker Security\n\n\nThe final step to secure the ActiveMQ queues is to limit access to a specific group. This can be done by editing\n\nactivemq.xml\n in the ActiveMQ configuration directory. In this file, we need to add some XML in between these tags:\n\n\n<broker></broker>\n\n\n\nWe will add the following plugin configuration:\n\n\n<plugins>\n  <jaasAuthenticationPlugin configuration=\"activemq\" />\n  <authorizationPlugin>\n    <map>\n      <authorizationMap>\n        <authorizationEntries>\n          <authorizationEntry queue=\">\" read=\"admins\" write=\"admins\" admin=\"admins\" />\n          <authorizationEntry topic=\">\" read=\"admins\" write=\"admins\" admin=\"admins\" />\n          <authorizationEntry topic=\"ActiveMQ.Advisory.>\" read=\"admins\" write=\"admins\" admin=\"admins\"/>\n        </authorizationEntries>\n      </authorizationMap>\n    </map>\n  </authorizationPlugin>\n</plugins>\n\n\n\n\n\n\n\nThe \njaasAuthenticationPlugin\n configures the broker to use our \nlogin.config\n file for the authentication.\n\n\n<jaasAuthenticationPlugin configuration=\"activemq\" />\n\n\n\n\n\n\n\nThe property:\n\n\nconfiguration=activemq\n\n\n\n\n\n\n\nneeds to match the name given for surrounding object in \nlogin.config\n i.e. activemq{};\n\n\n\n\nThe \nauthorizationEntry\n restricts read, write and admin access for queues and topics to members of the group admins.\n\n\n\n\nConfigure Opencast to Connect with Username and Password to Message Broker\n\n\nNow that we have secured the queues, Opencast will complain that it is unable to connect, using the current username and\npassword. The username and password used above need to be added to the \ncustom.properties\n file of Opencast.  There are\ntwo properties to set:\n\n\nactivemq.broker.username=admin\nactivemq.broker.password=password\n\n\n\nFirewall\n\n\nDo not forget that ActiveMQ uses the TCP port 61616 (default configuration) for communication. You probably want to\nallow communication over this port in your firewall on a distributed setup or explicitly forbid public access on an\nall-in-one installation.",
            "title": "Message Broker"
        },
        {
            "location": "/configuration/message-broker/#message-broker-configuration",
            "text": "Since version 2, Opencast requires an Apache ActiveMQ message broker as message relay for the administrative user\ninterface. ActiveMQ can either be set up to run on its own machine or on one of the existing Opencast nodes (usually the\nadmin node).",
            "title": "Message Broker Configuration"
        },
        {
            "location": "/configuration/message-broker/#required-version",
            "text": "ActiveMQ 5.10 or above",
            "title": "Required Version"
        },
        {
            "location": "/configuration/message-broker/#installation",
            "text": "If you use the Opencast RPM repository, simply install the  activemq-dist  package.  If you are running RHEL, CentOS or Fedora you can use the  ActiveMQ-dist Copr RPM repository\n     Newer Debian based operating systems contain a sufficient new version.  You can download binary distributions from the  Apache ActiveMQ website",
            "title": "Installation"
        },
        {
            "location": "/configuration/message-broker/#configuration",
            "text": "What you need to do:   Set-up required message queues for Opencast  Point all your Opencast nodes to your message broker.  Configure authentication and access control   The first task is easy. Opencast comes with a ActiveMQ configuration file, located at docs/scripts/activemq/activemq.xml  (RPM repo:  /usr/share/opencast/docs/scripts/activemq/activemq.xml ). This file\nwill give you a basic configuration with all queues set-up and accepting connections from all hosts over TCP port 61616 .  Replacing the default ActiveMQ configuration with this file will already give you a fully functional ActiveMQ set-up for\nan all-in-one server. You will find the configuration in the usually locations, e.g.  /etc/activemq/ . On Debian you\nfirst need to activate or create a new ActiveMQ instance. For more details on that see /usr/share/doc/activemq/README.Debian .  Note that the default configuration needs to be adjusted for distributed set-ups since:   ActiveMQ listens to localhost only ( activemq.xml )  Opencast tries to connect to ActiveMQ locally ( custom.properties )  No password is set ( activemq.xml ,  custom.properties )",
            "title": "Configuration"
        },
        {
            "location": "/configuration/message-broker/#connection",
            "text": "The ActiveMQ connection is configured in the  custom.properties . The default configuration points to a local\ninstallation of ActiveMQ. You can easily configure this to point somewhere else:  activemq.broker.url = failover://tcp://example.opencast.org:61616",
            "title": "Connection"
        },
        {
            "location": "/configuration/message-broker/#bind-host",
            "text": "The default configuration tells ActiveMQ to listen to  127.0.0.1  only. On a distributed system, you want to set this to 0.0.0.0  to listen to all hosts by changing the  transportConnector :  <transportConnector name=\"openwire\" uri=\"tcp://127.0.0.1:61616?...\"/>",
            "title": "Bind Host"
        },
        {
            "location": "/configuration/message-broker/#username-and-password",
            "text": "ActiveMQ can secure its message queues by requiring login credentials. This section will go through the steps of setting\nup a username and a password. Have a look at the  ActiveMQ security site  for\ndetails about using alternative authentication and authorization providers.",
            "title": "Username and Password"
        },
        {
            "location": "/configuration/message-broker/#create-activemq-admin-user",
            "text": "First, you need to create a new user that will have access to the queues. This is configured in the  users.properties \nconfiguration file in the configuration directory for ActiveMQ. It is a list of the format  username = password  so, for\nexample, we could create a new admin user with the following file contents:  admin=password",
            "title": "Create ActiveMQ Admin User"
        },
        {
            "location": "/configuration/message-broker/#create-activemq-admin-group",
            "text": "The next step is to provide a group that will have our user in it and will secure access to the message queues. This is\nconfigured in the file  groups.properties  in the configuration directory for ActiveMQ. It is a list of the format group = user1,user2,\u2026 . For example:  groups=user1,user2,user3  To set-up our new user to be a part of the admins group:  admins=admin",
            "title": "Create ActiveMQ Admin Group"
        },
        {
            "location": "/configuration/message-broker/#configure-users-and-groups-configuration-files",
            "text": "Next, we need to make sure that ActiveMQ is using our  users.properties  and  groups.properties  files to authenticate\nand authorize users. The  login.config  file should be in the ActiveMQ configuration directory and contain:  activemq {\n    org.apache.activemq.jaas.PropertiesLoginModule required\n    org.apache.activemq.jaas.properties.user=\"users.properties\"\n    org.apache.activemq.jaas.properties.group=\"groups.properties\";\n};",
            "title": "Configure Users and Groups Configuration Files"
        },
        {
            "location": "/configuration/message-broker/#configure-message-broker-security",
            "text": "The final step to secure the ActiveMQ queues is to limit access to a specific group. This can be done by editing activemq.xml  in the ActiveMQ configuration directory. In this file, we need to add some XML in between these tags:  <broker></broker>  We will add the following plugin configuration:  <plugins>\n  <jaasAuthenticationPlugin configuration=\"activemq\" />\n  <authorizationPlugin>\n    <map>\n      <authorizationMap>\n        <authorizationEntries>\n          <authorizationEntry queue=\">\" read=\"admins\" write=\"admins\" admin=\"admins\" />\n          <authorizationEntry topic=\">\" read=\"admins\" write=\"admins\" admin=\"admins\" />\n          <authorizationEntry topic=\"ActiveMQ.Advisory.>\" read=\"admins\" write=\"admins\" admin=\"admins\"/>\n        </authorizationEntries>\n      </authorizationMap>\n    </map>\n  </authorizationPlugin>\n</plugins>    The  jaasAuthenticationPlugin  configures the broker to use our  login.config  file for the authentication.  <jaasAuthenticationPlugin configuration=\"activemq\" />    The property:  configuration=activemq    needs to match the name given for surrounding object in  login.config  i.e. activemq{};   The  authorizationEntry  restricts read, write and admin access for queues and topics to members of the group admins.",
            "title": "Configure Message Broker Security"
        },
        {
            "location": "/configuration/message-broker/#configure-opencast-to-connect-with-username-and-password-to-message-broker",
            "text": "Now that we have secured the queues, Opencast will complain that it is unable to connect, using the current username and\npassword. The username and password used above need to be added to the  custom.properties  file of Opencast.  There are\ntwo properties to set:  activemq.broker.username=admin\nactivemq.broker.password=password",
            "title": "Configure Opencast to Connect with Username and Password to Message Broker"
        },
        {
            "location": "/configuration/message-broker/#firewall",
            "text": "Do not forget that ActiveMQ uses the TCP port 61616 (default configuration) for communication. You probably want to\nallow communication over this port in your firewall on a distributed setup or explicitly forbid public access on an\nall-in-one installation.",
            "title": "Firewall"
        },
        {
            "location": "/configuration/metadata/",
            "text": "Overview\n\n\nIn Opencast, metadata is stored in so-called metadata catalogs. For each event or series, an arbiraty number of\nsuch configurable metadata catalog can be managed. A common set of metadata has been standarized to form a\ncommon basis (standard metadata), whereas administrators can configure Opencast to support other metadata sets\n(extended metadata).\n\n\nThis document provides an overview over Opencast's metadata capabilities and its configuration.\n\n\nStandard Metadata\n\n\nFor both events and series, a common set of metadata is supported by Opencast out-of-the box. Since metadata catalogs\nare referenced from within media package, flavors can be used to identify a specific metadata catalog. The following \nflavors are treated by Opencast as standard metadata in means of Opencast expects them to be present:\n\n\n\n\ndublincore/episode\n holds the standard metadata of an event\n\n\ndublincore/series\n holds the standard metadata of a series\n\n\n\n\nOpencast assumes specific metadata fields to be present in the standard metadata in means of defining hard-coded\nfilters, table columns and search indices.\n\n\nTo adjust the standard metadata to your specific needs, you can configure them in \n/opt/opencast/etc/org.opencastproject.ui.metadata.CatalogUIAdapterFactory-episode-common.cfg\n and \n/opt/opencast/etc/org.opencastproject.ui.metadata.CatalogUIAdapterFactory-series-common.cfg\n.\n\n\nFor details on how to configure metadata catalogs, see section Configuring Metadata Catalogs.\n\n\nAs mentioned above, however, Opencast expects specific metafields to be present to work correctly. In case you want\nto map metadata specific to your use case, you might consider to use the extended metadata capbilities of Opencast\ndescribed in the next section.\n\n\nExtended Metadata\n\n\nFor both events and series, Opencast support an arbitrary number of customized metadata catalogs. \n\n\nTo add extended metadata catalogs, create a configuration file with a valid filename of the form \norg.opencastproject.ui.metadata.CatalogUIAdapterFactory-<name>.cfg\n in \n/opt/opencast/etc.\n on the admin node.\n\n\nFor details on how to configure metadata catalogs, see section Configuring Metadata Catalogs.\n\n\nLimitations:\n\n\n\n\nCannot be sorted, searched or filtered\n\n\nNo support for scheduled events\n\n\nCannot be displayed in tables\n\n\n\n\nMetadata Catalog Configuration\n\n\nThe metadata configuration file format can be logically split up into different parts:\n\n\nPart 1: General catalog information\n\n\n\n\n\n\n\n\nConfiguration key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n\n\nevents\n\n\nTwo different types of catalog UI adapters may be configured, such for events and others for series.\n\n\n\n\n\n\norganization\n\n\nmh_default_org\n\n\nA custom catalog definition is mapped 1:1 to an organization and is available to this one organization only.\n\n\n\n\n\n\nflavor\n\n\nmycompany/episode\n\n\nThe catalog must be of a certain flavor. For a events catalog, the flavor consists of the form type/subtype whereas for series you only need to define the subtype. Attention: For series catalogs, the type (the part before the slash '/') is used as element type.\n\n\n\n\n\n\ntitle\n\n\nMy Personal Catalog Name\n\n\nThis is the title that is displayed in the UI. It should be something that is readable by humans.\n\n\n\n\n\n\n\n\nPart 2: XML serialization information\n\n\nThe only supported serialization of catalogs is currently the XML file format. The file follows the recommendation of the Dublin Core Metadata Initiative.\n\n\n\n\n\n\n\n\nConfiguration key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxml.rootElement.name\n\n\nmycatalog\n\n\nThe name of the XML root element\n\n\n\n\n\n\nxml.rootElement.namespace.URI\n\n\nhttp://myorg.com/metadata/catalog\n\n\nThe URI of the XML namespace of the root element\n\n\n\n\n\n\n\n\nNamespace bindings\n\n\nTo properly serialize to XML each prefix has to be bound to an XML namespace. Multiple namespace bindings can be configured, each identified by its unique name.\n\n\n\n\n\n\n\n\nConfiguration key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nxml.namespaceBinding.{name}.URI\n\n\nhttp://myorg.com/metadata/terms\n\n\nThe URI of the XML namespace\n\n\n\n\n\n\nxml.namespaceBinding.{name}.prefix\n\n\nmyterms\n\n\nThe prefix used to identify elements of the namespace\n\n\n\n\n\n\n\n\nPart 3: Catalog fields configuration\n\n\n{field-id}\n must be a unique identifier for each property for a given catalog and can be the same as the input or output id to make it easy to find.\n\n\n\n\n\n\n\n\nConfiguration key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nproperty.{field-id}.inputID*\n\n\ntitle\n\n\nThe id used to identify this property in the catalog e.g. The name of the property inside the xml file of a Dublin Core catalog. If an outputID is not specified then this inputID is used for both the catalog and the front end id. This value is mandatory.\n\n\n\n\n\n\nproperty.{field-id}.outputID\n\n\ntitle\n\n\nThe id used inside the json for this property. If this value is missing then the inputID will be used instead.\n\n\n\n\n\n\nproperty.{field-id}.namespace\n\n\nhttp://purl.org/dc/terms/\n\n\nThe URL that represents the namespace for this property. Different properties in the same catalog can have different namespaces.\n\n\n\n\n\n\nproperty.{field-id}.label\n\n\n\"EVENTS.EVENTS.DETAILS.METADATA.TITLE\" or \"Event Title\"\n\n\nThe label to show for this property in the UI. If there is a i18n support for a label that should be the value used so that it will be translated, if you don't mind it being locked to one translation just put that single value in.\n\n\n\n\n\n\nproperty.{field-id}.type\n\n\ntext\n\n\nThe type of the metadata field.\n\n\n\n\n\n\nproperty.{field-id}.pattern\n\n\nyyyy-MM-dd\n\n\nApplies to date and time types for now. It is used to format their values using the java DateTimeFormatter values**\n\n\n\n\n\n\nproperty.{field-id}.readOnly\n\n\nfalse\n\n\nIf the property can be edited in the UI or if it should only be displayed.\n\n\n\n\n\n\nproperty.{field-id}.required\n\n\ntrue\n\n\nIf the property has to have a value before the metadata can be saved (the UI's save button will be disabled until all of the required fields are entered)\n\n\n\n\n\n\nproperty.{field-id}.collectionID\n\n\nUSERS\n\n\nThe id of the list provider that will be used to validate the input in the backend. So for example entering a username that doesn't exist will throw an error in this case.\n\n\n\n\n\n\nproperty.{field-id}.listprovider\n\n\nUSERS\n\n\nThe id of the list provider that will be used as a drop down option for that field. So for example using the USERS list provider means that in the front end the user will be able to choose the field value from the list of users in Opencast.\n\n\n\n\n\n\nproperty.{field-id}.order\n\n\n3\n\n\nDefines the order of properties where this property should be oriented in the UI i.e. 0 means the property should come first, 1 means it should come second etc. Giving two properties the same number will cause them to be next to one another but doesn't guarantee one above or below the other.\n\n\n\n\n\n\n\n\n* Mandatory field attribute\n\n\n** See https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html\n\n\nField types\n\n\n\n\n\n\n\n\nType\n\n\nDescription\n\n\nExample value in catalog\n\n\nExample value in UI\n\n\nJSON response example\n\n\n\n\n\n\n\n\n\n\nboolean\n\n\nRepresents a true / false value in the UI that is represented by a check box.\n\n\nfalse\n\n\nfalse\n\n\n\n\n\n\n\n\ndate\n\n\nA Java Date object that can include the year, month, day, hour, minute second ... and is formatted by the pattern value.\n\n\n2014-12-10T16:29:43Z\n\n\n2014-12-10\n\n\n\n\n\n\n\n\ntext\n\n\nA text input value for entering in one line of text. It supports more, it just won't increase in size for the interface.\n\n\nThis is the Title\n\n\nThis is the Title\n\n\n\n\n\n\n\n\ntext_long\n\n\nA textarea which allows for more than 1 row of text\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n\n\nLorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.\n\n\n{\n\"id\": \"notesEpisode\",\n\"readOnly\": false,\n\"value\": \"\",\n\"label\": \"Notes\",\n\"required\": false,\n\"type\":\"text_long\"\n}\n\n\n\n\n\n\niterable_text\n\n\nA text input value for entering in a list of text objects that are comma separated in the front end but stored separately in the catalog.\n\n\nAdam,Basil,Lukas\n\n\nvalue : [\"Adam\",\"Basil\",\"Lukas\"]\n\n\n{\n\"id\": \"contributor\",\n \"readOnly\": true,\n\"value\": [\"Adam\", \"Basil\", \"Lukas\"],\n\"label\": \"Contributor(s)\",\n\"required\": false,\n\"type\": \"text\"\n}\n\n\n\n\n\n\nstart_date\n\n\nThe start date portion of a Dublin Core Catalog Period.\n\n\nstart=2014-11-04T19:00:00Z; end=2014-11-05T20:00:00Z; scheme=W3C-DTF;\n\n\n2014-11-04\n\n\n\n\n\n\n\n\nstart_time\n\n\nThe start time portion of a Dublin Core Catalog Period.\n\n\nstart=2014-11-04T19:00:00Z; end=2014-11-05T20:00:00Z; scheme=W3C-DTF;\n\n\n19:00:00\n\n\n\n\n\n\n\n\nduration\n\n\nThe duration of the event portion of a Dublin Core Catalog Period.\n\n\nstart=2014-11-04T19:00:00Z; end=2014-11-05T20:00:00Z; scheme=W3C-DTF;\n\n\n01:00:00\n\n\n\n\n\n\n\n\n\n\nWorkflow Configuration\n\n\nSince the extended metadata don't have the \ndublincore/*\n flavor, a tagging operation for the archive has to be added\nfor the extended catalogs. \nIn our examples below, we use ext/episode as a flavor, so the following operation should be added to the workflows\n\n\n<!-- Tag the extended metadata catalogs for publishing -->\n<operation\n    id=\"tag\"\n    description=\"Tagging extended metadata catalogs for archival and/or publication\">\n    <configurations>\n        <configuration key=\"source-flavors\">ext/*</configuration>\n        <configuration key=\"target-tags\">+archive</configuration>\n    </configurations>\n</operation>\n\n\n\nIf you want the extended metadata to be published the same way as the standard metadata, you can update the existing tagging operation for dublincore metadata the following way\n\n\n<!-- Tag the incoming metadata catalogs for publishing -->\n<operation\n  id=\"tag\"\n  description=\"Tagging metadata catalogs for archival and publication\">\n  <configurations>\n    <configuration key=\"source-flavors\">dublincore/*,ext/*</configuration>\n    <configuration key=\"target-tags\">+archive,+engage-download</configuration>\n  </configurations>\n</operation>",
            "title": "Metadata"
        },
        {
            "location": "/configuration/metadata/#overview",
            "text": "In Opencast, metadata is stored in so-called metadata catalogs. For each event or series, an arbiraty number of\nsuch configurable metadata catalog can be managed. A common set of metadata has been standarized to form a\ncommon basis (standard metadata), whereas administrators can configure Opencast to support other metadata sets\n(extended metadata).  This document provides an overview over Opencast's metadata capabilities and its configuration.",
            "title": "Overview"
        },
        {
            "location": "/configuration/metadata/#standard-metadata",
            "text": "For both events and series, a common set of metadata is supported by Opencast out-of-the box. Since metadata catalogs\nare referenced from within media package, flavors can be used to identify a specific metadata catalog. The following \nflavors are treated by Opencast as standard metadata in means of Opencast expects them to be present:   dublincore/episode  holds the standard metadata of an event  dublincore/series  holds the standard metadata of a series   Opencast assumes specific metadata fields to be present in the standard metadata in means of defining hard-coded\nfilters, table columns and search indices.  To adjust the standard metadata to your specific needs, you can configure them in  /opt/opencast/etc/org.opencastproject.ui.metadata.CatalogUIAdapterFactory-episode-common.cfg  and  /opt/opencast/etc/org.opencastproject.ui.metadata.CatalogUIAdapterFactory-series-common.cfg .  For details on how to configure metadata catalogs, see section Configuring Metadata Catalogs.  As mentioned above, however, Opencast expects specific metafields to be present to work correctly. In case you want\nto map metadata specific to your use case, you might consider to use the extended metadata capbilities of Opencast\ndescribed in the next section.",
            "title": "Standard Metadata"
        },
        {
            "location": "/configuration/metadata/#extended-metadata",
            "text": "For both events and series, Opencast support an arbitrary number of customized metadata catalogs.   To add extended metadata catalogs, create a configuration file with a valid filename of the form  org.opencastproject.ui.metadata.CatalogUIAdapterFactory-<name>.cfg  in  /opt/opencast/etc.  on the admin node.  For details on how to configure metadata catalogs, see section Configuring Metadata Catalogs.  Limitations:   Cannot be sorted, searched or filtered  No support for scheduled events  Cannot be displayed in tables",
            "title": "Extended Metadata"
        },
        {
            "location": "/configuration/metadata/#metadata-catalog-configuration",
            "text": "The metadata configuration file format can be logically split up into different parts:",
            "title": "Metadata Catalog Configuration"
        },
        {
            "location": "/configuration/metadata/#part-1-general-catalog-information",
            "text": "Configuration key  Example  Description      type  events  Two different types of catalog UI adapters may be configured, such for events and others for series.    organization  mh_default_org  A custom catalog definition is mapped 1:1 to an organization and is available to this one organization only.    flavor  mycompany/episode  The catalog must be of a certain flavor. For a events catalog, the flavor consists of the form type/subtype whereas for series you only need to define the subtype. Attention: For series catalogs, the type (the part before the slash '/') is used as element type.    title  My Personal Catalog Name  This is the title that is displayed in the UI. It should be something that is readable by humans.",
            "title": "Part 1: General catalog information"
        },
        {
            "location": "/configuration/metadata/#part-2-xml-serialization-information",
            "text": "The only supported serialization of catalogs is currently the XML file format. The file follows the recommendation of the Dublin Core Metadata Initiative.     Configuration key  Example  Description      xml.rootElement.name  mycatalog  The name of the XML root element    xml.rootElement.namespace.URI  http://myorg.com/metadata/catalog  The URI of the XML namespace of the root element     Namespace bindings  To properly serialize to XML each prefix has to be bound to an XML namespace. Multiple namespace bindings can be configured, each identified by its unique name.     Configuration key  Example  Description      xml.namespaceBinding.{name}.URI  http://myorg.com/metadata/terms  The URI of the XML namespace    xml.namespaceBinding.{name}.prefix  myterms  The prefix used to identify elements of the namespace",
            "title": "Part 2: XML serialization information"
        },
        {
            "location": "/configuration/metadata/#part-3-catalog-fields-configuration",
            "text": "{field-id}  must be a unique identifier for each property for a given catalog and can be the same as the input or output id to make it easy to find.     Configuration key  Example  Description      property.{field-id}.inputID*  title  The id used to identify this property in the catalog e.g. The name of the property inside the xml file of a Dublin Core catalog. If an outputID is not specified then this inputID is used for both the catalog and the front end id. This value is mandatory.    property.{field-id}.outputID  title  The id used inside the json for this property. If this value is missing then the inputID will be used instead.    property.{field-id}.namespace  http://purl.org/dc/terms/  The URL that represents the namespace for this property. Different properties in the same catalog can have different namespaces.    property.{field-id}.label  \"EVENTS.EVENTS.DETAILS.METADATA.TITLE\" or \"Event Title\"  The label to show for this property in the UI. If there is a i18n support for a label that should be the value used so that it will be translated, if you don't mind it being locked to one translation just put that single value in.    property.{field-id}.type  text  The type of the metadata field.    property.{field-id}.pattern  yyyy-MM-dd  Applies to date and time types for now. It is used to format their values using the java DateTimeFormatter values**    property.{field-id}.readOnly  false  If the property can be edited in the UI or if it should only be displayed.    property.{field-id}.required  true  If the property has to have a value before the metadata can be saved (the UI's save button will be disabled until all of the required fields are entered)    property.{field-id}.collectionID  USERS  The id of the list provider that will be used to validate the input in the backend. So for example entering a username that doesn't exist will throw an error in this case.    property.{field-id}.listprovider  USERS  The id of the list provider that will be used as a drop down option for that field. So for example using the USERS list provider means that in the front end the user will be able to choose the field value from the list of users in Opencast.    property.{field-id}.order  3  Defines the order of properties where this property should be oriented in the UI i.e. 0 means the property should come first, 1 means it should come second etc. Giving two properties the same number will cause them to be next to one another but doesn't guarantee one above or below the other.     * Mandatory field attribute  ** See https://docs.oracle.com/javase/8/docs/api/java/time/format/DateTimeFormatter.html  Field types     Type  Description  Example value in catalog  Example value in UI  JSON response example      boolean  Represents a true / false value in the UI that is represented by a check box.  false  false     date  A Java Date object that can include the year, month, day, hour, minute second ... and is formatted by the pattern value.  2014-12-10T16:29:43Z  2014-12-10     text  A text input value for entering in one line of text. It supports more, it just won't increase in size for the interface.  This is the Title  This is the Title     text_long  A textarea which allows for more than 1 row of text  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.  Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur.  { \"id\": \"notesEpisode\", \"readOnly\": false, \"value\": \"\", \"label\": \"Notes\", \"required\": false, \"type\":\"text_long\" }    iterable_text  A text input value for entering in a list of text objects that are comma separated in the front end but stored separately in the catalog.  Adam,Basil,Lukas  value : [\"Adam\",\"Basil\",\"Lukas\"]  { \"id\": \"contributor\",  \"readOnly\": true, \"value\": [\"Adam\", \"Basil\", \"Lukas\"], \"label\": \"Contributor(s)\", \"required\": false, \"type\": \"text\" }    start_date  The start date portion of a Dublin Core Catalog Period.  start=2014-11-04T19:00:00Z; end=2014-11-05T20:00:00Z; scheme=W3C-DTF;  2014-11-04     start_time  The start time portion of a Dublin Core Catalog Period.  start=2014-11-04T19:00:00Z; end=2014-11-05T20:00:00Z; scheme=W3C-DTF;  19:00:00     duration  The duration of the event portion of a Dublin Core Catalog Period.  start=2014-11-04T19:00:00Z; end=2014-11-05T20:00:00Z; scheme=W3C-DTF;  01:00:00      Workflow Configuration  Since the extended metadata don't have the  dublincore/*  flavor, a tagging operation for the archive has to be added\nfor the extended catalogs. \nIn our examples below, we use ext/episode as a flavor, so the following operation should be added to the workflows  <!-- Tag the extended metadata catalogs for publishing -->\n<operation\n    id=\"tag\"\n    description=\"Tagging extended metadata catalogs for archival and/or publication\">\n    <configurations>\n        <configuration key=\"source-flavors\">ext/*</configuration>\n        <configuration key=\"target-tags\">+archive</configuration>\n    </configurations>\n</operation>  If you want the extended metadata to be published the same way as the standard metadata, you can update the existing tagging operation for dublincore metadata the following way  <!-- Tag the incoming metadata catalogs for publishing -->\n<operation\n  id=\"tag\"\n  description=\"Tagging metadata catalogs for archival and publication\">\n  <configurations>\n    <configuration key=\"source-flavors\">dublincore/*,ext/*</configuration>\n    <configuration key=\"target-tags\">+archive,+engage-download</configuration>\n  </configurations>\n</operation>",
            "title": "Part 3: Catalog fields configuration"
        },
        {
            "location": "/configuration/encoding/",
            "text": "Encoding Profile Configuration\n\n\nA workflow defines which operations are applied to media ingested into Opencast and the order of these operations. An\noperation can be something general like \u201cencode this video\u201d. The encoding profiles then specify exactly how a media is\nancoded, which filters are applied, which codecs are used and in which container these will be stored, \u2026\n\n\nOpencast comes with a set of such profiles generating files for both online playback and download. These profiles are\nbuild to work for everyone, meaning that in most cases optimization can be done according to local needs. So modifying\nthese profiles or building new ones often makes sense. This document will help you modify or augment Opencast's\ndefault encoding profiles for audio, video and still images.\n\n\nDefault Profiles and Possible Settings\n\n\nThis section contains some notes about the default profiles, explaining some thoughts behind those profiles and pointing\nat things you might want to change depending on your local set-up.\n\n\nA/V-Muxing: From lossless to safe\n\n\nThe audio/video muxing (\nprofile.mux-av.work\n) is applied if audio and video is sent to Opencast separately. The basic\nidea behind this is, to combine these separate files into one file which can later be converted in one step.\n\n\nPossible settings:\n\n\n\n\nIf you get an audio and a video file separately, it is possible to just copy the streams and put them together into a\n   new file. This is very fast (you only have to copy the streams) and most importantly, it is lossless, as no\n   re-encoding is done. The question is: What a/v container format can/should you use for such an operation.\n\n\nYou can try to use the video container the input video came in and just add the audio. This means that you will never\n   have an unexpected video container you don't know of. I.e. if you put an .mp4 video in, it still uses and .mp4\n   container after musing, etc. This might, however, lead to problems if you throw in an audio file that cannot be muxed\n   in the specific container format (i.e. you have a FLAC audio file and an FLV container). This is, what Opencast\n   does at the moment.\n\n\nTo circumvent the container problem, we could also use a container format which can hold almost everything (i.e. mkv)\n   regardless of the input. This would mean that Opencast can handle more combinations of a/v streams but you will\n   always end up with a Matroska file after muxing. Of cause, you can then encode it to mp4, etc. later on.\n\n\n\n\nThe safest option for muxing is to always re-encode the streams. It is far slower than re-using the existing bit\nstreams. It also, always means a quality loss.\n\n\nCreate an Encoding Profile\n\n\nThis section will help you to understand how you can modify an existing profile or create a completely new one.\n\n\nCreating a new encoding profile is a matter of creating a configuration file and placing it in the encoding profiles\nwatch folder.\n\n\nEncoding Profile Folder\n\n\nThe \n<config_dir>/encoding\n folder allows you to quickly augment Opencast's existing behavior, simply by modifying or\nadding new configuration files. The file names should follow the pattern \n*.properties\n.\n\n\nThe Encoding Profile\n\n\nEncoding profiles consist of a set of key-value pairs that conform to the following pattern:\n\n\nprofile.<name>.<context>.<property> = <value>\n\n\n\nFor example:\n\n\nprofile.mp4.http.name = Enocde Mp4 files for download\n\n\n\nAll profiles should have the following properties:\n\n\n.name\n.input  = [audio|visual|stream|image]\n.output = [audio|visual|stream|image]\n.suffix\n.mimetype\n.ffmpeg.command\n\n\n\nFor example:\n\n\n// My audio/video encoding profile\nprofile.my-av-profile.http.name           = my audio/video encoding profile\nprofile.my-av-profile.http.input          = visual\nprofile.my-av-profile.http.output         = visual\nprofile.my-av-profile.http.suffix         = -encoded.enc\nprofile.my-av-profile.http.mimetype       = video/x-enc\nprofile.my-av-profile.http.ffmpeg.command = -i #{in.video.path} -c:v venc -c:a aenc #{out.dir}/#{out.name}#{out.suffix}\n\n\n\nThe most important part of this profile is the \nffmpeg.command\n. This line specifies FFmpeg command line options using\n\n#{expression}\n for string replacement.\n\n\nFFmpeg\n\n\nTo create a new profile you have basically one task to do: Find an appropriate FFmpeg command line for whatever you want\nto do. For more information about FFmpeg, its options and how you can build FFmpeg with additional functionality have a\nlook at the \nOfficial FFmpeg Wiki\n. For trying out new encoding settings, just call FFmpeg\nfrom the command line.\n\n\nUsing a Profile\n\n\nOnce defined, use your encoding profile in your workflow by setting the encoding-profile property to the profiles name:\n\n\n<operation\n    id=\"compose\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Encode presenter using my audio/video encoding profile\">\n  <configurations>\n    <configuration key=\"source-flavor\">presenter/work</configuration>\n    <configuration key=\"target-flavor\">presenter/delivery</configuration>\n    <configuration key=\"target-tags\">rss, atom, captioning</configuration>\n    <configuration key=\"encoding-profile\">my-av-profile.http</configuration>\n  </configuration>\n</operation>\n\n\n\nHave a look at the \nWorkflow Configuration section\n for more details about workflows and workflow\noperations.",
            "title": "Encoding"
        },
        {
            "location": "/configuration/encoding/#encoding-profile-configuration",
            "text": "A workflow defines which operations are applied to media ingested into Opencast and the order of these operations. An\noperation can be something general like \u201cencode this video\u201d. The encoding profiles then specify exactly how a media is\nancoded, which filters are applied, which codecs are used and in which container these will be stored, \u2026  Opencast comes with a set of such profiles generating files for both online playback and download. These profiles are\nbuild to work for everyone, meaning that in most cases optimization can be done according to local needs. So modifying\nthese profiles or building new ones often makes sense. This document will help you modify or augment Opencast's\ndefault encoding profiles for audio, video and still images.",
            "title": "Encoding Profile Configuration"
        },
        {
            "location": "/configuration/encoding/#default-profiles-and-possible-settings",
            "text": "This section contains some notes about the default profiles, explaining some thoughts behind those profiles and pointing\nat things you might want to change depending on your local set-up.",
            "title": "Default Profiles and Possible Settings"
        },
        {
            "location": "/configuration/encoding/#av-muxing-from-lossless-to-safe",
            "text": "The audio/video muxing ( profile.mux-av.work ) is applied if audio and video is sent to Opencast separately. The basic\nidea behind this is, to combine these separate files into one file which can later be converted in one step.  Possible settings:   If you get an audio and a video file separately, it is possible to just copy the streams and put them together into a\n   new file. This is very fast (you only have to copy the streams) and most importantly, it is lossless, as no\n   re-encoding is done. The question is: What a/v container format can/should you use for such an operation.  You can try to use the video container the input video came in and just add the audio. This means that you will never\n   have an unexpected video container you don't know of. I.e. if you put an .mp4 video in, it still uses and .mp4\n   container after musing, etc. This might, however, lead to problems if you throw in an audio file that cannot be muxed\n   in the specific container format (i.e. you have a FLAC audio file and an FLV container). This is, what Opencast\n   does at the moment.  To circumvent the container problem, we could also use a container format which can hold almost everything (i.e. mkv)\n   regardless of the input. This would mean that Opencast can handle more combinations of a/v streams but you will\n   always end up with a Matroska file after muxing. Of cause, you can then encode it to mp4, etc. later on.   The safest option for muxing is to always re-encode the streams. It is far slower than re-using the existing bit\nstreams. It also, always means a quality loss.",
            "title": "A/V-Muxing: From lossless to safe"
        },
        {
            "location": "/configuration/encoding/#create-an-encoding-profile",
            "text": "This section will help you to understand how you can modify an existing profile or create a completely new one.  Creating a new encoding profile is a matter of creating a configuration file and placing it in the encoding profiles\nwatch folder.",
            "title": "Create an Encoding Profile"
        },
        {
            "location": "/configuration/encoding/#encoding-profile-folder",
            "text": "The  <config_dir>/encoding  folder allows you to quickly augment Opencast's existing behavior, simply by modifying or\nadding new configuration files. The file names should follow the pattern  *.properties .",
            "title": "Encoding Profile Folder"
        },
        {
            "location": "/configuration/encoding/#the-encoding-profile",
            "text": "Encoding profiles consist of a set of key-value pairs that conform to the following pattern:  profile.<name>.<context>.<property> = <value>  For example:  profile.mp4.http.name = Enocde Mp4 files for download  All profiles should have the following properties:  .name\n.input  = [audio|visual|stream|image]\n.output = [audio|visual|stream|image]\n.suffix\n.mimetype\n.ffmpeg.command  For example:  // My audio/video encoding profile\nprofile.my-av-profile.http.name           = my audio/video encoding profile\nprofile.my-av-profile.http.input          = visual\nprofile.my-av-profile.http.output         = visual\nprofile.my-av-profile.http.suffix         = -encoded.enc\nprofile.my-av-profile.http.mimetype       = video/x-enc\nprofile.my-av-profile.http.ffmpeg.command = -i #{in.video.path} -c:v venc -c:a aenc #{out.dir}/#{out.name}#{out.suffix}  The most important part of this profile is the  ffmpeg.command . This line specifies FFmpeg command line options using #{expression}  for string replacement.",
            "title": "The Encoding Profile"
        },
        {
            "location": "/configuration/encoding/#ffmpeg",
            "text": "To create a new profile you have basically one task to do: Find an appropriate FFmpeg command line for whatever you want\nto do. For more information about FFmpeg, its options and how you can build FFmpeg with additional functionality have a\nlook at the  Official FFmpeg Wiki . For trying out new encoding settings, just call FFmpeg\nfrom the command line.",
            "title": "FFmpeg"
        },
        {
            "location": "/configuration/encoding/#using-a-profile",
            "text": "Once defined, use your encoding profile in your workflow by setting the encoding-profile property to the profiles name:  <operation\n    id=\"compose\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Encode presenter using my audio/video encoding profile\">\n  <configurations>\n    <configuration key=\"source-flavor\">presenter/work</configuration>\n    <configuration key=\"target-flavor\">presenter/delivery</configuration>\n    <configuration key=\"target-tags\">rss, atom, captioning</configuration>\n    <configuration key=\"encoding-profile\">my-av-profile.http</configuration>\n  </configuration>\n</operation>  Have a look at the  Workflow Configuration section  for more details about workflows and workflow\noperations.",
            "title": "Using a Profile"
        },
        {
            "location": "/configuration/load/",
            "text": "Load Configuration\n\n\nThis guide will help you to set up the load configuration settings which are strongly recommended for each Opencast \ninstallation.  These settings control how many jobs are running on your various hardware nodes.  These settings can be\nleft at their defaults initially, but as your installation grows you will likely wish to fine-tune these to get the best\nperformance you can out of your hardware.\n\n\nBackground: What is a load value\n\n\nEvery job obviously imposes a certain amount of load on its processing system, the question is how can we quantify this?\nThe settings this document will walk you through are estimates of the load placed on your system(s) by each job type.\n\nThis means that every individual instance of that job type will count for a certain amount of load, and Opencast will\nrefuse to process more than a certain configurable amount of load at any given time on a given node.  These loads are \ntracked on a per-node basis, so a job running on one node imposes no load on another.\n\n\nAs an example, say we have a worker with 8 cores.  With Opencast 1.x all jobs, even expensive jobs like encoding, had an\neffective load value of 1.0.  This meant that Opencast would schedule up to 8 encodes on worker 1! Obviously this is not \nideal, since most encoding jobs consume multiple cores.  Since Opencast 2.1 you can now specify on an encoding profile \nlevel how much load is imposed on a node.  Likewise, all other jobs (video segmentation, publishing, etc) also now have\nconfigurable loads.\n\n\nJob loads can be any floating point value between 0.0, and Java's MAXFLOAT.  Fractional loads are supported, since many\nof the jobs that Opencast spawns as a regular part of its workflows are very small.  There is no sanity checking for the\nconfigured loads, aside from assuring they are not negative.  This means that improperly set load values can cause\ndeadlocks!  Fortunately, this is easy to fix.  See Troubleshooting for more details.\n\n\nStep 1: Determine your load values\n\n\nThis is a very subjective process, but is arguably the most imporant: How much load does each job and encoding profile\nadd to your system? We have tried our best to set useful loads for each job, however these are only estimates.  If your\ninstallation has, for example, hardware assisted encoding then your encoding jobs may be very inexpensive.  In general, \nit is safe to assume that the first load value from the output of \nuptime\n is a good estimate of the load imposed by a \njob.\n\n\nNote: These job loads are specific for each \nnode\n in the cluster.  This means that for any given job, each node can \nhave a different load value associated.  For instance, if worker A has no job load specified for its encoding profiles, \nand worker B has job loads specified then any encoding jobs dispatched to A will have a load of 1.0, and jobs dispatched\nto B will have a different, presumably higher load.  There are edge cases where this may be useful, but is most cases \nthis will only cause confusion.  It is therefore highly recommended that these settings be put into your configuration \nmanagement system, and be applied on a cluster level to ensure consistency across all nodes.\n\n\nStep 2: Setting the load values for system jobs\n\n\nEach Opencast instance has its own maximum load.  By default this is set to the number of CPU cores present in the \nsystem.  If you wish to change this, set the \norg.opencastproject.server.maxload\n key in config.properties to the \nmaximum load you want this node to accept.  Keep in mind that exceeding the number of CPU cores present in the system is\nnot recommended.\n\n\nThe load values for the non-encoding jobs are set in the etc/services files.  Look for files containing the prefix \n\njob.load\n.  These configuration keys control the load for each job type.  For example, the \n\njob.load.download.distribute\n configuration key controls the load placed on the system when a download distribution job\nis running.  The current files with relevant configuration keys are:\n\n\n\n\n\n\n\n\nFile\n\n\nControls\n\n\n\n\n\n\n\n\n\n\norg.opencastproject.caption.impl.CaptionServiceImpl.cfg\n\n\nCaption convertion services\n\n\n\n\n\n\norg.opencastproject.composer.impl.ComposerServiceImpl.cfg\n\n\nCaption embedding services\n\n\n\n\n\n\norg.opencastproject.distribution.acl.AclDistributionService.cfg\n\n\nACL file distribution\n\n\n\n\n\n\norg.opencastproject.distribution.distribution.streaming.StreamingDistributionService.cfg\n\n\nStreaming distribution\n\n\n\n\n\n\norg.opencastproject.distribution.download.DownloadDistributionServiceImpl.cfg\n\n\nDownload distribution\n\n\n\n\n\n\norg.opencastproject.ingest.impl.IngestServiceImpl.cfg\n\n\nIngest services\n\n\n\n\n\n\norg.opencastproject.inspection.ffmpeg.MediaInspectionServiceImpl.cfg\n\n\nMedia inspection using ffmpeg\n\n\n\n\n\n\norg.opencastproject.inspection.impl.MediaInspectionServiceImpl.cfg\n\n\nMedia inspection using mediainfo\n\n\n\n\n\n\norg.opencastproject.publication.youtube.YouTubePublicationServiceImpl.cfg\n\n\nYoutube distribution\n\n\n\n\n\n\norg.opencastproject.publication.youtube.YouTubeV3PublicationServiceImpl.cfg\n\n\nYoutube distribution\n\n\n\n\n\n\norg.opencastproject.search.impl.SearchServiceImpl.cfg\n\n\nMatterhorn engage index jobs\n\n\n\n\n\n\norg.opencastproject.silencedetection.impl.SilenceDetectionServiceImpl.cfg\n\n\nSilence detection\n\n\n\n\n\n\norg.opencastproject.textanalyzer.impl.TextAnalyzerServiceImpl.cfg\n\n\nText analysis, including slide OCR\n\n\n\n\n\n\norg.opencastproject.videoeditor.impl.VideoEditorServiceImpl.cfg\n\n\nVideo editor\n\n\n\n\n\n\norg.opencastproject.videosegmenter.ffmpeg.VideoSegmenterServiceImpl.cfg\n\n\nVideo segmentation\n\n\n\n\n\n\n\n\nNote: Ingest jobs are a special case in Opencast.  Because of their immediate nature there is no way to limit the \nnumber of running jobs.  However, these jobs will block other jobs from running on the ingest/admin nodes if enough \ningests running concurrently.\n\n\nStep 3: Setting the load values for encoding profiles\n\n\nEach encoding profile can have a load value associated with it.  By default, we have not set any, which means that the \ndefault value of 1.0 is used.  To set the load associated with a profile, you simply add a .jobload key to the profile.\nFor example, the composite encoding profile is prefixed with \nprofile.composite.http\n.  If we want to set a different \njob load than 1.0, we would create the \nprofile.composite.http.jobload\n key, and set it to an appropriate job value.\n\n\nStep 4: Restart Opencast\n\n\nMany of these configuration files are only read on startup, so restarting Opencast is strongly recommended.\n\n\nTroubleshooting\n\n\nHelp, my system has deadlocked, or there are jobs which are always queued even if the system is otherwise idle\n\n\nThis can be caused by setting a job weight that exceeds the maximum load for \nall\n services of a given type.  For \nexample, if you have a single worker with 8 cores and set an encoding job to have a jobload of 9.  Fortunately, there is\na simple resolution to this issue.  Jobs which have already been created do \nnot\n update their load values, even after \nrestarting Opencast.  To resolve a deadlock caused by job loads follow these instructions.  First determine the\nqueued job's ID from the admin UI.  This will be an integer greater than zero.  We will call this $jobid.  Once you have\nthe job ID, follow these steps:\n\n\n\n\nStop Opencast\n\n\nLog into your database\n\n\nMake sure you are using the right schema.  Currently the default is called \nmatterhorn\n\n\nUpdate the job's load\n\n\nThis will look something like \nUPDATE mh_job SET job\\_load=0.0 WHERE id=$jobid\n\n\nLog out of your database\n\n\nChange the load specified in the configuration file to an appropriate value\n\n\nThis may need to happen across all nodes!\n\n\nRestart matterhorn",
            "title": "Load"
        },
        {
            "location": "/configuration/load/#load-configuration",
            "text": "This guide will help you to set up the load configuration settings which are strongly recommended for each Opencast \ninstallation.  These settings control how many jobs are running on your various hardware nodes.  These settings can be\nleft at their defaults initially, but as your installation grows you will likely wish to fine-tune these to get the best\nperformance you can out of your hardware.",
            "title": "Load Configuration"
        },
        {
            "location": "/configuration/load/#background-what-is-a-load-value",
            "text": "Every job obviously imposes a certain amount of load on its processing system, the question is how can we quantify this?\nThe settings this document will walk you through are estimates of the load placed on your system(s) by each job type. \nThis means that every individual instance of that job type will count for a certain amount of load, and Opencast will\nrefuse to process more than a certain configurable amount of load at any given time on a given node.  These loads are \ntracked on a per-node basis, so a job running on one node imposes no load on another.  As an example, say we have a worker with 8 cores.  With Opencast 1.x all jobs, even expensive jobs like encoding, had an\neffective load value of 1.0.  This meant that Opencast would schedule up to 8 encodes on worker 1! Obviously this is not \nideal, since most encoding jobs consume multiple cores.  Since Opencast 2.1 you can now specify on an encoding profile \nlevel how much load is imposed on a node.  Likewise, all other jobs (video segmentation, publishing, etc) also now have\nconfigurable loads.  Job loads can be any floating point value between 0.0, and Java's MAXFLOAT.  Fractional loads are supported, since many\nof the jobs that Opencast spawns as a regular part of its workflows are very small.  There is no sanity checking for the\nconfigured loads, aside from assuring they are not negative.  This means that improperly set load values can cause\ndeadlocks!  Fortunately, this is easy to fix.  See Troubleshooting for more details.",
            "title": "Background: What is a load value"
        },
        {
            "location": "/configuration/load/#step-1-determine-your-load-values",
            "text": "This is a very subjective process, but is arguably the most imporant: How much load does each job and encoding profile\nadd to your system? We have tried our best to set useful loads for each job, however these are only estimates.  If your\ninstallation has, for example, hardware assisted encoding then your encoding jobs may be very inexpensive.  In general, \nit is safe to assume that the first load value from the output of  uptime  is a good estimate of the load imposed by a \njob.  Note: These job loads are specific for each  node  in the cluster.  This means that for any given job, each node can \nhave a different load value associated.  For instance, if worker A has no job load specified for its encoding profiles, \nand worker B has job loads specified then any encoding jobs dispatched to A will have a load of 1.0, and jobs dispatched\nto B will have a different, presumably higher load.  There are edge cases where this may be useful, but is most cases \nthis will only cause confusion.  It is therefore highly recommended that these settings be put into your configuration \nmanagement system, and be applied on a cluster level to ensure consistency across all nodes.",
            "title": "Step 1: Determine your load values"
        },
        {
            "location": "/configuration/load/#step-2-setting-the-load-values-for-system-jobs",
            "text": "Each Opencast instance has its own maximum load.  By default this is set to the number of CPU cores present in the \nsystem.  If you wish to change this, set the  org.opencastproject.server.maxload  key in config.properties to the \nmaximum load you want this node to accept.  Keep in mind that exceeding the number of CPU cores present in the system is\nnot recommended.  The load values for the non-encoding jobs are set in the etc/services files.  Look for files containing the prefix  job.load .  These configuration keys control the load for each job type.  For example, the  job.load.download.distribute  configuration key controls the load placed on the system when a download distribution job\nis running.  The current files with relevant configuration keys are:     File  Controls      org.opencastproject.caption.impl.CaptionServiceImpl.cfg  Caption convertion services    org.opencastproject.composer.impl.ComposerServiceImpl.cfg  Caption embedding services    org.opencastproject.distribution.acl.AclDistributionService.cfg  ACL file distribution    org.opencastproject.distribution.distribution.streaming.StreamingDistributionService.cfg  Streaming distribution    org.opencastproject.distribution.download.DownloadDistributionServiceImpl.cfg  Download distribution    org.opencastproject.ingest.impl.IngestServiceImpl.cfg  Ingest services    org.opencastproject.inspection.ffmpeg.MediaInspectionServiceImpl.cfg  Media inspection using ffmpeg    org.opencastproject.inspection.impl.MediaInspectionServiceImpl.cfg  Media inspection using mediainfo    org.opencastproject.publication.youtube.YouTubePublicationServiceImpl.cfg  Youtube distribution    org.opencastproject.publication.youtube.YouTubeV3PublicationServiceImpl.cfg  Youtube distribution    org.opencastproject.search.impl.SearchServiceImpl.cfg  Matterhorn engage index jobs    org.opencastproject.silencedetection.impl.SilenceDetectionServiceImpl.cfg  Silence detection    org.opencastproject.textanalyzer.impl.TextAnalyzerServiceImpl.cfg  Text analysis, including slide OCR    org.opencastproject.videoeditor.impl.VideoEditorServiceImpl.cfg  Video editor    org.opencastproject.videosegmenter.ffmpeg.VideoSegmenterServiceImpl.cfg  Video segmentation     Note: Ingest jobs are a special case in Opencast.  Because of their immediate nature there is no way to limit the \nnumber of running jobs.  However, these jobs will block other jobs from running on the ingest/admin nodes if enough \ningests running concurrently.",
            "title": "Step 2: Setting the load values for system jobs"
        },
        {
            "location": "/configuration/load/#step-3-setting-the-load-values-for-encoding-profiles",
            "text": "Each encoding profile can have a load value associated with it.  By default, we have not set any, which means that the \ndefault value of 1.0 is used.  To set the load associated with a profile, you simply add a .jobload key to the profile.\nFor example, the composite encoding profile is prefixed with  profile.composite.http .  If we want to set a different \njob load than 1.0, we would create the  profile.composite.http.jobload  key, and set it to an appropriate job value.",
            "title": "Step 3: Setting the load values for encoding profiles"
        },
        {
            "location": "/configuration/load/#step-4-restart-opencast",
            "text": "Many of these configuration files are only read on startup, so restarting Opencast is strongly recommended.",
            "title": "Step 4: Restart Opencast"
        },
        {
            "location": "/configuration/load/#troubleshooting",
            "text": "",
            "title": "Troubleshooting"
        },
        {
            "location": "/configuration/load/#help-my-system-has-deadlocked-or-there-are-jobs-which-are-always-queued-even-if-the-system-is-otherwise-idle",
            "text": "This can be caused by setting a job weight that exceeds the maximum load for  all  services of a given type.  For \nexample, if you have a single worker with 8 cores and set an encoding job to have a jobload of 9.  Fortunately, there is\na simple resolution to this issue.  Jobs which have already been created do  not  update their load values, even after \nrestarting Opencast.  To resolve a deadlock caused by job loads follow these instructions.  First determine the\nqueued job's ID from the admin UI.  This will be an integer greater than zero.  We will call this $jobid.  Once you have\nthe job ID, follow these steps:   Stop Opencast  Log into your database  Make sure you are using the right schema.  Currently the default is called  matterhorn  Update the job's load  This will look something like  UPDATE mh_job SET job\\_load=0.0 WHERE id=$jobid  Log out of your database  Change the load specified in the configuration file to an appropriate value  This may need to happen across all nodes!  Restart matterhorn",
            "title": "Help, my system has deadlocked, or there are jobs which are always queued even if the system is otherwise idle"
        },
        {
            "location": "/configuration/logging.and.privacy/",
            "text": "Logging and Privacy\n\n\nThe Opencast User-Tracking service stores user actions of the Opencast players in the database. This data is used for\nthe footprint feature of the player and for the optional analytics component.\n\n\n\n\nNote that enabling all of the logging options may result in legal problems depending on your country's privacy laws\nand the type of service you are running.\n\n\n\n\nThe settings for logging user data can be found in:\n\n\n.../etc/org.opencastproject.usertracking.impl.UserTrackingServiceImpl.cfg\n\n\n\nLogging of user data can be controlled on two levels. First, logging can be generally activated or deactivated. Second,\nif it is activated, the data being logged can be defined.\n\n\norg.opencastproject.usertracking.detailedtrack\n defines if the user tracking JavaScript code is loaded and data about\nuser actions are being sent to and stored by Opencast. Deactivating this will effectively stop all logging. This may\neffect features like the footprints in the Opencast player.  Default: \ntrue\n.\n\n\nIf logging is still activated, the following keys may be used to define the kind of data that is being logged. The keys\nhave no effect if logging is turned off.\n\n\n\n\n\n\n\n\nKey\n\n\nData to be logged\n\n\nDefault value\n\n\n\n\n\n\n\n\n\n\norg.opencastproject.usertracking.log.ip\n\n\nIP addresses\n\n\ntrue\n\n\n\n\n\n\norg.opencastproject.usertracking.log.user\n\n\nlogin names of users\n\n\ntrue\n\n\n\n\n\n\norg.opencastproject.usertracking.log.session\n\n\nBrowser session-IDs\n\n\ntrue\n\n\n\n\n\n\n\n\nIf you want to use the footprint feature but do not want to store any user specific data you can turn the logging of IP\naddresses, usernames and session-IDs off.",
            "title": "Logging and Privacy"
        },
        {
            "location": "/configuration/logging.and.privacy/#logging-and-privacy",
            "text": "The Opencast User-Tracking service stores user actions of the Opencast players in the database. This data is used for\nthe footprint feature of the player and for the optional analytics component.   Note that enabling all of the logging options may result in legal problems depending on your country's privacy laws\nand the type of service you are running.   The settings for logging user data can be found in:  .../etc/org.opencastproject.usertracking.impl.UserTrackingServiceImpl.cfg  Logging of user data can be controlled on two levels. First, logging can be generally activated or deactivated. Second,\nif it is activated, the data being logged can be defined.  org.opencastproject.usertracking.detailedtrack  defines if the user tracking JavaScript code is loaded and data about\nuser actions are being sent to and stored by Opencast. Deactivating this will effectively stop all logging. This may\neffect features like the footprints in the Opencast player.  Default:  true .  If logging is still activated, the following keys may be used to define the kind of data that is being logged. The keys\nhave no effect if logging is turned off.     Key  Data to be logged  Default value      org.opencastproject.usertracking.log.ip  IP addresses  true    org.opencastproject.usertracking.log.user  login names of users  true    org.opencastproject.usertracking.log.session  Browser session-IDs  true     If you want to use the footprint feature but do not want to store any user specific data you can turn the logging of IP\naddresses, usernames and session-IDs off.",
            "title": "Logging and Privacy"
        },
        {
            "location": "/configuration/multi.tenancy/",
            "text": "Multi Tenancy Configuration\n\n\nIntroduction\n\n\nA single Opencast instance can handle mutliple tenants, each of which have their own recordings in the system.\nOpencast refers to tenants as \norganizations\n, and an HTTP request to the Opencast installation is mapped to an\norganization using the server name. Therefore, a Opencast instance will usually be set up with multiple DNS names\npointing to the same IP, for example:\n\n\n\n\ntenant1.matterhorn.edu\n\n\ntenant2.matterhorn.edu\n\n\n\n\nA tenant configuration thus consists mainly of the DNS name that is mapped to that tenant.\n\n\nDefault Setup\n\n\nOut of the box, Opencast has one tenant configured, called mh_default_org that is mapped to the server name\n\nlocalhost:8080\n. As long as there is one tenant configuration only, Opencast will map every request to that tenant\nregardless of the server name. As soon as a second tenant configuration is available, requests will be mapped to\norganizations using the server name, and an HTTP status code 404 will be returned for requests that hit the Opencast\nintallation that cannot be mapped to any organization.\n\n\nLimitations\n\n\nMulti tenancy in Opencast is working, however it is not fully finished. Certain objects are still shared amongst\norganizations, most notably workflow definitions, RSS/Atom feeds and encoding profiles.\n\n\nAdding A Tenant\n\n\nTo add a tenant to the installation, two things need to be put in place: a tenant configuration and a set of security\nrules. Assume that the new tenant is called \ntenant1\n and should be mapped to \ntenant1.myuniversity.edu\n.\n\n\nTenant Configuration\n\n\nCreate a file called org.opencastproject.organization-tenant1.cfg in the \netc/\n directory of your Opencast\ninstallation:\n\n\nid=tenant1\nname=Tenant 1\nserver=tenant1.myuniversity.edu\nport=8080\nadmin_role=ROLE_ADMIN\nanonymous_role=ROLE_ANONYMOUS\n\n# Admin and Presentation Server Urls\nprop.org.opencastproject.admin.ui.url=https://tenant1_admin.myuniversity.edu\nprop.org.opencastproject.engage.ui.url=https://tenant1_presentation.myuniversity.edu\n\n# Default properties for the user interface\nprop.logo_mediamodule=/engage/ui/img/logo/opencast-icon.svg\nprop.logo_player=/engage/ui/img/logo/opencast.svg\n\n# Define which parts of the admin ui should be visible\nprop.adminui.i18n_tab_episode.enable=false\nprop.adminui.i18n_tab_users.enable=false\n\n# Define which parts of the engage ui should be visible\nprop.engageui.link_download.enable=false\nprop.engageui.link_download.enable=false\n\n\n\nNote that if you are running Apache httpd with mod_proxy in front of the Opencast installation, the port number will be\n-1.\n\n\nSecurity Configuration\n\n\nCreate a file called tenant1.xml in /etc/security. This file specifies access rules for individual urls that specify\nwhich roles are needed in order to access a given url. In addition, it allows to define the directory services that are\nused to authenticate users. The file follows the standard ways on configuring Spring Security and you are free to add\nanything that can go into a Spring Security configuration.\n\n\nThe easiest way of creating that file is probably to create a copy of the already existing \nmh_default_org.xml\n.",
            "title": "Multi Tenancy"
        },
        {
            "location": "/configuration/multi.tenancy/#multi-tenancy-configuration",
            "text": "",
            "title": "Multi Tenancy Configuration"
        },
        {
            "location": "/configuration/multi.tenancy/#introduction",
            "text": "A single Opencast instance can handle mutliple tenants, each of which have their own recordings in the system.\nOpencast refers to tenants as  organizations , and an HTTP request to the Opencast installation is mapped to an\norganization using the server name. Therefore, a Opencast instance will usually be set up with multiple DNS names\npointing to the same IP, for example:   tenant1.matterhorn.edu  tenant2.matterhorn.edu   A tenant configuration thus consists mainly of the DNS name that is mapped to that tenant.",
            "title": "Introduction"
        },
        {
            "location": "/configuration/multi.tenancy/#default-setup",
            "text": "Out of the box, Opencast has one tenant configured, called mh_default_org that is mapped to the server name localhost:8080 . As long as there is one tenant configuration only, Opencast will map every request to that tenant\nregardless of the server name. As soon as a second tenant configuration is available, requests will be mapped to\norganizations using the server name, and an HTTP status code 404 will be returned for requests that hit the Opencast\nintallation that cannot be mapped to any organization.",
            "title": "Default Setup"
        },
        {
            "location": "/configuration/multi.tenancy/#limitations",
            "text": "Multi tenancy in Opencast is working, however it is not fully finished. Certain objects are still shared amongst\norganizations, most notably workflow definitions, RSS/Atom feeds and encoding profiles.",
            "title": "Limitations"
        },
        {
            "location": "/configuration/multi.tenancy/#adding-a-tenant",
            "text": "To add a tenant to the installation, two things need to be put in place: a tenant configuration and a set of security\nrules. Assume that the new tenant is called  tenant1  and should be mapped to  tenant1.myuniversity.edu .",
            "title": "Adding A Tenant"
        },
        {
            "location": "/configuration/multi.tenancy/#tenant-configuration",
            "text": "Create a file called org.opencastproject.organization-tenant1.cfg in the  etc/  directory of your Opencast\ninstallation:  id=tenant1\nname=Tenant 1\nserver=tenant1.myuniversity.edu\nport=8080\nadmin_role=ROLE_ADMIN\nanonymous_role=ROLE_ANONYMOUS\n\n# Admin and Presentation Server Urls\nprop.org.opencastproject.admin.ui.url=https://tenant1_admin.myuniversity.edu\nprop.org.opencastproject.engage.ui.url=https://tenant1_presentation.myuniversity.edu\n\n# Default properties for the user interface\nprop.logo_mediamodule=/engage/ui/img/logo/opencast-icon.svg\nprop.logo_player=/engage/ui/img/logo/opencast.svg\n\n# Define which parts of the admin ui should be visible\nprop.adminui.i18n_tab_episode.enable=false\nprop.adminui.i18n_tab_users.enable=false\n\n# Define which parts of the engage ui should be visible\nprop.engageui.link_download.enable=false\nprop.engageui.link_download.enable=false  Note that if you are running Apache httpd with mod_proxy in front of the Opencast installation, the port number will be\n-1.",
            "title": "Tenant Configuration"
        },
        {
            "location": "/configuration/multi.tenancy/#security-configuration",
            "text": "Create a file called tenant1.xml in /etc/security. This file specifies access rules for individual urls that specify\nwhich roles are needed in order to access a given url. In addition, it allows to define the directory services that are\nused to authenticate users. The file follows the standard ways on configuring Spring Security and you are free to add\nanything that can go into a Spring Security configuration.  The easiest way of creating that file is probably to create a copy of the already existing  mh_default_org.xml .",
            "title": "Security Configuration"
        },
        {
            "location": "/configuration/security/",
            "text": "Security Configuration\n\n\nThis document will help you configure the Opencast security policy.\n\n\nIntroduction\n\n\nOpencast service endpoints and user interfaces are secured by default using a set of servlet filters. The following\ndiagram illustrates the flow of an HTTP request and response through these filters.\n\n\n\n\nThe Spring Security filters used here are very powerful, but are also somewhat complicated. Please familiarize yourself\nwith the basic concepts and vocabulary described in the Spring Security documentation, then edit the xml files in\n\netc/security\n, as described below.\n\n\nConfigure Access\n\n\nTo configure access roles and URL patterns for a tenant, modify \n/etc/security/{{tenant_identifier.xml}}\n.  If you are\nnot hosting multiple tenants on your Opencast server or cluster, all configuration should be done in\n\nmh_default_org.xml\n.\n\n\nSome examples:\n\n\n<!-- Allow anonymous access to the welcome.html URLs -->\n<sec:intercept-url pattern='/welcome.html' access='ROLE_ANONYMOUS,ROLE_USER'/>\n\n<!-- Allow anonymous GET to the search service, but not POST or PUT -->\n<sec:intercept-url pattern='/search/**' method=\"GET\" access='ROLE_ANONYMOUS,ROLE_USER' />\n\n<!-- Allow users with the admin role to do anything -->\n<sec:intercept-url pattern='/**' access='ROLE_ADMIN'/>\n\n\n\nAuthentication Provider\n\n\nOpencast specifies an AuthenticationProvider by default, using a UserDetailService that is obtained from the OSGI\nservice registry.\n\n\nYou can use this simple provider as is, loading users into the \nmh_user\n and \nmh_role\n database tables, and specifying\nan administrative username and password in \ncustom.properties\n:\n\n\norg.opencastproject.security.digest.user=opencast_system_account\norg.opencastproject.security.digest.pass=CHANGE_ME\n\n\n\nThe set of user and role providers can be configured. If you do not want to keep users and passwords in Opencast's\ndatabase, you can replace the JpaUserAndRoleProvider with the LdapUserProvider by replacing the\nmatterhorn-userdirectory-jpa jar with the matterhorn-userdirectory-ldap jar.\n\n\nFurther Authentication Configuration\n\n\nConfigure Central Authentication Service (CAS)",
            "title": "General Security"
        },
        {
            "location": "/configuration/security/#security-configuration",
            "text": "This document will help you configure the Opencast security policy.",
            "title": "Security Configuration"
        },
        {
            "location": "/configuration/security/#introduction",
            "text": "Opencast service endpoints and user interfaces are secured by default using a set of servlet filters. The following\ndiagram illustrates the flow of an HTTP request and response through these filters.   The Spring Security filters used here are very powerful, but are also somewhat complicated. Please familiarize yourself\nwith the basic concepts and vocabulary described in the Spring Security documentation, then edit the xml files in etc/security , as described below.",
            "title": "Introduction"
        },
        {
            "location": "/configuration/security/#configure-access",
            "text": "To configure access roles and URL patterns for a tenant, modify  /etc/security/{{tenant_identifier.xml}} .  If you are\nnot hosting multiple tenants on your Opencast server or cluster, all configuration should be done in mh_default_org.xml .  Some examples:  <!-- Allow anonymous access to the welcome.html URLs -->\n<sec:intercept-url pattern='/welcome.html' access='ROLE_ANONYMOUS,ROLE_USER'/>\n\n<!-- Allow anonymous GET to the search service, but not POST or PUT -->\n<sec:intercept-url pattern='/search/**' method=\"GET\" access='ROLE_ANONYMOUS,ROLE_USER' />\n\n<!-- Allow users with the admin role to do anything -->\n<sec:intercept-url pattern='/**' access='ROLE_ADMIN'/>",
            "title": "Configure Access"
        },
        {
            "location": "/configuration/security/#authentication-provider",
            "text": "Opencast specifies an AuthenticationProvider by default, using a UserDetailService that is obtained from the OSGI\nservice registry.  You can use this simple provider as is, loading users into the  mh_user  and  mh_role  database tables, and specifying\nan administrative username and password in  custom.properties :  org.opencastproject.security.digest.user=opencast_system_account\norg.opencastproject.security.digest.pass=CHANGE_ME  The set of user and role providers can be configured. If you do not want to keep users and passwords in Opencast's\ndatabase, you can replace the JpaUserAndRoleProvider with the LdapUserProvider by replacing the\nmatterhorn-userdirectory-jpa jar with the matterhorn-userdirectory-ldap jar.",
            "title": "Authentication Provider"
        },
        {
            "location": "/configuration/security/#further-authentication-configuration",
            "text": "Configure Central Authentication Service (CAS)",
            "title": "Further Authentication Configuration"
        },
        {
            "location": "/configuration/security.cas/",
            "text": "Configure Central Authentication Service (CAS)\n\n\nCAS\n\n\nMany campuses use some kind of single sign on, such as JASIG's Central Authentication Service, or CAS. This guide\ndescribes how to integrate Opencast into such a system.\n\n\nStep 1\n\n\nFirst, install the optional CAS feature. Via the Karaf console, this can be done like this:\n\n\nfeature:install opencast-contrib-cas\n\n\n\nStep 2\n\n\nTo configure Opencast to use CAS, simply replace the default \nmh_default_org.xml\n with the contents of\n\nsecurity_sample_cas.xml\n, available in the Opencast source. You must modify several settings in the sample to point to\nyour CAS server:\n\n\n<bean id=\"casEntryPoint\" class=\"org.springframework.security.cas.web.CasAuthenticationEntryPoint\">\n  <property name=\"loginUrl\" value=\"https://auth-test.berkeley.edu/cas/login\"/>\n  <property name=\"serviceProperties\" ref=\"serviceProperties\"/>\n</bean>\n\n<bean id=\"casAuthenticationProvider\" class=\"org.springframework.security.cas.authentication.CasAuthenticationProvider\">\n  <property name=\"userDetailsService\" ref=\"userDetailsService\"/>\n  <property name=\"serviceProperties\" ref=\"serviceProperties\" />\n  <property name=\"ticketValidator\">\n    <bean class=\"org.jasig.cas.client.validation.Cas20ServiceTicketValidator\">\n      <constructor-arg index=\"0\" value=\"https://auth-test.berkeley.edu/cas\" />\n    </bean>\n  </property>\n  <property name=\"key\" value=\"cas\"/>\n</bean>\n\n\n\nYou will also need to set the public URL for your Opencast server:\n\n\n<bean id=\"serviceProperties\" class=\"org.springframework.security.cas.ServiceProperties\">\n  <property name=\"service\" value=\"http://localhost:8080/j_spring_cas_security_check\"/>\n  <property name=\"sendRenew\" value=\"false\"/>\n</bean>\n\n\n\nStep 3\n\n\nAssuming you are using Opencast version 1.4 and are using LDAP for user provisioning, you will need to build and deploy\nrelevant modules with:\n\n\nmvn clean install -Pdirectory-ldap,directory-cas,directory-openid -DdeployTo={your runtime server location here}\n\n\n\nIf not using LDAP, of course, you don't need the directory-ldap module but CAS alone will require deploying both the\ndirectory-cas and directory-openid modules.\n\n\nStep 4\n\n\nFinally, you will need to configure a UserProvider to look up users as identified by CAS, for example see:\n\n\nUniversity of Saskatchewan CAS and LDAP integration",
            "title": "Central Authentication Service (CAS)"
        },
        {
            "location": "/configuration/security.cas/#configure-central-authentication-service-cas",
            "text": "",
            "title": "Configure Central Authentication Service (CAS)"
        },
        {
            "location": "/configuration/security.cas/#cas",
            "text": "Many campuses use some kind of single sign on, such as JASIG's Central Authentication Service, or CAS. This guide\ndescribes how to integrate Opencast into such a system.",
            "title": "CAS"
        },
        {
            "location": "/configuration/security.cas/#step-1",
            "text": "First, install the optional CAS feature. Via the Karaf console, this can be done like this:  feature:install opencast-contrib-cas",
            "title": "Step 1"
        },
        {
            "location": "/configuration/security.cas/#step-2",
            "text": "To configure Opencast to use CAS, simply replace the default  mh_default_org.xml  with the contents of security_sample_cas.xml , available in the Opencast source. You must modify several settings in the sample to point to\nyour CAS server:  <bean id=\"casEntryPoint\" class=\"org.springframework.security.cas.web.CasAuthenticationEntryPoint\">\n  <property name=\"loginUrl\" value=\"https://auth-test.berkeley.edu/cas/login\"/>\n  <property name=\"serviceProperties\" ref=\"serviceProperties\"/>\n</bean>\n\n<bean id=\"casAuthenticationProvider\" class=\"org.springframework.security.cas.authentication.CasAuthenticationProvider\">\n  <property name=\"userDetailsService\" ref=\"userDetailsService\"/>\n  <property name=\"serviceProperties\" ref=\"serviceProperties\" />\n  <property name=\"ticketValidator\">\n    <bean class=\"org.jasig.cas.client.validation.Cas20ServiceTicketValidator\">\n      <constructor-arg index=\"0\" value=\"https://auth-test.berkeley.edu/cas\" />\n    </bean>\n  </property>\n  <property name=\"key\" value=\"cas\"/>\n</bean>  You will also need to set the public URL for your Opencast server:  <bean id=\"serviceProperties\" class=\"org.springframework.security.cas.ServiceProperties\">\n  <property name=\"service\" value=\"http://localhost:8080/j_spring_cas_security_check\"/>\n  <property name=\"sendRenew\" value=\"false\"/>\n</bean>",
            "title": "Step 2"
        },
        {
            "location": "/configuration/security.cas/#step-3",
            "text": "Assuming you are using Opencast version 1.4 and are using LDAP for user provisioning, you will need to build and deploy\nrelevant modules with:  mvn clean install -Pdirectory-ldap,directory-cas,directory-openid -DdeployTo={your runtime server location here}  If not using LDAP, of course, you don't need the directory-ldap module but CAS alone will require deploying both the\ndirectory-cas and directory-openid modules.",
            "title": "Step 3"
        },
        {
            "location": "/configuration/security.cas/#step-4",
            "text": "Finally, you will need to configure a UserProvider to look up users as identified by CAS, for example see:  University of Saskatchewan CAS and LDAP integration",
            "title": "Step 4"
        },
        {
            "location": "/configuration/security.ldap/",
            "text": "LDAP Authentication and Authorization (without CAS)\n\n\n\n\nThis page describes how to use only an LDAP server to authenticate users in Opencast. If you just want to use LDAP\n\n\nas an identity provider for another authentication mechanism, such as a CAS server, this guide does not apply to\n\n\nyou.\n\n\nYou may find the instructions to configure an LDAP-backed CAS server \nhere\n.\n\n\n\n\nAuthentication\n\n\nIn order to authenticate your Opencast users using an LDAP server, you must follow the following steps:\n\n\nStep 1\n\n\nIn a single-tenant deployment, your \nsecurity.xml\n file is under \nOPENCAST_HOME/security/mh_default_org.xml\n. In an\nRPM-based installation, it is located in \n/etc/opencast/security/mh_default_org.xml\n. You should make a backup copy of\nthe file and substitute it by the sample file named \nsecurity_sample_ldap.xml-example\n. In other words:\n\n\n$> cd etc/security\n$> mv mh_default_org.xml mh_default_org.xml.old\n$> cp security_sample_ldap.xml-example mh_default_org.xml\n\n\n\nThe sample file should be exactly the same as the default security file, except for the parts only relevant to the\nLDAP. If you have done custom modifications to your security file, make sure to incorporate them to the new file, too.\n\n\nStep 2\n\n\nAdd the necessary configuration values to the LDAP section of the new security file. The comments should be\nself-explanatory.\n\n\nThe first relevant section defines a context source. This contains the basic login information that enables Opencast to\nrequest user information to the LDAP server in order to authenticate them.\n\n\n<bean id=\"contextSource\"\n  class=\"org.springframework.security.ldap.DefaultSpringSecurityContextSource\">\n  <!-- URL of the LDAP server -->\n  <constructor-arg value=\"ldap://myldapserver:myport\" />\n  <!-- \"Distinguished name\" for the unprivileged user -->\n  <!-- This user is merely to perform searches in the LDAP to find the users to login -->\n  <property name=\"userDn\" value=\"uid=user-id,ou=GroupName,dc=my-institution,dc=country\" />\n  <!-- Password of the user above -->\n  <property name=\"password\" value=\"mypassword\" />\n</bean>\n\n\n\nThe next part tells the system how to search for users in the LDAP server:\n\n\n<constructor-arg>\n  <bean class=\"org.springframework.security.ldap.authentication.BindAuthenticator\">\n    <constructor-arg ref=\"contextSource\" />\n    <property name=\"userDnPatterns\">\n      <list>\n        <!-- Dn patterns to search for valid users. Multiple \"<value>\" tags are allowed -->\n        <value>uid={0},ou=Group,dc=my-institution,dc=country</value>\n      </list>\n    </property>\n    <!-- If your user IDs are not part of the user Dn's, you can use a search filter to find them -->\n    <!-- This property can be used together with the \"userDnPatterns\" above -->\n    <!--\n    <property name=\"userSearch\">\n      <bean name=\"filterUserSearch\" class=\"org.springframework.security.ldap.search.FilterBasedLdapUserSearch\">\n        < ! - - Base Dn from where the users will be searched for - - >\n        <constructor-arg index=\"0\" value=\"ou=GroupName,dc=my-institution,dc=country\" />\n        < ! - - Filter to located valid users. Use {0} as a placeholder for the login name - - >\n        <constructor-arg index=\"1\" value=\"(uid={0})\" />\n        <constructor-arg ref=\"contextSource\" />\n      </bean>\n    </property>\n    -->\n  </bean>\n</constructor-arg>\n\n\n\nAs the previous snippet shows, there are two alternative ways to find users in your LDAP:\n\n\n\n\nUsing the property userDnPatterns:\n This property accepts a list of search patterns to match against the user's\nDN. The patterns will be tried in order until a match is found. The placeholder \n{0}\n can be used to represent the\nusername in such patterns.\n\n\nUsing a userSearch filter:\n With the previous approach, it is not possible to find users whose login name is not\npart of their DN. In such cases, you can use the userSearch property, that allows you to search the users based on a\nfilter. The filter requires three parameters:\n\n\nThe first parameter specifies the \"root node\" where the searches will start from.\n\n\nThe second one specifies the filter, where, again, the placeholder \n{0}\n will be substituted by the username\nduring the searches.\n\n\nThe third parameter should be the contextSource defined above.\n\n\n\n\n\n\n\n\nBoth methods are not mutually exclusive --i.e. both can be activated at the same time, even though only the first one\nis uncommented in the sample file because it is the most usual.\n\n\nAuthorization\n\n\nNow the system knows all the information necessary to authenticate users against the LDAP, but also need some\nauthorization information, to tell which services the user is allowed to use and which resources is allowed to see\nand/or modify.\n\n\nStep 1\n\n\nThe following snippet in the \nsecurity.xml\n file provides the necessary information to map LDAP attributes to roles\nduring authentication and in single-machine environments.\n\n\n<constructor-arg>\n  <!-- Get the authorities (roles) according to a certain attribute in the authenticated user -->\n  <bean class=\"org.opencastproject.kernel.userdirectory.LdapAttributeAuthoritiesPopulator\">\n    <constructor-arg>\n      <!-- List of attribute names in the user from which roles will be created -->\n      <!-- The specified attributes must meet few requirements:\n             * They may be single-valued or multivalued\n             * They may contain single roles or comma-separated role lists\n\n           The attributes read will be processed in the following way:\n             * Whitespace will converted to underscores (\"_\")\n             * Sequences of underscores (\"_\") will be collapsed into a single one.\n      -->\n      <list>\n        <value>attributeName1</value>\n        <value>attributeName2</value>\n      </list>\n    </constructor-arg>\n    <!-- Whether or not to make all the extracted roles uppercase. 'true' by default. -->\n    <!-- <property name=\"convertToUpperCase\" value=\"true\"/> -->\n\n    <!-- Define a prefix to be appended to every role extracted from the LDAP. -->\n    <!-- The convertToUpperCase property also affects the prefix -->\n    <!-- <property name=\"rolePrefix\" value=\"\"/> -->\n\n    <!-- Additional roles that will be added to those obtained from the attributes above -->\n    <!-- The convertToUpperCase and rolePrefix properties also affect the roles indicated here-->\n    <!-- <property name=\"additionalAuthorities\">\n      <set>\n        <value>additional_authority_1</value>\n        <value>additional_authority_2</value>\n      </set>\n    </property> -->\n  </bean>\n</constructor-arg>\n\n\n\nAs you can see, the sample file is quite self-explanatory: a list of attribute names is provided, each of which will\ncontain the roles this user will be assigned to. These attributes may be multivalued (i.e. they may appear several\ntimes in the user) and/or they may contain a comma-separated list of roles. The syntax of the roles found will be\nchecked so that they contain no whitespaces (they will be substituted by underscore characters  -\"_\"-) and all the\nresulting underscore sequences will be collapsed to a single character. The resulting roles will be converted to\nuppercase and finally assigned to the user.\n\n\nApart from the previous processing, a series of properties may be used to further customize the role syntax. In\nparticular, a prefix can be defined, which will be appended to every role obtained using the process described above.\nThe role capitalisation can also be disabled if desired.\n\n\nFinally, it is possible to define an additional set of roles that will be appended to the list obtained by inspecting\nthe LDAP according to the configuration. In other words, every user will have, at least, the roles defined in this\nlist. The roles will be processed in the same way as the roles obtained from the LDAP server.\n\n\nStep 2\n\n\n\n\nThis step is only necessary in Opencast deployments along multiple machines.\n\n\n\n\nMake a copy of the file \netc/org.opencastproject.userdirectory.ldap.cfg.template\n in the same directory and name it as:\n\n\norg.opencastproject.userdirectory.ldap-<ID>.cfg\n\n\n\n, where \n<ID>\n is a unique indentifier for each LDAP connection. Edit the parameters in the file with the same\ninformation as in the \nsecurity.xml\n file. The contents should be self-explanatory.\n\n\nCombination with Existing authorization Mechanisms\n\n\nIn the default configuration included in the \nsecurity_sample_ldap.xml-example\n file, the LDAP is tried after the\nnormal authorization mechanisms (i.e. the database). This means that if a user is present in both the database and the\nLDAP, the database will take precedence. The order is determined by the order in which the authentication providers\nappear on the security file. The relevant snippet is this:\n\n\n<sec:authentication-manager alias=\"authenticationManager\">\n  <sec:authentication-provider user-service-ref=\"userDetailsService\">  # \\\n    <sec:password-encoder hash=\"md5\">                                  # |\n      <sec:salt-source user-property=\"username\" />                     # -> These lines must be moved as a block\n    </sec:password-encoder>                                            # |\n  </sec:authentication-provider>                                       # /\n  <sec:authentication-provider ref=\"ldapAuthProvider\" />               # The LDAP provider appears in the second position, therefore it is the second provider to consider\n</sec:authentication-manager>\n\n\n\nBy switching the position of the authentication providers, you will give them more or less priority.\n\n\nAdding more LDAP servers\n\n\nMore LDAP servers can be added to the configuration by including the LDAP-related sections as many times as necessary\nwith their corresponding configurations. All the defined authentication providers must be added to the providers list\nat the bottom of the file. Please see the example below:\n\n\n<bean id=\"contextSource\"\n  class=\"org.springframework.security.ldap.DefaultSpringSecurityContextSource\">\n  <!-- URL of the LDAP server -->\n  <constructor-arg value=\"ldap://myldapserver:myport\" />\n  <!-- \"Distinguished name\" for the unprivileged user -->\n  <!-- This user is merely to perform searches in the LDAP to find the users to login -->\n  <property name=\"userDn\" value=\"uid=user-id,ou=GroupName,dc=my-institution,dc=country\" />\n  <!-- Password of the user above -->\n  <property name=\"password\" value=\"mypassword\" />\n</bean>\n\n<bean id=\"ldapAuthProvider\"\n  class=\"org.springframework.security.ldap.authentication.LdapAuthenticationProvider\">\n  <constructor-arg>\n    <bean\n      class=\"org.springframework.security.ldap.authentication.BindAuthenticator\">\n      <constructor-arg ref=\"contextSource\" />\n      <property name=\"userDnPatterns\">\n        <list>\n          <!-- Dn patterns to search for valid users. Multiple \"<value>\" tags are allowed -->\n          <value>uid={0},ou=Group,dc=my-institution,dc=country</value>\n        </list>\n     </property>\n     <!-- If your user IDs are not part of the user Dn's, you can use a search filter to find them -->\n     <!-- This property can be used together with the \"userDnPatterns\" above -->\n     <!--\n     <property name=\"userSearch\">\n       <bean name=\"filterUserSearch\" class=\"org.springframework.security.ldap.search.FilterBasedLdapUserSearch\">\n         < ! - - Base Dn from where the users will be searched for - - >\n         <constructor-arg index=\"0\" value=\"ou=GroupName,dc=my-institution,dc=country\" />\n         < ! - - Filter to located valid users. Use {0} as a placeholder for the login name - - >\n         <constructor-arg index=\"1\" value=\"(uid={0})\" />\n         <constructor-arg ref=\"contextSource\" />\n       </bean>\n      </property>\n     -->\n    </bean>\n  </constructor-arg>\n  <!-- Defines how the user attributes are converted to authorities (roles) -->\n  <constructor-arg>\n    <!-- Get the authorities (roles) according to a certain attribute in the authenticated user -->\n    <bean class=\"org.opencastproject.kernel.userdirectory.LdapAttributeAuthoritiesPopulator\">\n      <constructor-arg>\n        <!-- List of attribute names in the user from which roles will be created -->\n        <!-- The specified attributes must meet few requirements:\n               * They may be single-valued or multivalued\n               * They may contain single roles or comma-separated role lists\n\n          The attributes read will be processed in the following way:\n               * Whitespace will converted to underscores (\"_\")\n               * Sequences of underscores (\"_\") will be collapsed into a single one.\n        -->\n        <list>\n          <value>attributeName1</value>\n          <value>attributeName2</value>\n        </list>\n      </constructor-arg>\n      <!-- Whether or not to make all the extracted roles uppercase. 'true' by default. -->\n      <!-- <property name=\"convertToUpperCase\" value=\"true\"/> -->\n\n      <!-- Define a prefix to be appended to every role extracted from the LDAP. -->\n      <!-- The convertToUpperCase property also affects the prefix -->\n      <!-- <property name=\"rolePrefix\" value=\"\"/> -->\n\n      <!-- Additional roles that will be added to those obtained from the attributes above -->\n      <!-- The convertToUpperCase and rolePrefix properties also affect the roles indicated here-->\n      <!-- <property name=\"additionalAuthorities\">\n        <set>\n          <value>additional_authority_1</value>\n          <value>additional_authority_2</value>\n        </set>\n      </property>\n      -->\n    </bean>\n  </constructor-arg>\n</bean>\n\n<!-- PLEASE NOTE: The ID below must be changed for each context source instance -->\n<bean id=\"contextSource2\"\n  class=\"org.springframework.security.ldap.DefaultSpringSecurityContextSource\">\n  <constructor-arg value=\"ldap://myldapserver:myport\" />\n  <property name=\"userDn\" value=\"uid=user-id,ou=GroupName,dc=my-institution,dc=country\" />\n  <property name=\"password\" value=\"mypassword\" />\n</bean>\n\n<!-- PLEASE NOTE: The ID below must be changed for each LDAP authentication provider instance -->\n<bean id=\"ldapAuthProvider2\"\n  class=\"org.springframework.security.ldap.authentication.LdapAuthenticationProvider\">\n  <constructor-arg>\n    <bean\n      class=\"org.springframework.security.ldap.authentication.BindAuthenticator\">\n      <!-- PLEASE NOTE: the ref below must match the corresponding context source ID -->\n      <constructor-arg ref=\"contextSource2\" />\n       <property name=\"userDnPatterns\">\n        <list>\n          <value>uid={0},ou=OtherGroup,dc=my-other-institution,dc=other-country</value>\n        </list>\n       </property>\n    <property name=\"userSearch\">\n      <bean name=\"filterUserSearch\" class=\"org.springframework.security.ldap.search.FilterBasedLdapUserSearch\">\n        <constructor-arg index=\"0\" value=\"ou=OtherGroup,dc=my-other-institution,dc=other-country\" />\n        <constructor-arg index=\"1\" value=\"(uid={0})\" />\n             <!-- PLEASE NOTE: the ref below must match the corresponding context source ID -->\n        <constructor-arg ref=\"contextSource2\" />\n         </bean>\n       </property>\n     </bean>\n  </constructor-arg>\n  <constructor-arg>\n    <bean class=\"org.opencastproject.kernel.userdirectory.LdapAttributeAuthoritiesPopulator\">\n      <constructor-arg>\n        <list>\n          <value>otherAttributeName1</value>\n          <value>otherAttributeName2</value>\n        </list>\n      </constructor-arg>\n   <property name=\"rolePrefix\" value=\"my_prefix_\"/>\n   <property name=\"additionalAuthorities\">\n     <set>\n       <value>default_role_1</value>\n       <value>default_role_2</value>\n     </set>\n   </property>\n    </bean>\n  </constructor-arg>\n</bean>\n\n<!-- [ ... SKIPPED LINES ... ] -->\n\n<sec:authentication-manager alias=\"authenticationManager\">\n  <sec:authentication-provider user-service-ref=\"userDetailsService\">\n    <sec:password-encoder hash=\"md5\">\n      <sec:salt-source user-property=\"username\" />\n    </sec:password-encoder>\n  </sec:authentication-provider>\n  <!-- PLEASE NOTE: In this example, the 2nd LDAP provider defined in the file has more priority that the first one -->\n  <sec:authentication-provider ref=\"ldapAuthProvider2\" />\n  <sec:authentication-provider ref=\"ldapAuthProvider\" />\n</sec:authentication-manager>\n\n\n\nIn multi-machine installations, remember to include the additional LDAP server(s) in the\n\netc/factories/org.opencastproject.userdirectory.ldap.cfg\n file.",
            "title": "LDAP Authentication and Authorization (without CAS)"
        },
        {
            "location": "/configuration/security.ldap/#ldap-authentication-and-authorization-without-cas",
            "text": "This page describes how to use only an LDAP server to authenticate users in Opencast. If you just want to use LDAP  as an identity provider for another authentication mechanism, such as a CAS server, this guide does not apply to  you.  You may find the instructions to configure an LDAP-backed CAS server  here .",
            "title": "LDAP Authentication and Authorization (without CAS)"
        },
        {
            "location": "/configuration/security.ldap/#authentication",
            "text": "In order to authenticate your Opencast users using an LDAP server, you must follow the following steps:",
            "title": "Authentication"
        },
        {
            "location": "/configuration/security.ldap/#step-1",
            "text": "In a single-tenant deployment, your  security.xml  file is under  OPENCAST_HOME/security/mh_default_org.xml . In an\nRPM-based installation, it is located in  /etc/opencast/security/mh_default_org.xml . You should make a backup copy of\nthe file and substitute it by the sample file named  security_sample_ldap.xml-example . In other words:  $> cd etc/security\n$> mv mh_default_org.xml mh_default_org.xml.old\n$> cp security_sample_ldap.xml-example mh_default_org.xml  The sample file should be exactly the same as the default security file, except for the parts only relevant to the\nLDAP. If you have done custom modifications to your security file, make sure to incorporate them to the new file, too.",
            "title": "Step 1"
        },
        {
            "location": "/configuration/security.ldap/#step-2",
            "text": "Add the necessary configuration values to the LDAP section of the new security file. The comments should be\nself-explanatory.  The first relevant section defines a context source. This contains the basic login information that enables Opencast to\nrequest user information to the LDAP server in order to authenticate them.  <bean id=\"contextSource\"\n  class=\"org.springframework.security.ldap.DefaultSpringSecurityContextSource\">\n  <!-- URL of the LDAP server -->\n  <constructor-arg value=\"ldap://myldapserver:myport\" />\n  <!-- \"Distinguished name\" for the unprivileged user -->\n  <!-- This user is merely to perform searches in the LDAP to find the users to login -->\n  <property name=\"userDn\" value=\"uid=user-id,ou=GroupName,dc=my-institution,dc=country\" />\n  <!-- Password of the user above -->\n  <property name=\"password\" value=\"mypassword\" />\n</bean>  The next part tells the system how to search for users in the LDAP server:  <constructor-arg>\n  <bean class=\"org.springframework.security.ldap.authentication.BindAuthenticator\">\n    <constructor-arg ref=\"contextSource\" />\n    <property name=\"userDnPatterns\">\n      <list>\n        <!-- Dn patterns to search for valid users. Multiple \"<value>\" tags are allowed -->\n        <value>uid={0},ou=Group,dc=my-institution,dc=country</value>\n      </list>\n    </property>\n    <!-- If your user IDs are not part of the user Dn's, you can use a search filter to find them -->\n    <!-- This property can be used together with the \"userDnPatterns\" above -->\n    <!--\n    <property name=\"userSearch\">\n      <bean name=\"filterUserSearch\" class=\"org.springframework.security.ldap.search.FilterBasedLdapUserSearch\">\n        < ! - - Base Dn from where the users will be searched for - - >\n        <constructor-arg index=\"0\" value=\"ou=GroupName,dc=my-institution,dc=country\" />\n        < ! - - Filter to located valid users. Use {0} as a placeholder for the login name - - >\n        <constructor-arg index=\"1\" value=\"(uid={0})\" />\n        <constructor-arg ref=\"contextSource\" />\n      </bean>\n    </property>\n    -->\n  </bean>\n</constructor-arg>  As the previous snippet shows, there are two alternative ways to find users in your LDAP:   Using the property userDnPatterns:  This property accepts a list of search patterns to match against the user's\nDN. The patterns will be tried in order until a match is found. The placeholder  {0}  can be used to represent the\nusername in such patterns.  Using a userSearch filter:  With the previous approach, it is not possible to find users whose login name is not\npart of their DN. In such cases, you can use the userSearch property, that allows you to search the users based on a\nfilter. The filter requires three parameters:  The first parameter specifies the \"root node\" where the searches will start from.  The second one specifies the filter, where, again, the placeholder  {0}  will be substituted by the username\nduring the searches.  The third parameter should be the contextSource defined above.     Both methods are not mutually exclusive --i.e. both can be activated at the same time, even though only the first one\nis uncommented in the sample file because it is the most usual.",
            "title": "Step 2"
        },
        {
            "location": "/configuration/security.ldap/#authorization",
            "text": "Now the system knows all the information necessary to authenticate users against the LDAP, but also need some\nauthorization information, to tell which services the user is allowed to use and which resources is allowed to see\nand/or modify.",
            "title": "Authorization"
        },
        {
            "location": "/configuration/security.ldap/#step-1_1",
            "text": "The following snippet in the  security.xml  file provides the necessary information to map LDAP attributes to roles\nduring authentication and in single-machine environments.  <constructor-arg>\n  <!-- Get the authorities (roles) according to a certain attribute in the authenticated user -->\n  <bean class=\"org.opencastproject.kernel.userdirectory.LdapAttributeAuthoritiesPopulator\">\n    <constructor-arg>\n      <!-- List of attribute names in the user from which roles will be created -->\n      <!-- The specified attributes must meet few requirements:\n             * They may be single-valued or multivalued\n             * They may contain single roles or comma-separated role lists\n\n           The attributes read will be processed in the following way:\n             * Whitespace will converted to underscores (\"_\")\n             * Sequences of underscores (\"_\") will be collapsed into a single one.\n      -->\n      <list>\n        <value>attributeName1</value>\n        <value>attributeName2</value>\n      </list>\n    </constructor-arg>\n    <!-- Whether or not to make all the extracted roles uppercase. 'true' by default. -->\n    <!-- <property name=\"convertToUpperCase\" value=\"true\"/> -->\n\n    <!-- Define a prefix to be appended to every role extracted from the LDAP. -->\n    <!-- The convertToUpperCase property also affects the prefix -->\n    <!-- <property name=\"rolePrefix\" value=\"\"/> -->\n\n    <!-- Additional roles that will be added to those obtained from the attributes above -->\n    <!-- The convertToUpperCase and rolePrefix properties also affect the roles indicated here-->\n    <!-- <property name=\"additionalAuthorities\">\n      <set>\n        <value>additional_authority_1</value>\n        <value>additional_authority_2</value>\n      </set>\n    </property> -->\n  </bean>\n</constructor-arg>  As you can see, the sample file is quite self-explanatory: a list of attribute names is provided, each of which will\ncontain the roles this user will be assigned to. These attributes may be multivalued (i.e. they may appear several\ntimes in the user) and/or they may contain a comma-separated list of roles. The syntax of the roles found will be\nchecked so that they contain no whitespaces (they will be substituted by underscore characters  -\"_\"-) and all the\nresulting underscore sequences will be collapsed to a single character. The resulting roles will be converted to\nuppercase and finally assigned to the user.  Apart from the previous processing, a series of properties may be used to further customize the role syntax. In\nparticular, a prefix can be defined, which will be appended to every role obtained using the process described above.\nThe role capitalisation can also be disabled if desired.  Finally, it is possible to define an additional set of roles that will be appended to the list obtained by inspecting\nthe LDAP according to the configuration. In other words, every user will have, at least, the roles defined in this\nlist. The roles will be processed in the same way as the roles obtained from the LDAP server.",
            "title": "Step 1"
        },
        {
            "location": "/configuration/security.ldap/#step-2_1",
            "text": "This step is only necessary in Opencast deployments along multiple machines.   Make a copy of the file  etc/org.opencastproject.userdirectory.ldap.cfg.template  in the same directory and name it as:  org.opencastproject.userdirectory.ldap-<ID>.cfg  , where  <ID>  is a unique indentifier for each LDAP connection. Edit the parameters in the file with the same\ninformation as in the  security.xml  file. The contents should be self-explanatory.",
            "title": "Step 2"
        },
        {
            "location": "/configuration/security.ldap/#combination-with-existing-authorization-mechanisms",
            "text": "In the default configuration included in the  security_sample_ldap.xml-example  file, the LDAP is tried after the\nnormal authorization mechanisms (i.e. the database). This means that if a user is present in both the database and the\nLDAP, the database will take precedence. The order is determined by the order in which the authentication providers\nappear on the security file. The relevant snippet is this:  <sec:authentication-manager alias=\"authenticationManager\">\n  <sec:authentication-provider user-service-ref=\"userDetailsService\">  # \\\n    <sec:password-encoder hash=\"md5\">                                  # |\n      <sec:salt-source user-property=\"username\" />                     # -> These lines must be moved as a block\n    </sec:password-encoder>                                            # |\n  </sec:authentication-provider>                                       # /\n  <sec:authentication-provider ref=\"ldapAuthProvider\" />               # The LDAP provider appears in the second position, therefore it is the second provider to consider\n</sec:authentication-manager>  By switching the position of the authentication providers, you will give them more or less priority.",
            "title": "Combination with Existing authorization Mechanisms"
        },
        {
            "location": "/configuration/security.ldap/#adding-more-ldap-servers",
            "text": "More LDAP servers can be added to the configuration by including the LDAP-related sections as many times as necessary\nwith their corresponding configurations. All the defined authentication providers must be added to the providers list\nat the bottom of the file. Please see the example below:  <bean id=\"contextSource\"\n  class=\"org.springframework.security.ldap.DefaultSpringSecurityContextSource\">\n  <!-- URL of the LDAP server -->\n  <constructor-arg value=\"ldap://myldapserver:myport\" />\n  <!-- \"Distinguished name\" for the unprivileged user -->\n  <!-- This user is merely to perform searches in the LDAP to find the users to login -->\n  <property name=\"userDn\" value=\"uid=user-id,ou=GroupName,dc=my-institution,dc=country\" />\n  <!-- Password of the user above -->\n  <property name=\"password\" value=\"mypassword\" />\n</bean>\n\n<bean id=\"ldapAuthProvider\"\n  class=\"org.springframework.security.ldap.authentication.LdapAuthenticationProvider\">\n  <constructor-arg>\n    <bean\n      class=\"org.springframework.security.ldap.authentication.BindAuthenticator\">\n      <constructor-arg ref=\"contextSource\" />\n      <property name=\"userDnPatterns\">\n        <list>\n          <!-- Dn patterns to search for valid users. Multiple \"<value>\" tags are allowed -->\n          <value>uid={0},ou=Group,dc=my-institution,dc=country</value>\n        </list>\n     </property>\n     <!-- If your user IDs are not part of the user Dn's, you can use a search filter to find them -->\n     <!-- This property can be used together with the \"userDnPatterns\" above -->\n     <!--\n     <property name=\"userSearch\">\n       <bean name=\"filterUserSearch\" class=\"org.springframework.security.ldap.search.FilterBasedLdapUserSearch\">\n         < ! - - Base Dn from where the users will be searched for - - >\n         <constructor-arg index=\"0\" value=\"ou=GroupName,dc=my-institution,dc=country\" />\n         < ! - - Filter to located valid users. Use {0} as a placeholder for the login name - - >\n         <constructor-arg index=\"1\" value=\"(uid={0})\" />\n         <constructor-arg ref=\"contextSource\" />\n       </bean>\n      </property>\n     -->\n    </bean>\n  </constructor-arg>\n  <!-- Defines how the user attributes are converted to authorities (roles) -->\n  <constructor-arg>\n    <!-- Get the authorities (roles) according to a certain attribute in the authenticated user -->\n    <bean class=\"org.opencastproject.kernel.userdirectory.LdapAttributeAuthoritiesPopulator\">\n      <constructor-arg>\n        <!-- List of attribute names in the user from which roles will be created -->\n        <!-- The specified attributes must meet few requirements:\n               * They may be single-valued or multivalued\n               * They may contain single roles or comma-separated role lists\n\n          The attributes read will be processed in the following way:\n               * Whitespace will converted to underscores (\"_\")\n               * Sequences of underscores (\"_\") will be collapsed into a single one.\n        -->\n        <list>\n          <value>attributeName1</value>\n          <value>attributeName2</value>\n        </list>\n      </constructor-arg>\n      <!-- Whether or not to make all the extracted roles uppercase. 'true' by default. -->\n      <!-- <property name=\"convertToUpperCase\" value=\"true\"/> -->\n\n      <!-- Define a prefix to be appended to every role extracted from the LDAP. -->\n      <!-- The convertToUpperCase property also affects the prefix -->\n      <!-- <property name=\"rolePrefix\" value=\"\"/> -->\n\n      <!-- Additional roles that will be added to those obtained from the attributes above -->\n      <!-- The convertToUpperCase and rolePrefix properties also affect the roles indicated here-->\n      <!-- <property name=\"additionalAuthorities\">\n        <set>\n          <value>additional_authority_1</value>\n          <value>additional_authority_2</value>\n        </set>\n      </property>\n      -->\n    </bean>\n  </constructor-arg>\n</bean>\n\n<!-- PLEASE NOTE: The ID below must be changed for each context source instance -->\n<bean id=\"contextSource2\"\n  class=\"org.springframework.security.ldap.DefaultSpringSecurityContextSource\">\n  <constructor-arg value=\"ldap://myldapserver:myport\" />\n  <property name=\"userDn\" value=\"uid=user-id,ou=GroupName,dc=my-institution,dc=country\" />\n  <property name=\"password\" value=\"mypassword\" />\n</bean>\n\n<!-- PLEASE NOTE: The ID below must be changed for each LDAP authentication provider instance -->\n<bean id=\"ldapAuthProvider2\"\n  class=\"org.springframework.security.ldap.authentication.LdapAuthenticationProvider\">\n  <constructor-arg>\n    <bean\n      class=\"org.springframework.security.ldap.authentication.BindAuthenticator\">\n      <!-- PLEASE NOTE: the ref below must match the corresponding context source ID -->\n      <constructor-arg ref=\"contextSource2\" />\n       <property name=\"userDnPatterns\">\n        <list>\n          <value>uid={0},ou=OtherGroup,dc=my-other-institution,dc=other-country</value>\n        </list>\n       </property>\n    <property name=\"userSearch\">\n      <bean name=\"filterUserSearch\" class=\"org.springframework.security.ldap.search.FilterBasedLdapUserSearch\">\n        <constructor-arg index=\"0\" value=\"ou=OtherGroup,dc=my-other-institution,dc=other-country\" />\n        <constructor-arg index=\"1\" value=\"(uid={0})\" />\n             <!-- PLEASE NOTE: the ref below must match the corresponding context source ID -->\n        <constructor-arg ref=\"contextSource2\" />\n         </bean>\n       </property>\n     </bean>\n  </constructor-arg>\n  <constructor-arg>\n    <bean class=\"org.opencastproject.kernel.userdirectory.LdapAttributeAuthoritiesPopulator\">\n      <constructor-arg>\n        <list>\n          <value>otherAttributeName1</value>\n          <value>otherAttributeName2</value>\n        </list>\n      </constructor-arg>\n   <property name=\"rolePrefix\" value=\"my_prefix_\"/>\n   <property name=\"additionalAuthorities\">\n     <set>\n       <value>default_role_1</value>\n       <value>default_role_2</value>\n     </set>\n   </property>\n    </bean>\n  </constructor-arg>\n</bean>\n\n<!-- [ ... SKIPPED LINES ... ] -->\n\n<sec:authentication-manager alias=\"authenticationManager\">\n  <sec:authentication-provider user-service-ref=\"userDetailsService\">\n    <sec:password-encoder hash=\"md5\">\n      <sec:salt-source user-property=\"username\" />\n    </sec:password-encoder>\n  </sec:authentication-provider>\n  <!-- PLEASE NOTE: In this example, the 2nd LDAP provider defined in the file has more priority that the first one -->\n  <sec:authentication-provider ref=\"ldapAuthProvider2\" />\n  <sec:authentication-provider ref=\"ldapAuthProvider\" />\n</sec:authentication-manager>  In multi-machine installations, remember to include the additional LDAP server(s) in the etc/factories/org.opencastproject.userdirectory.ldap.cfg  file.",
            "title": "Adding more LDAP servers"
        },
        {
            "location": "/configuration/stream-security/",
            "text": "Configuration of Stream Security\n\n\nTo get an introduction to stream security before deploying, please read the overview at:\n\n\n\n\nStream Security Overview\n\n\n\n\nIt is important to note that if stream security is enabled, all resources will be signed and protected, even ones that\ndo not have any access restrictions defined in their access control lists. Accessing resources with unsigned URLs will\nnot be possible.\n\n\nOn a high level, to use Stream security, these steps are required:\n\n\n\n\nInstall and configure the URL signing service and signing providers\n\n\nConfigure Opencast services (and, optionally, 3rd party services) that use the signing infrastructure to sign requests\n\n\nInstall and configure verification components\n\n\n\n\nURL Signing Service Installation\n\n\nThere are three modules that are built by default and need to be present on each Opencast node in order to initiate URL\nsigning:\n\n\n\n\nmatterhorn-urlsigning-common\n\n\nmatterhorn-urlsigning-service-api\n\n\nmatterhorn-urlsigning-service-impl\n\n\n\n\nIf these modules are present, the URL signing service will be available, to which the URL signing providers can then\nregister themselves.\n\n\nConfiguration of Signing Providers\n\n\nThe GenericUrlSigningProvider that comes with Opencast has its own configuration file:\n\n\netc/org.opencastproject.security.urlsigning.provider.impl.GenericUrlSigningProvider.cfg\n\n\n\nAll signing providers follow the same configuration structure and support multiple configuration blocks, providing the\nsettings for separate distributions (i.e. download or streaming servers, services or paths).\n\n\nEach configuration block consists of the following items:\n\n\n\n\nKey ID:\n Key identifier, e.g. \ndemoKeyOne\n\n\nKey secret:\n Key value, e.g. \n25DA2BA549CB62EF297977845259A\n. The key-length is not predefined, but a key length of\n  at least 128 bit is recommended. Any larger value will not increase security of the underlying algorithm.\n\n\nURL prefix:\n The URL signing provider will only sign URLs that start with this value. This allows to support\n  multiple distributions and different key pairs.\n\n\n\n\nA typical configuration looks like this:\n\n\nid.1=demoKeyOne\nkey.1=6EDB5EDDCF994B7432C371D7C274F\nurl.1=http://download.opencast.org/engage\n\nid.2=demoKeyTwo\nkey.2=6EDB5EDDCF994B7432C371D7C274F\nurl.2=http://download.opencast.org/custom\n\n\n\nThe properties defined in the configuration file take a numeric suffix that must start at \n1\n and increase in single\nincrements. In the example above these can be seen as: \n.1\n and \n.2\n. As soon as there is a missing number it will stop\nlooking for further entries.\n\n\nNote that id and key form a fixed pair, while the same key can be used in more than one configuration block.\n\n\nConfiguration of URL Signing Timeout Values\n\n\nOnce stream security is turned on by configuring the signing providers, multiple different services within Opencast will\nbe signing URLs, and while some services are signing on behalf of administrative users working in the Opencast\nadministrative user interface, others are signing URLs in order to grant access to learners playing back video content\ni.e. the functionality we have been talking about up to now.\n\n\nThis section explains how to best configure URLs to ensure that they expire at the right time. This might be required if\nthe default valid times do not seem secure enough or is more secure than needed.\n\n\nSigning for external access\n\n\nThe lifetime of the signed URLs can be configured by setting a custom value for the property\n\nurl.signing.expires.seconds\n that defines the validity in seconds. The default valid time is 7200 seconds (2 hours).\nThe signed URLs can also be configured to restrict access to the user\u2019s IP address by setting the property\n\nurl.signing.use.client.ip\n to true. By default this is disabled.\n\n\nOverview of configuration files for services that are able to automatically sign URLs on behalf of users:\n\n\n\n\n\n\n\n\nURLs That Are Signed\n\n\nConfiguration File Name\n\n\n\n\n\n\n\n\n\n\nVideo player content\n\n\norg.opencastproject.security.urlsigning.SigningMediaPackageSerializer.cfg\n\n\n\n\n\n\nAdmin UI links\n\n\norg.opencastproject.adminui.endpoint.OsgiEventEndpoint.cfg\n\n\n\n\n\n\nPreview and editor files\n\n\norg.opencastproject.adminui.endpoint.ToolsEndpoint.cfg\n\n\n\n\n\n\n\n\nThe URLs will be signed by the first signing provider that will accept the URL\u2019s path based upon the signing provider\u2019s\nconfiguration. This makes it flexible to support many different scenarios. For example, we could configure the signing\nprovider to have one key for any URL that begins with one scheme, such as http, which would cover all of the URLs to be\nsigned with a single key. Or it could be configured so that each different scheme and hostname pair would have a\ndifferent keys protecting each host\u2019s URLs separately etc. Having the timing configurations separate from the key\nconfiguration allows the different types of URLs to be signed differently depending on the needs of the users without\nneeding to configure this timing for all of the different keys. \n\n\nSigning for Opencast-internal access\n\n\nSigning of requests for internal use is performed by a core component called \nTrustedHttpClientImpl\n, which is used to\nestablish all internal HTTP connections. More specifically, the HTTP client needs access to internal storage areas such\nas the working file repository as well as to distributed artifacts on the downloads and streaming servers, all of which\nare protected by verification components.\n\n\nThe default expiration time for signed internal requests is 60 seconds. This can be changed by setting a value in\nseconds for the \norg.opencastproject.security.internal.url.signing.duration\n property in the \ncustom.properties\n\nconfiguration file. Since those URLs are signed right before the request is made, the valid time of 60 seconds should be\nsufficiently long.\n\n\nConfiguration of Verification Components\n\n\nThe verification components ensure that only valid and correctly signed URLs are accessible at any given time. URLs\nwhich are not properly signed or have expired will be rejected.\n\n\nOut of the box, Opencast provides an internal verification component:\n\n\n\n\nOpencast internal UrlSigningFilter\n\n\n\n\nThe following section is dedicated to the installation and configuration of the Opencast internal UrlSigningFilter. The\nstream security architecture allows the implementation for URL verification for third-party applications which are not\ncovered in this documentation.\n\n\nConfiguration of Opencast verification filter\n\n\nThe Servlet filter providing the verification of requests to Opencast internal resources is implemented in the bundles:\n\n\n\n\nmatterhorn-urlsigning-verifier-service-api\n\n\nmatterhorn-urlsigning-verifier-service-impl\n\n\n\n\nThe filter uses a set of regular expressions to determine which requests to an Opencast instance need to be verified.\n\n\nInstallation\n\n\nThe bundles are built by default and as soon as they are running in Opencast, the filter is active, and ready to be\nenabled.\n\n\nConfiguration\n\n\nTwo things need to be configured for the Opencast verification filter:\n\n\n\n\nkey pairs used to verify the signatures\n\n\npaths and endpoints that need to be protected\n\n\n\n\nThe configuration is located at:\n\n\netc/org.opencastproject.security.urlsigning.verifier.impl.UrlSigningVerifierImpl.cfg\n\n\n\nFirst of all, the key pairs used to sign must be configured in order to allow the filter to verify the signatures. More\nthan one key pair can be defined by increasing the counter (1, 2, 3, ...) in steps of 1. If you miss any numbers it will\nstop looking for further configurations.\n\n\nExample:\n\n\nid.1=demoKeyOne\nkey.1=6EDB5EDDCF994B7432C371D7C274F\n\nid.2=demoKeyTwo\nkey.2=C843C21ECF59F2B38872A1BCAA774\n\n\n\nThe entries in this file need to have the same values for the signing providers configuration.\n\n\nThe second step is to configure the filter defining the endpoints to be protected. The configuration file is located at:\n\n\netc/org.opencastproject.security.urlsigning.filter.UrlSigningFilter.cfg\n\n\n\nThe configuration defaults to a set of regular expressions which match all of the endpoints that serve files, and avoid\nprotecting endpoints that only serve data. Therefore, the remaining step is enabling the filter by setting the property\n\nenabled\n to \ntrue\n and determining whether strict or non-strict verification of the resource is required.\n\n\nNote that strict verification of resources means the entire URL will be considered when comparing the incoming request\nfor a resource against the policy, including the scheme (http, https, etc.), hostname and port. If turned off, only the\npath to the resource will be considered. So if the resource \nhttp://httpdserver:8080/the/full/path/video.mp4\n is\nrequested, only the \n/the/full/path/video.mp4\n part of the URL will be checked against the policy\u2019s path. As mentioned\nbefore, this is useful when using a load balancer so that the requested host name does not have to match the actual\nhostname or if a video player is rewriting requests, e.g. by inserting the port number.\n\n\nExample:\n\n\nenabled=true\n\nstrict=true\n\nurl.regex.1=.*files\\/collection\\/.*\nurl.regex.2=.*files\\/mediapackage\\/.*\nurl.regex.3=(?\\=(.*staticfiles.*))(?=^(?!.*staticfiles.*url|.*docs.*).*$)(.*)\nurl.regex.4=.*archive\\/archive\\/mediapackage\\/.*\\/.*\\/.*\nurl.regex.5=.*static.*\n\n\n\nTesting\n\n\nOnce all components of Stream Security are installed and properly configured, it is important to verify that the system\nis working as expected. It is especially important to try to access resources that should \nnot\n be accessible.\n\n\nThere are ways to test in a structured way which will be explained below.\n\n\nCreating Signed URLs with Signing Endpoint\n\n\nThe signing service provides a REST endpoint, which allows for the signing of arbitrary URLs. For manual use it is\nrecommended to visit the endpoint\u2019s documentation page at \nhttp://localhost:8080/signing/docs\n.\n\n\nIs the URL accepted?\n\n\nCheck if the URL to be signed is accepted by the signing service (or by one of its signing providers respectively) by\nusing the \n/signing/accepts\n endpoint. If that is not the case, the configuration of the signing providers should be\nchecked again to ensure that at least one signing provider is responsible for the URL in question.\n\n\nIf the service is fully operational, the response code will be \n200 OK\n and the response body either \ntrue\n (accepted)\nor \nfalse\n (refused).\n\n\nSigning the URL\n\n\nOn the same documentation page URLs can be signed using the \n/signing/sign\n endpoint, and the access policy may be\nspecified in that form as well. With this, several scenarios can be tested. Examples are:\n\n\n\n\nURLs that have already expired or will expire at a known date\n\n\nURLs that are not yet valid (if you provided a validFrom data in the access policy)\n\n\nURLs that are missing some or all of the signing parameters (policy, keyId or signature)\n\n\nURLs that are attempting to use signing parameters (policy and signature) from a different signed URL\n\n\n\n\nVerifying the URL\n\n\nThe signed URLs can then be passed to the appropriate testing tool (web browser, cURL, player, \u2026) to test the\nfunctionality of the verification component(s). The following table is the return codes associated with different\nrejection conditions:\n\n\n\n\n\n\n\n\nCase\n\n\nReturn Code\n\n\n\n\n\n\n\n\n\n\nIf any of the query string parameters are missing or are the wrong case / spelt incorrectly\n\n\nBad Request (400)\n\n\n\n\n\n\nIf any of the required policy variables are missing\n\n\nBad Request (400)\n\n\n\n\n\n\nNo encryption key that matches the KeyID known by the plugin\n\n\nBad Request (400)\n\n\n\n\n\n\nThe Policy and Signature don\u2019t match in any way\n\n\nForbidden (403)\n\n\n\n\n\n\nIf client IP is specified and doesn\u2019t match\n\n\nForbidden (403)\n\n\n\n\n\n\nThe current time has passed the DateGreaterThan, the time the URL expires\n\n\nGone (410)\n\n\n\n\n\n\nThe current time is before the DateLessThan, the time the URL becomes available\n\n\nGone (410)\n\n\n\n\n\n\n\n\nThe components that verify a URL is signed will run before a request is checked to be valid, so if a non-existent URL is\nsigned for example, the above conditions will need to be fixed before a missing (404) response code will be returned.\n\n\nInspect policy\n\n\nThe generated policy which is added to the signed URLs can be inspected. It needs to be decoded from Base64 and the\nresult must be a JSON document that contains exactly the values which have been passed during signing.\n\n\nDecoding this Base64 encoded policy\n\n\neyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRh\ndGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0\n\n\n\n\u2026would result in this JSON document (policy):\n\n\n{\n  \"Statement\":{\n    \"Resource\":\"http:\\/\\/opencast.org\\/engage\\/resource.mp4\",\n    \"Condition\":{\n      \"DateLessThan\":1425170777000,\n      \"DateGreaterThan\":1425084379000,\n      \"IpAddress\":\"10.0.0.1\"\n    }\n  }\n}\n\n\n\n\nInspecting and modifying the policy is useful for advanced testing, such as:\n\n\n\n\nURLs where the policy was modified after signing\n\n\nURLs where the policy was modified and resigned with a different key\n\n\n\n\nFurther information\n\n\nFor an overview of Stream Security:\n\n\n\n\nStream Security Overview\n\n\n\n\nFor further developer information, please have a look at the stream security section in the developer guide.",
            "title": "Stream Security"
        },
        {
            "location": "/configuration/stream-security/#configuration-of-stream-security",
            "text": "To get an introduction to stream security before deploying, please read the overview at:   Stream Security Overview   It is important to note that if stream security is enabled, all resources will be signed and protected, even ones that\ndo not have any access restrictions defined in their access control lists. Accessing resources with unsigned URLs will\nnot be possible.  On a high level, to use Stream security, these steps are required:   Install and configure the URL signing service and signing providers  Configure Opencast services (and, optionally, 3rd party services) that use the signing infrastructure to sign requests  Install and configure verification components",
            "title": "Configuration of Stream Security"
        },
        {
            "location": "/configuration/stream-security/#url-signing-service-installation",
            "text": "There are three modules that are built by default and need to be present on each Opencast node in order to initiate URL\nsigning:   matterhorn-urlsigning-common  matterhorn-urlsigning-service-api  matterhorn-urlsigning-service-impl   If these modules are present, the URL signing service will be available, to which the URL signing providers can then\nregister themselves.",
            "title": "URL Signing Service Installation"
        },
        {
            "location": "/configuration/stream-security/#configuration-of-signing-providers",
            "text": "The GenericUrlSigningProvider that comes with Opencast has its own configuration file:  etc/org.opencastproject.security.urlsigning.provider.impl.GenericUrlSigningProvider.cfg  All signing providers follow the same configuration structure and support multiple configuration blocks, providing the\nsettings for separate distributions (i.e. download or streaming servers, services or paths).  Each configuration block consists of the following items:   Key ID:  Key identifier, e.g.  demoKeyOne  Key secret:  Key value, e.g.  25DA2BA549CB62EF297977845259A . The key-length is not predefined, but a key length of\n  at least 128 bit is recommended. Any larger value will not increase security of the underlying algorithm.  URL prefix:  The URL signing provider will only sign URLs that start with this value. This allows to support\n  multiple distributions and different key pairs.   A typical configuration looks like this:  id.1=demoKeyOne\nkey.1=6EDB5EDDCF994B7432C371D7C274F\nurl.1=http://download.opencast.org/engage\n\nid.2=demoKeyTwo\nkey.2=6EDB5EDDCF994B7432C371D7C274F\nurl.2=http://download.opencast.org/custom  The properties defined in the configuration file take a numeric suffix that must start at  1  and increase in single\nincrements. In the example above these can be seen as:  .1  and  .2 . As soon as there is a missing number it will stop\nlooking for further entries.  Note that id and key form a fixed pair, while the same key can be used in more than one configuration block.",
            "title": "Configuration of Signing Providers"
        },
        {
            "location": "/configuration/stream-security/#configuration-of-url-signing-timeout-values",
            "text": "Once stream security is turned on by configuring the signing providers, multiple different services within Opencast will\nbe signing URLs, and while some services are signing on behalf of administrative users working in the Opencast\nadministrative user interface, others are signing URLs in order to grant access to learners playing back video content\ni.e. the functionality we have been talking about up to now.  This section explains how to best configure URLs to ensure that they expire at the right time. This might be required if\nthe default valid times do not seem secure enough or is more secure than needed.",
            "title": "Configuration of URL Signing Timeout Values"
        },
        {
            "location": "/configuration/stream-security/#signing-for-external-access",
            "text": "The lifetime of the signed URLs can be configured by setting a custom value for the property url.signing.expires.seconds  that defines the validity in seconds. The default valid time is 7200 seconds (2 hours).\nThe signed URLs can also be configured to restrict access to the user\u2019s IP address by setting the property url.signing.use.client.ip  to true. By default this is disabled.  Overview of configuration files for services that are able to automatically sign URLs on behalf of users:     URLs That Are Signed  Configuration File Name      Video player content  org.opencastproject.security.urlsigning.SigningMediaPackageSerializer.cfg    Admin UI links  org.opencastproject.adminui.endpoint.OsgiEventEndpoint.cfg    Preview and editor files  org.opencastproject.adminui.endpoint.ToolsEndpoint.cfg     The URLs will be signed by the first signing provider that will accept the URL\u2019s path based upon the signing provider\u2019s\nconfiguration. This makes it flexible to support many different scenarios. For example, we could configure the signing\nprovider to have one key for any URL that begins with one scheme, such as http, which would cover all of the URLs to be\nsigned with a single key. Or it could be configured so that each different scheme and hostname pair would have a\ndifferent keys protecting each host\u2019s URLs separately etc. Having the timing configurations separate from the key\nconfiguration allows the different types of URLs to be signed differently depending on the needs of the users without\nneeding to configure this timing for all of the different keys.",
            "title": "Signing for external access"
        },
        {
            "location": "/configuration/stream-security/#signing-for-opencast-internal-access",
            "text": "Signing of requests for internal use is performed by a core component called  TrustedHttpClientImpl , which is used to\nestablish all internal HTTP connections. More specifically, the HTTP client needs access to internal storage areas such\nas the working file repository as well as to distributed artifacts on the downloads and streaming servers, all of which\nare protected by verification components.  The default expiration time for signed internal requests is 60 seconds. This can be changed by setting a value in\nseconds for the  org.opencastproject.security.internal.url.signing.duration  property in the  custom.properties \nconfiguration file. Since those URLs are signed right before the request is made, the valid time of 60 seconds should be\nsufficiently long.",
            "title": "Signing for Opencast-internal access"
        },
        {
            "location": "/configuration/stream-security/#configuration-of-verification-components",
            "text": "The verification components ensure that only valid and correctly signed URLs are accessible at any given time. URLs\nwhich are not properly signed or have expired will be rejected.  Out of the box, Opencast provides an internal verification component:   Opencast internal UrlSigningFilter   The following section is dedicated to the installation and configuration of the Opencast internal UrlSigningFilter. The\nstream security architecture allows the implementation for URL verification for third-party applications which are not\ncovered in this documentation.",
            "title": "Configuration of Verification Components"
        },
        {
            "location": "/configuration/stream-security/#configuration-of-opencast-verification-filter",
            "text": "The Servlet filter providing the verification of requests to Opencast internal resources is implemented in the bundles:   matterhorn-urlsigning-verifier-service-api  matterhorn-urlsigning-verifier-service-impl   The filter uses a set of regular expressions to determine which requests to an Opencast instance need to be verified.",
            "title": "Configuration of Opencast verification filter"
        },
        {
            "location": "/configuration/stream-security/#installation",
            "text": "The bundles are built by default and as soon as they are running in Opencast, the filter is active, and ready to be\nenabled.",
            "title": "Installation"
        },
        {
            "location": "/configuration/stream-security/#configuration",
            "text": "Two things need to be configured for the Opencast verification filter:   key pairs used to verify the signatures  paths and endpoints that need to be protected   The configuration is located at:  etc/org.opencastproject.security.urlsigning.verifier.impl.UrlSigningVerifierImpl.cfg  First of all, the key pairs used to sign must be configured in order to allow the filter to verify the signatures. More\nthan one key pair can be defined by increasing the counter (1, 2, 3, ...) in steps of 1. If you miss any numbers it will\nstop looking for further configurations.  Example:  id.1=demoKeyOne\nkey.1=6EDB5EDDCF994B7432C371D7C274F\n\nid.2=demoKeyTwo\nkey.2=C843C21ECF59F2B38872A1BCAA774  The entries in this file need to have the same values for the signing providers configuration.  The second step is to configure the filter defining the endpoints to be protected. The configuration file is located at:  etc/org.opencastproject.security.urlsigning.filter.UrlSigningFilter.cfg  The configuration defaults to a set of regular expressions which match all of the endpoints that serve files, and avoid\nprotecting endpoints that only serve data. Therefore, the remaining step is enabling the filter by setting the property enabled  to  true  and determining whether strict or non-strict verification of the resource is required.  Note that strict verification of resources means the entire URL will be considered when comparing the incoming request\nfor a resource against the policy, including the scheme (http, https, etc.), hostname and port. If turned off, only the\npath to the resource will be considered. So if the resource  http://httpdserver:8080/the/full/path/video.mp4  is\nrequested, only the  /the/full/path/video.mp4  part of the URL will be checked against the policy\u2019s path. As mentioned\nbefore, this is useful when using a load balancer so that the requested host name does not have to match the actual\nhostname or if a video player is rewriting requests, e.g. by inserting the port number.  Example:  enabled=true\n\nstrict=true\n\nurl.regex.1=.*files\\/collection\\/.*\nurl.regex.2=.*files\\/mediapackage\\/.*\nurl.regex.3=(?\\=(.*staticfiles.*))(?=^(?!.*staticfiles.*url|.*docs.*).*$)(.*)\nurl.regex.4=.*archive\\/archive\\/mediapackage\\/.*\\/.*\\/.*\nurl.regex.5=.*static.*",
            "title": "Configuration"
        },
        {
            "location": "/configuration/stream-security/#testing",
            "text": "Once all components of Stream Security are installed and properly configured, it is important to verify that the system\nis working as expected. It is especially important to try to access resources that should  not  be accessible.  There are ways to test in a structured way which will be explained below.",
            "title": "Testing"
        },
        {
            "location": "/configuration/stream-security/#creating-signed-urls-with-signing-endpoint",
            "text": "The signing service provides a REST endpoint, which allows for the signing of arbitrary URLs. For manual use it is\nrecommended to visit the endpoint\u2019s documentation page at  http://localhost:8080/signing/docs .",
            "title": "Creating Signed URLs with Signing Endpoint"
        },
        {
            "location": "/configuration/stream-security/#is-the-url-accepted",
            "text": "Check if the URL to be signed is accepted by the signing service (or by one of its signing providers respectively) by\nusing the  /signing/accepts  endpoint. If that is not the case, the configuration of the signing providers should be\nchecked again to ensure that at least one signing provider is responsible for the URL in question.  If the service is fully operational, the response code will be  200 OK  and the response body either  true  (accepted)\nor  false  (refused).",
            "title": "Is the URL accepted?"
        },
        {
            "location": "/configuration/stream-security/#signing-the-url",
            "text": "On the same documentation page URLs can be signed using the  /signing/sign  endpoint, and the access policy may be\nspecified in that form as well. With this, several scenarios can be tested. Examples are:   URLs that have already expired or will expire at a known date  URLs that are not yet valid (if you provided a validFrom data in the access policy)  URLs that are missing some or all of the signing parameters (policy, keyId or signature)  URLs that are attempting to use signing parameters (policy and signature) from a different signed URL",
            "title": "Signing the URL"
        },
        {
            "location": "/configuration/stream-security/#verifying-the-url",
            "text": "The signed URLs can then be passed to the appropriate testing tool (web browser, cURL, player, \u2026) to test the\nfunctionality of the verification component(s). The following table is the return codes associated with different\nrejection conditions:     Case  Return Code      If any of the query string parameters are missing or are the wrong case / spelt incorrectly  Bad Request (400)    If any of the required policy variables are missing  Bad Request (400)    No encryption key that matches the KeyID known by the plugin  Bad Request (400)    The Policy and Signature don\u2019t match in any way  Forbidden (403)    If client IP is specified and doesn\u2019t match  Forbidden (403)    The current time has passed the DateGreaterThan, the time the URL expires  Gone (410)    The current time is before the DateLessThan, the time the URL becomes available  Gone (410)     The components that verify a URL is signed will run before a request is checked to be valid, so if a non-existent URL is\nsigned for example, the above conditions will need to be fixed before a missing (404) response code will be returned.",
            "title": "Verifying the URL"
        },
        {
            "location": "/configuration/stream-security/#inspect-policy",
            "text": "The generated policy which is added to the signed URLs can be inspected. It needs to be decoded from Base64 and the\nresult must be a JSON document that contains exactly the values which have been passed during signing.  Decoding this Base64 encoded policy  eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRh\ndGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0  \u2026would result in this JSON document (policy):  {\n  \"Statement\":{\n    \"Resource\":\"http:\\/\\/opencast.org\\/engage\\/resource.mp4\",\n    \"Condition\":{\n      \"DateLessThan\":1425170777000,\n      \"DateGreaterThan\":1425084379000,\n      \"IpAddress\":\"10.0.0.1\"\n    }\n  }\n}  Inspecting and modifying the policy is useful for advanced testing, such as:   URLs where the policy was modified after signing  URLs where the policy was modified and resigned with a different key",
            "title": "Inspect policy"
        },
        {
            "location": "/configuration/stream-security/#further-information",
            "text": "For an overview of Stream Security:   Stream Security Overview   For further developer information, please have a look at the stream security section in the developer guide.",
            "title": "Further information"
        },
        {
            "location": "/configuration/acl/",
            "text": "Access Control List Configuration\n\n\nThis document describes configuration options considering the access control lists (ACL) used by\nOpencast for authorization.\n\n\nACL Templates\n\n\nOn startup, Opencast loads all ACL templates found in \n/opt/opencast/etc/acl/\n.\n\n\nNotes:\n\n\n\n\nACL templates can also be created and managed directly in the Admin UI\n\n\n\n\nAdditional ACL Actions\n\n\nOpencast uses to ACL actions to authorize roles to perform specific actions on a given object:\n\n\n\n\nread\n allows the role to access to object\n\n\nwrite\n allows the role to modify the object\n\n\n\n\nThose built-in actions are known to Opencast.\n\n\nIn case you need other ACL actions, you can configure additional ACL actions in\n\n/opt/opencast/etc/listprovides/acl.additional.actions.properties\n. Those additional ACL actions are not affecting the way\nOpencast treats objects but are simply just forwarded to publication channels so that third-party applications\n(expecting those specific ACL actions) can implement the respective authorization logic.\n\n\nExample:\n\n\nlist.name=ACL.ACTIONS\n# This list provider allows you to configure custom actions that can be added\n# to ACLs. The default actions are read and write.\n# The pattern for adding them is\n# UI_LABEL=actionId\n#\nUpload=myorg_upload\nDownload=myorg_downlaod\n\n\n\nIn the example above, the two additional ACL actions \nUpload\n and \nDownload\n have been configured.\nThe ACL editor of the Admin UI will allow the user to set those actions.\n\n\nNotes:\n\n\n\n\nTo ensure compatibility with future Opencast versions, it is highly recommended to use a prefix for your\ncustomized additional actions in case later Opencast versions would introduce an action with the same name",
            "title": "Access Control Lists"
        },
        {
            "location": "/configuration/acl/#access-control-list-configuration",
            "text": "This document describes configuration options considering the access control lists (ACL) used by\nOpencast for authorization.",
            "title": "Access Control List Configuration"
        },
        {
            "location": "/configuration/acl/#acl-templates",
            "text": "On startup, Opencast loads all ACL templates found in  /opt/opencast/etc/acl/ .  Notes:   ACL templates can also be created and managed directly in the Admin UI",
            "title": "ACL Templates"
        },
        {
            "location": "/configuration/acl/#additional-acl-actions",
            "text": "Opencast uses to ACL actions to authorize roles to perform specific actions on a given object:   read  allows the role to access to object  write  allows the role to modify the object   Those built-in actions are known to Opencast.  In case you need other ACL actions, you can configure additional ACL actions in /opt/opencast/etc/listprovides/acl.additional.actions.properties . Those additional ACL actions are not affecting the way\nOpencast treats objects but are simply just forwarded to publication channels so that third-party applications\n(expecting those specific ACL actions) can implement the respective authorization logic.  Example:  list.name=ACL.ACTIONS\n# This list provider allows you to configure custom actions that can be added\n# to ACLs. The default actions are read and write.\n# The pattern for adding them is\n# UI_LABEL=actionId\n#\nUpload=myorg_upload\nDownload=myorg_downlaod  In the example above, the two additional ACL actions  Upload  and  Download  have been configured.\nThe ACL editor of the Admin UI will allow the user to set those actions.  Notes:   To ensure compatibility with future Opencast versions, it is highly recommended to use a prefix for your\ncustomized additional actions in case later Opencast versions would introduce an action with the same name",
            "title": "Additional ACL Actions"
        },
        {
            "location": "/configuration/workflow/",
            "text": "Create a Custom Workflow\n\n\nThis document will help you get started with creating your own Opencast workflows. For a list of available workflow\noperations, see:\n\n\n\n\nList of Workflow Operation Handler\n\n\n\n\nOverview\n\n\nA Opencast workflow is an ordered list of operations. There is no limit to the number of operations or their\nrepetition in a given workflow.\n\n\nWorkflow operations can be configured using configuration elements. The use of string replacement in configuration\nvalues allows workflows to dynamically adapt to a given input or user decision.\n\n\nDocument\n\n\nOpencast workflows are defined in XML.  The structure of a Opencast workflow looks like this:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  <id></id>\n  <title></title>\n  <tags></tags>\n  <description></description>\n\n  <!-- Operations -->\n  <operations>\n    <operation></operation>\n    ...\n  </operations>\n\n</definition>\n\n\n\nCreate a Workflow\n\n\nThis sections will walk you through creating a custom workflow, which will encode ingested tracks to defined output\nformat.\n\n\nEncoding Profiles\n\n\nFirst create or select the encoding profiles you want to use. For more details on this, have a look at the \nEncoding\nProfile Configuration Guide\n. For this guide we assume that we have an encoding profile \nmov-low.http\n\nwhich creates a distribution format definition for mp4 video and a \nfeed-cover.http\n encoding profile to create\nthumbnail images for the videos.\n\n\nDescribe the Workflow\n\n\nStart by naming the workflow and giving it a meaningful description:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  <id>example</id>\n  <title>Encode Mp4, Distribute and Publish</title>\n  <tags>\n    <!-- Tell the UI where to show this workflow -->\n    <tag>upload-ng</tag>\n    <tag>schedule-ng</tag>\n    <tag>archive</tag>\n  </tags>\n  <description>\n    Encode to Mp4 and thumbnail.\n    Distribute to local repository.\n    Publish to search index.\n  </description>\n\n  <!-- Operations -->\n  <operations></operations>\n\n</definition>\n\n\n\n\n\nThe \nid\n is used in several Opencast endpoints to identify and select this workflow. Make sure that this identifier\n  is unique among all endpoints in the system.\n\n\nThe \ntags\n define where the user interfaces may use these workflows. Useful tags are:\n\n\nupload-ng\n: Usable for uploaded media (new admin ui)\n\n\nschedule-ng\n: Usable for scheduled events (new admin ui)\n\n\narchive-ng\n: Usable for archived media (new admin ui)\n\n\ndelete-ng\n: Usable for deletion of events with publications (new admin ui)\n\n\neditor\n: Usable from the video editor\n\n\n\n\n\n\n\n\nInspect the Media\n\n\nThe first operation will be to inspect the media for technical metadata, such as format and length:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  ...\n\n  <!-- Operations -->\n  <operations>\n\n    <!-- inspect media -->\n    <operation\n      id=\"inspect\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Inspect media package\">\n    </operation>\n\n  </operations>\n\n</definition>\n\n\n\nThe \nfail-on-error\n attribute is a boolean determining whether the workflow will throw an error to the\nexception-handler-workflow or simply proceed with the remaining operations.\n\n\nEncoding\n\n\nThe next operations will encode the media to the Mp4 format:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  ...\n\n  <!-- Operations -->\n  <operations>\n\n    <!-- inspect media -->\n    ...\n\n    <!-- encode: mp4 -->\n    <operation\n      id=\"compose\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode camera to mp4\">\n      <configurations>\n        <configuration key=\"source-flavor\">presenter/source</configuration>\n        <configuration key=\"target-flavor\">presenter/delivery</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">mov-low.http</configuration>\n      </configurations>\n    </operation>\n\n    <operation\n      id=\"compose\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode screen to mp4\">\n      <configurations>\n        <configuration key=\"source-flavor\">presentation/source</configuration>\n        <configuration key=\"target-flavor\">presentation/delivery</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">mov-low.http</configuration>\n      </configurations>\n    </operation>\n\n  </operations>\n\n</definition>\n\n\n\n\n\nThe \ntarget-tags\n attribute causes the resulting media to be tagged. For example, this could be used to define these\n  media as input for other operations, using their \nsource-tags\n attribute.\n\n\nThe \nencoding-profile\n attribute refers to an encoding profile defined in \netc/encoding\n.\n\n\n\n\nEncode to Thumbnail\n\n\nThe next operations will create thumbnails from the media:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n  ...\n  <operations>\n    ...\n    <!-- encode: images -->\n    <operation\n      id=\"image\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode camera to thumbnail\">\n      <configurations>\n        <configuration key=\"source-flavor\">presenter/source</configuration>\n        <configuration key=\"source-tags\"></configuration>\n        <configuration key=\"target-flavor\">cover/source</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">feed-cover.http</configuration>\n        <configuration key=\"time\">1</configuration>\n      </configurations>\n    </operation>\n\n    <operation\n      id=\"image\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode screen to thumbnail\">\n      <configurations>\n        <configuration key=\"source-flavor\">presentation/source</configuration>\n        <configuration key=\"source-tags\"></configuration>\n        <configuration key=\"target-flavor\">cover/source</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">feed-cover.http</configuration>\n        <configuration key=\"time\">1</configuration>\n      </configurations>\n    </operation>\n\n  </operations>\n\n</definition>\n\n\n\n\n\nThe time attribute determines the approximate frame of the source media is used. The time unit is in seconds.\n\n\n\n\nDistribute the Media\n\n\nThe next operation copies the encoded media to the Opencast distribution channel:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n  ...\n  <operations>\n\n    <!-- distribute: local -->\n    <operation\n      id=\"publish-engage\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Distribute media to the local distribution channel\">\n      <configurations>\n        <configuration key=\"download-source-tags\">publish,rss,atom</configuration>\n        <configuration key=\"streaming-source-tags\"></configuration>\n        <configuration key=\"check-availability\">true</configuration>\n      </configurations>\n    </operation>\n\n  </operations>\n\n</definition>\n\n\n\n\n\nThe publish-engage operation uses all media tagged as \nrss\n or \natom\n as input.\n\n\n\n\nAccept User Input\n\n\nWorkflow definitions may optionally include variables to be replaced by user input. For instance, this may be used to\nselect optional parts of a workflow. To enable user control of individual workflow instances, the workflow definition\nmust:\n\n\n\n\nuse the \n${variable}\n notation in the workflow definition\n\n\ncontain a custom configuration panel.\n\n\n\n\nHere is an example of a configurable operation:\n\n\n<operation id=\"...\" if=\"${somevar}\">\n  ...\n</operation>\n\n\n\nThe attribute \nif\n specifies the execution condition in means of the operation only being executed if that condition\nevaluates to true. You can find more details on conditional execution in the next section.\n\n\nOnce the operation is configured to accept a variable, we need to describe how to gather the value from the\nadministrative user. The \n<configuration_panel>\n element of a workflow definitions describes this user interface\nsnippet.  A simple configuration panel could look like this:\n\n\n<configuration_panel>\n  <![CDATA[\n    <input id=\"someaction\" name=\"someaction\" type=\"checkbox\" value=\"true\" />\n    <label for=\"someaction\">Execute some operation?</label>\n  ]]>\n</configuration_panel>\n\n\n\nThe checkbox in this \n<configuration_panel>\n will now be displayed in the administrative tools, and the user's\nselection will be used to replace the \n${review.hold}\n variable in the workflow.\n\n\nThis input can also be sent by capture agents, using the ingest endpoints. Please note that capture agents usually do\nnot load the configuration panel. Hence defaults set in the user interface will not apply to ingests. To circumvent\nthis, the \ndefaults operation\n can be used.\n\n\nConditional Execution\n\n\nThe attribute \nif\n of the \noperation\n element can be used to specify a condition to control whether the workflow\noperation should be executed. This so-called execution condition is a boolean expression of the following form:\n\n\n<expression> ::= <term> [\"OR\" <expression>]\n<term> ::= <value> [\"AND\" <term>]\n<value> ::= [\"NOT\"]* ( \"(\" <expression> \")\" | <relation> | <bool-literal> )\n<relation> ::= <relation-factor> <rel-literal> <relation-factor>\n<relation-factor> ::= <operation> | <number>\n<operation> ::= <number> <op-literal> <number>\n<rel-literal> ::= \">=\" | \">\" | \"<=\" | \"<\" | \"=\" | \"!=\"\n<op-literal> ::= \"+\" | \"-\" | \"*\" | \"/\"\n<bool-literal> ::= \"true\" | \"false\"\n\n\n\nAs the formal description above explains, such boolean expressions may contain the booelan constants (\ntrue\n and\n\nfalse\n) and numbers, as well as references to the variables of the workflow instance that contain these data types.\nWorkflow instance variables can be accessed by using \n${variableName}\n. \n\n\nExample:\n\n\n<operation id=\"...\" if=\"${variableName1} AND NOT (${variableName2} OR ${variableName3})\">\n  ...\n</operation>\n\n\n\nTest the Workflow\n\n\nThe easiest way to test a workflow is to just put it into the workflow folder where it will be picked up by Opencast\nautomatically and will be available in Opencast a few seconds later.",
            "title": "Workflow"
        },
        {
            "location": "/configuration/workflow/#create-a-custom-workflow",
            "text": "This document will help you get started with creating your own Opencast workflows. For a list of available workflow\noperations, see:   List of Workflow Operation Handler",
            "title": "Create a Custom Workflow"
        },
        {
            "location": "/configuration/workflow/#overview",
            "text": "A Opencast workflow is an ordered list of operations. There is no limit to the number of operations or their\nrepetition in a given workflow.  Workflow operations can be configured using configuration elements. The use of string replacement in configuration\nvalues allows workflows to dynamically adapt to a given input or user decision.",
            "title": "Overview"
        },
        {
            "location": "/configuration/workflow/#document",
            "text": "Opencast workflows are defined in XML.  The structure of a Opencast workflow looks like this:  <definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  <id></id>\n  <title></title>\n  <tags></tags>\n  <description></description>\n\n  <!-- Operations -->\n  <operations>\n    <operation></operation>\n    ...\n  </operations>\n\n</definition>",
            "title": "Document"
        },
        {
            "location": "/configuration/workflow/#create-a-workflow",
            "text": "This sections will walk you through creating a custom workflow, which will encode ingested tracks to defined output\nformat.",
            "title": "Create a Workflow"
        },
        {
            "location": "/configuration/workflow/#encoding-profiles",
            "text": "First create or select the encoding profiles you want to use. For more details on this, have a look at the  Encoding\nProfile Configuration Guide . For this guide we assume that we have an encoding profile  mov-low.http \nwhich creates a distribution format definition for mp4 video and a  feed-cover.http  encoding profile to create\nthumbnail images for the videos.",
            "title": "Encoding Profiles"
        },
        {
            "location": "/configuration/workflow/#describe-the-workflow",
            "text": "Start by naming the workflow and giving it a meaningful description:  <definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  <id>example</id>\n  <title>Encode Mp4, Distribute and Publish</title>\n  <tags>\n    <!-- Tell the UI where to show this workflow -->\n    <tag>upload-ng</tag>\n    <tag>schedule-ng</tag>\n    <tag>archive</tag>\n  </tags>\n  <description>\n    Encode to Mp4 and thumbnail.\n    Distribute to local repository.\n    Publish to search index.\n  </description>\n\n  <!-- Operations -->\n  <operations></operations>\n\n</definition>   The  id  is used in several Opencast endpoints to identify and select this workflow. Make sure that this identifier\n  is unique among all endpoints in the system.  The  tags  define where the user interfaces may use these workflows. Useful tags are:  upload-ng : Usable for uploaded media (new admin ui)  schedule-ng : Usable for scheduled events (new admin ui)  archive-ng : Usable for archived media (new admin ui)  delete-ng : Usable for deletion of events with publications (new admin ui)  editor : Usable from the video editor",
            "title": "Describe the Workflow"
        },
        {
            "location": "/configuration/workflow/#inspect-the-media",
            "text": "The first operation will be to inspect the media for technical metadata, such as format and length:  <definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  ...\n\n  <!-- Operations -->\n  <operations>\n\n    <!-- inspect media -->\n    <operation\n      id=\"inspect\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Inspect media package\">\n    </operation>\n\n  </operations>\n\n</definition>  The  fail-on-error  attribute is a boolean determining whether the workflow will throw an error to the\nexception-handler-workflow or simply proceed with the remaining operations.",
            "title": "Inspect the Media"
        },
        {
            "location": "/configuration/workflow/#encoding",
            "text": "The next operations will encode the media to the Mp4 format:  <definition xmlns=\"http://workflow.opencastproject.org\">\n\n  <!-- Description -->\n  ...\n\n  <!-- Operations -->\n  <operations>\n\n    <!-- inspect media -->\n    ...\n\n    <!-- encode: mp4 -->\n    <operation\n      id=\"compose\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode camera to mp4\">\n      <configurations>\n        <configuration key=\"source-flavor\">presenter/source</configuration>\n        <configuration key=\"target-flavor\">presenter/delivery</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">mov-low.http</configuration>\n      </configurations>\n    </operation>\n\n    <operation\n      id=\"compose\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode screen to mp4\">\n      <configurations>\n        <configuration key=\"source-flavor\">presentation/source</configuration>\n        <configuration key=\"target-flavor\">presentation/delivery</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">mov-low.http</configuration>\n      </configurations>\n    </operation>\n\n  </operations>\n\n</definition>   The  target-tags  attribute causes the resulting media to be tagged. For example, this could be used to define these\n  media as input for other operations, using their  source-tags  attribute.  The  encoding-profile  attribute refers to an encoding profile defined in  etc/encoding .",
            "title": "Encoding"
        },
        {
            "location": "/configuration/workflow/#encode-to-thumbnail",
            "text": "The next operations will create thumbnails from the media:  <definition xmlns=\"http://workflow.opencastproject.org\">\n  ...\n  <operations>\n    ...\n    <!-- encode: images -->\n    <operation\n      id=\"image\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode camera to thumbnail\">\n      <configurations>\n        <configuration key=\"source-flavor\">presenter/source</configuration>\n        <configuration key=\"source-tags\"></configuration>\n        <configuration key=\"target-flavor\">cover/source</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">feed-cover.http</configuration>\n        <configuration key=\"time\">1</configuration>\n      </configurations>\n    </operation>\n\n    <operation\n      id=\"image\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encode screen to thumbnail\">\n      <configurations>\n        <configuration key=\"source-flavor\">presentation/source</configuration>\n        <configuration key=\"source-tags\"></configuration>\n        <configuration key=\"target-flavor\">cover/source</configuration>\n        <configuration key=\"target-tags\">rss, atom</configuration>\n        <configuration key=\"encoding-profile\">feed-cover.http</configuration>\n        <configuration key=\"time\">1</configuration>\n      </configurations>\n    </operation>\n\n  </operations>\n\n</definition>   The time attribute determines the approximate frame of the source media is used. The time unit is in seconds.",
            "title": "Encode to Thumbnail"
        },
        {
            "location": "/configuration/workflow/#distribute-the-media",
            "text": "The next operation copies the encoded media to the Opencast distribution channel:  <definition xmlns=\"http://workflow.opencastproject.org\">\n  ...\n  <operations>\n\n    <!-- distribute: local -->\n    <operation\n      id=\"publish-engage\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Distribute media to the local distribution channel\">\n      <configurations>\n        <configuration key=\"download-source-tags\">publish,rss,atom</configuration>\n        <configuration key=\"streaming-source-tags\"></configuration>\n        <configuration key=\"check-availability\">true</configuration>\n      </configurations>\n    </operation>\n\n  </operations>\n\n</definition>   The publish-engage operation uses all media tagged as  rss  or  atom  as input.",
            "title": "Distribute the Media"
        },
        {
            "location": "/configuration/workflow/#accept-user-input",
            "text": "Workflow definitions may optionally include variables to be replaced by user input. For instance, this may be used to\nselect optional parts of a workflow. To enable user control of individual workflow instances, the workflow definition\nmust:   use the  ${variable}  notation in the workflow definition  contain a custom configuration panel.   Here is an example of a configurable operation:  <operation id=\"...\" if=\"${somevar}\">\n  ...\n</operation>  The attribute  if  specifies the execution condition in means of the operation only being executed if that condition\nevaluates to true. You can find more details on conditional execution in the next section.  Once the operation is configured to accept a variable, we need to describe how to gather the value from the\nadministrative user. The  <configuration_panel>  element of a workflow definitions describes this user interface\nsnippet.  A simple configuration panel could look like this:  <configuration_panel>\n  <![CDATA[\n    <input id=\"someaction\" name=\"someaction\" type=\"checkbox\" value=\"true\" />\n    <label for=\"someaction\">Execute some operation?</label>\n  ]]>\n</configuration_panel>  The checkbox in this  <configuration_panel>  will now be displayed in the administrative tools, and the user's\nselection will be used to replace the  ${review.hold}  variable in the workflow.  This input can also be sent by capture agents, using the ingest endpoints. Please note that capture agents usually do\nnot load the configuration panel. Hence defaults set in the user interface will not apply to ingests. To circumvent\nthis, the  defaults operation  can be used.",
            "title": "Accept User Input"
        },
        {
            "location": "/configuration/workflow/#conditional-execution",
            "text": "The attribute  if  of the  operation  element can be used to specify a condition to control whether the workflow\noperation should be executed. This so-called execution condition is a boolean expression of the following form:  <expression> ::= <term> [\"OR\" <expression>]\n<term> ::= <value> [\"AND\" <term>]\n<value> ::= [\"NOT\"]* ( \"(\" <expression> \")\" | <relation> | <bool-literal> )\n<relation> ::= <relation-factor> <rel-literal> <relation-factor>\n<relation-factor> ::= <operation> | <number>\n<operation> ::= <number> <op-literal> <number>\n<rel-literal> ::= \">=\" | \">\" | \"<=\" | \"<\" | \"=\" | \"!=\"\n<op-literal> ::= \"+\" | \"-\" | \"*\" | \"/\"\n<bool-literal> ::= \"true\" | \"false\"  As the formal description above explains, such boolean expressions may contain the booelan constants ( true  and false ) and numbers, as well as references to the variables of the workflow instance that contain these data types.\nWorkflow instance variables can be accessed by using  ${variableName} .   Example:  <operation id=\"...\" if=\"${variableName1} AND NOT (${variableName2} OR ${variableName3})\">\n  ...\n</operation>",
            "title": "Conditional Execution"
        },
        {
            "location": "/configuration/workflow/#test-the-workflow",
            "text": "The easiest way to test a workflow is to just put it into the workflow folder where it will be picked up by Opencast\nautomatically and will be available in Opencast a few seconds later.",
            "title": "Test the Workflow"
        },
        {
            "location": "/configuration/external-api/",
            "text": "External API Configuration\n\n\nThe External API is an integral part of Opencast and therefore does not need to be enabled. To be able to access the\nExternal API, you need to configure a user that is authorized to do so.\n\n\nPerform the following steps to get the External API running:\n\n\n\n\nEnable basic authentication (see section Authentication) \n\n\nCreate a new user or choose an existing user (administrative user interface)\n\n\nAuthorize the user to access the External API (see section Authorization)\n\n\nTest whether access works (see section Testing)\n\n\n\n\nAuthentication\n\n\nThe External API currenlty only supports basic authentication. To enable basic authentication, uncomment the following\nblocks in \n/etc/security/mh_default.org\n:\n\n\n<!-- Basic authentication\n<sec:custom-filter after=\"BASIC_AUTH_FILTER\" ref=\"basicAuthenticationFilter\" />\n-->\n\n<!-- Basic authentication\n<bean id=\"basicEntryPoint\" class=\"org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint\">\n  <property name=\"realmName\" value=\"Opencast\"/>\n</bean>\n-->\n\n<!-- Basic authentication\n<bean id=\"basicAuthenticationFilter\" class=\"org.springframework.security.web.authentication.www.BasicAuthenticationFilter\">\n  <property name=\"authenticationManager\" ref=\"authenticationManager\"/>\n  <property name=\"authenticationEntryPoint\" ref=\"basicEntryPoint\"/>\n</bean>\n-->\n\n\n\nNote:\n Since basic authentication involves sending unencrypted passwords over the network, it is strongly\nrecommended to use HTTPS.\n\n\nAuthorization\n\n\nThe External API supports fine-grained access control on request level allowing it to be tailored to your\nspecific needs. A number of roles are used to authorize access to individual endpoints. Those roles can be configured\ndirectly in the Opencast administrative user interface.\n\n\nNote:\n Users owning the role ROLE_ADMIN have full access to the External API.\n\n\nBase API\n\n\n\n\n\n\n\n\nROLE\n\n\nMETHOD\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nROLE_API\n\n\nGET\n\n\n/api\n/api/info/*\n/api/info/me/*\n/api/version\n/api/version/*\n\n\n\n\n\n\n\n\nEvents API\n\n\n\n\n\n\n\n\nROLE\n\n\nMETHOD\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nROLE_API_EVENTS_CREATE\n\n\nPOST\n\n\n/api/events\n\n\n\n\n\n\nROLE_API_EVENTS_VIEW\n\n\nGET\n\n\n/api/events\n/api/events/*\n\n\n\n\n\n\nROLE_API_EVENTS_EDIT\n\n\nPUT\nPOST\n\n\n/api/events/*\n/api/events/*\n\n\n\n\n\n\nROLE_API_EVENTS_DELETE\n\n\nDELETE\n\n\n/api/events/*\n\n\n\n\n\n\nROLE_API_EVENTS_ACL_VIEW\n\n\nGET\n\n\n/api/events/*/acl\n\n\n\n\n\n\nROLE_API_EVENTS_ACL_EDIT\n\n\nPUT\nPOST\n\n\n/api/events/*/acl\n/api/events/*/acl/*\n\n\n\n\n\n\nROLE_API_EVENTS_ACL_DELETE\n\n\nDELETE\n\n\n/api/events/*/acl/*/*\n\n\n\n\n\n\nROLE_API_EVENTS_ATTACHMENTS_VIEW\n\n\nGET\n\n\n/api/events/*/attachments\n/api/events/*/attachments/*\n\n\n\n\n\n\nROLE_API_EVENTS_COMMENTS_VIEW\n\n\nGET\n\n\n/api/events/*/comments\n/api/events/*/comments/*\n\n\n\n\n\n\nROLE_API_EVENTS_COMMENTS_EDIT\n\n\nPUT\nPOST\n\n\n/api/events/*/comments/*\n/api/events/*/comments\n\n\n\n\n\n\nROLE_API_EVENTS_COMMENTS_DELETE\n\n\nDELETE\n\n\n/api/events/*/comments/*\n\n\n\n\n\n\nROLE_API_EVENTS_MEDIA_VIEW\n\n\nGET\n\n\n/api/events/*/media\n/api/events/*/media/*\n\n\n\n\n\n\nROLE_API_EVENTS_METADATA_VIEW\n\n\nGET\n\n\n/api/events/*/metadata\n/api/events/*/metadata/*\n\n\n\n\n\n\nROLE_API_EVENTS_METADATA_EDIT\n\n\nPUT\n\n\n/api/events/*/metadata\n/api/events/*/metadata/*\n\n\n\n\n\n\nROLE_API_EVENTS_METADATA_DELETE\n\n\nDELETE\n\n\n/api/events/*/metadata\n/api/events/*/metadata/*\n\n\n\n\n\n\nROLE_API_EVENTS_PUBLICATIONS_VIEW\n\n\nGET\n\n\n/api/events/*/publications\n/api/events/*/publications/*\n\n\n\n\n\n\n\n\nSeries API\n\n\n\n\n\n\n\n\nROLE\n\n\nMETHOD\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nROLE_API_SERIES_CREATE\n\n\nPOST\n\n\n/api/series\n\n\n\n\n\n\nROLE_API_SERIES_VIEW\n\n\nGET\n\n\n/api/series\n/api/series/*\n\n\n\n\n\n\nROLE_API_SERIES_EDIT\n\n\nPUT\n\n\n/api/series/*\n\n\n\n\n\n\nROLE_API_SERIES_ACL_VIEW\n\n\nGET\n\n\n/api/series/*/acl\n\n\n\n\n\n\nROLE_API_SERIES_ACL_EDIT\n\n\nPUT\n\n\n/api/series/*/metadata\n/api/series/*/metadata/*\n\n\n\n\n\n\nROLE_API_SERIES_METADATA_VIEW\n\n\nGET\n\n\n/api/series/*/metadata\n/api/series/*/metadata/*\n\n\n\n\n\n\nROLE_API_SERIES_METADATA_EDIT\n\n\nPUT\n\n\n/api/series/*/metadata\n/api/series/*/metadata/*\n\n\n\n\n\n\nROLE_API_SERIES_METADATA_DELETE\n\n\nDELETE\n\n\n/api/series/*/metadata\n/api/series/*/metadata/*\n\n\n\n\n\n\nROLE_API_SERIES_PROPERTIES_VIEW\n\n\nGET\n\n\n/api/series/*/properties\n\n\n\n\n\n\nROLE_API_SERIES_PROPERTIES_EDIT\n\n\nPUT\n\n\n/api/series/*/properties\n\n\n\n\n\n\nROLE_API_SERIES_DELETE\n\n\nDELETE\n\n\n/api/series/*\n\n\n\n\n\n\n\n\nGroups API\n\n\n\n\n\n\n\n\nROLE\n\n\nMETHOD\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nROLE_API_GROUPS_CREATE\n\n\nPOST\n\n\n/api/groups\n\n\n\n\n\n\nROLE_API_GROUPS_VIEW\n\n\nGET\n\n\n/api/groups\n/api/groups/*\n\n\n\n\n\n\nROLE_API_GROUPS_EDIT\n\n\nPUT\nPOST\n\n\n/api/groups/*\n/api/groups/*/members/*\n\n\n\n\n\n\nROLE_API_GROUPS_DELETE\n\n\nDELETE\n\n\n/api/groups/*\n\n\n\n\n\n\n\n\nSecurity API\n\n\n\n\n\n\n\n\nROLE\n\n\nMETHOD\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nROLE_API_SECURITY_EDIT\n\n\nPOST\n\n\n/api/security/sign\n\n\n\n\n\n\n\n\nAdministrative API\n\n\n\n\n\n\n\n\nROLE\n\n\nMETHOD\n\n\nURL\n\n\n\n\n\n\n\n\n\n\nROLE_ADMIN\n\n\nPOST\n\n\n/api/recreateIndex\n\n\n\n\n\n\n\n\nUser- and Role-switching\n\n\nThe External API supports user- and role-switching, i.e. it is possible to perform requests on behalf of another\nuser or role. The be able to perform this kind of requests, the user doing the actual requests needs to own ROLE_SUDO.\n\n\nTesting\n\n\ncurl -u <api-user>:<api-user-passowrd> <admin-node>/api/info/me\n\n\n\nshould return a JSON containing information about the user \napi-user\n.\n\n\nAccessing Distribution Artefacts\n\n\nA major use case of the External API is to provide External Applications secure access to distribution artefacts.\n\n\nFor this purpose, Opencast comes with a special workflow operation: WOH publish-configure\n(see \nConfigurablePublishWorkflowOperationHandler\n)\ncreates publication elements that do not just contain a single URL to the publication channel,\nbut also contain URLs for each of the attachments and tracks that have been published.\n\n\nNote:\n Secure access to distribution artefacts requires stream security to be enabled,\nsee \nStream Security Configuration\n.",
            "title": "External API"
        },
        {
            "location": "/configuration/external-api/#external-api-configuration",
            "text": "The External API is an integral part of Opencast and therefore does not need to be enabled. To be able to access the\nExternal API, you need to configure a user that is authorized to do so.  Perform the following steps to get the External API running:   Enable basic authentication (see section Authentication)   Create a new user or choose an existing user (administrative user interface)  Authorize the user to access the External API (see section Authorization)  Test whether access works (see section Testing)",
            "title": "External API Configuration"
        },
        {
            "location": "/configuration/external-api/#authentication",
            "text": "The External API currenlty only supports basic authentication. To enable basic authentication, uncomment the following\nblocks in  /etc/security/mh_default.org :  <!-- Basic authentication\n<sec:custom-filter after=\"BASIC_AUTH_FILTER\" ref=\"basicAuthenticationFilter\" />\n-->\n\n<!-- Basic authentication\n<bean id=\"basicEntryPoint\" class=\"org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint\">\n  <property name=\"realmName\" value=\"Opencast\"/>\n</bean>\n-->\n\n<!-- Basic authentication\n<bean id=\"basicAuthenticationFilter\" class=\"org.springframework.security.web.authentication.www.BasicAuthenticationFilter\">\n  <property name=\"authenticationManager\" ref=\"authenticationManager\"/>\n  <property name=\"authenticationEntryPoint\" ref=\"basicEntryPoint\"/>\n</bean>\n-->  Note:  Since basic authentication involves sending unencrypted passwords over the network, it is strongly\nrecommended to use HTTPS.",
            "title": "Authentication"
        },
        {
            "location": "/configuration/external-api/#authorization",
            "text": "The External API supports fine-grained access control on request level allowing it to be tailored to your\nspecific needs. A number of roles are used to authorize access to individual endpoints. Those roles can be configured\ndirectly in the Opencast administrative user interface.  Note:  Users owning the role ROLE_ADMIN have full access to the External API.  Base API     ROLE  METHOD  URL      ROLE_API  GET  /api /api/info/* /api/info/me/* /api/version /api/version/*     Events API     ROLE  METHOD  URL      ROLE_API_EVENTS_CREATE  POST  /api/events    ROLE_API_EVENTS_VIEW  GET  /api/events /api/events/*    ROLE_API_EVENTS_EDIT  PUT POST  /api/events/* /api/events/*    ROLE_API_EVENTS_DELETE  DELETE  /api/events/*    ROLE_API_EVENTS_ACL_VIEW  GET  /api/events/*/acl    ROLE_API_EVENTS_ACL_EDIT  PUT POST  /api/events/*/acl /api/events/*/acl/*    ROLE_API_EVENTS_ACL_DELETE  DELETE  /api/events/*/acl/*/*    ROLE_API_EVENTS_ATTACHMENTS_VIEW  GET  /api/events/*/attachments /api/events/*/attachments/*    ROLE_API_EVENTS_COMMENTS_VIEW  GET  /api/events/*/comments /api/events/*/comments/*    ROLE_API_EVENTS_COMMENTS_EDIT  PUT POST  /api/events/*/comments/* /api/events/*/comments    ROLE_API_EVENTS_COMMENTS_DELETE  DELETE  /api/events/*/comments/*    ROLE_API_EVENTS_MEDIA_VIEW  GET  /api/events/*/media /api/events/*/media/*    ROLE_API_EVENTS_METADATA_VIEW  GET  /api/events/*/metadata /api/events/*/metadata/*    ROLE_API_EVENTS_METADATA_EDIT  PUT  /api/events/*/metadata /api/events/*/metadata/*    ROLE_API_EVENTS_METADATA_DELETE  DELETE  /api/events/*/metadata /api/events/*/metadata/*    ROLE_API_EVENTS_PUBLICATIONS_VIEW  GET  /api/events/*/publications /api/events/*/publications/*     Series API     ROLE  METHOD  URL      ROLE_API_SERIES_CREATE  POST  /api/series    ROLE_API_SERIES_VIEW  GET  /api/series /api/series/*    ROLE_API_SERIES_EDIT  PUT  /api/series/*    ROLE_API_SERIES_ACL_VIEW  GET  /api/series/*/acl    ROLE_API_SERIES_ACL_EDIT  PUT  /api/series/*/metadata /api/series/*/metadata/*    ROLE_API_SERIES_METADATA_VIEW  GET  /api/series/*/metadata /api/series/*/metadata/*    ROLE_API_SERIES_METADATA_EDIT  PUT  /api/series/*/metadata /api/series/*/metadata/*    ROLE_API_SERIES_METADATA_DELETE  DELETE  /api/series/*/metadata /api/series/*/metadata/*    ROLE_API_SERIES_PROPERTIES_VIEW  GET  /api/series/*/properties    ROLE_API_SERIES_PROPERTIES_EDIT  PUT  /api/series/*/properties    ROLE_API_SERIES_DELETE  DELETE  /api/series/*     Groups API     ROLE  METHOD  URL      ROLE_API_GROUPS_CREATE  POST  /api/groups    ROLE_API_GROUPS_VIEW  GET  /api/groups /api/groups/*    ROLE_API_GROUPS_EDIT  PUT POST  /api/groups/* /api/groups/*/members/*    ROLE_API_GROUPS_DELETE  DELETE  /api/groups/*     Security API     ROLE  METHOD  URL      ROLE_API_SECURITY_EDIT  POST  /api/security/sign     Administrative API     ROLE  METHOD  URL      ROLE_ADMIN  POST  /api/recreateIndex     User- and Role-switching  The External API supports user- and role-switching, i.e. it is possible to perform requests on behalf of another\nuser or role. The be able to perform this kind of requests, the user doing the actual requests needs to own ROLE_SUDO.",
            "title": "Authorization"
        },
        {
            "location": "/configuration/external-api/#testing",
            "text": "curl -u <api-user>:<api-user-passowrd> <admin-node>/api/info/me  should return a JSON containing information about the user  api-user .",
            "title": "Testing"
        },
        {
            "location": "/configuration/external-api/#accessing-distribution-artefacts",
            "text": "A major use case of the External API is to provide External Applications secure access to distribution artefacts.  For this purpose, Opencast comes with a special workflow operation: WOH publish-configure\n(see  ConfigurablePublishWorkflowOperationHandler )\ncreates publication elements that do not just contain a single URL to the publication channel,\nbut also contain URLs for each of the attachments and tracks that have been published.  Note:  Secure access to distribution artefacts requires stream security to be enabled,\nsee  Stream Security Configuration .",
            "title": "Accessing Distribution Artefacts"
        },
        {
            "location": "/modules/",
            "text": "Module Documentation\n\n\nDocumentation for modules included in Opencast.\n\n\n\n\nAtom and RSS Feed\n\n\nMedia Module\n\n\nLTI Module\n\n\nPlayer\n\n\nConfiguration\n\n\nURL Parameter\n\n\n\n\n\n\nSearch Index\n\n\nStream Security\n\n\nText Extraction\n\n\nVideoeditor\n\n\nSetup\n\n\nArchitecture\n\n\n\n\n\n\nVideo Segmentation\n\n\nYouTube Publication",
            "title": "Overview"
        },
        {
            "location": "/modules/#module-documentation",
            "text": "Documentation for modules included in Opencast.   Atom and RSS Feed  Media Module  LTI Module  Player  Configuration  URL Parameter    Search Index  Stream Security  Text Extraction  Videoeditor  Setup  Architecture    Video Segmentation  YouTube Publication",
            "title": "Module Documentation"
        },
        {
            "location": "/modules/atomrss/",
            "text": "Configure Atom and RSS Feeds\n\n\nThis document will help you understand and configure the Opencast RSS and Atom feed catalog. The catalog supports\nmultiple versions of each syndication format.\n\n\nFeed Catalog\n\n\nThe catalog is located at:\n\n\nhttp://opencast.example.edu:8080/feeds\n\n\n\nIndividual feeds are located at:\n\n\nhttp://opencast.example.edu:8080/feeds/<feed_selector>\n\n\n\nDefaults\n\n\nThe catalog contains the following default feeds:\n\n\nLatest\n\n\nhttp://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/latest\n\n\n\nNeed an example? Visit http://demo.opencastproject.org/feeds/atom/1.0/latest\n\n\nSeries\n\n\nhttp://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/series/<series_id>\n\n\n\nAggregation (of a set of series)\n\n\nhttp://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/aggregated/<name_of_configured_aggregation>\n\n\n\nCustom\n\n\nhttp://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/custom/<query>\n\n\n\nAggregation\n\n\nThe feed allows administrators to pre-configure feeds for specific sets of series. Given the following configuration,\nhttp://opencast.example.edu:8080/feeds/aggregated/myseries would return the latest episodes from series \nseries_1\n and\n\nseries_2\n.\n\n\nThe Opencast feed specifications are located in:\n\n\n.../etc/feeds\n\n\n\nUpdate aggregation.properties, the specification for an example feed aggregation:\n\n\nfeed.selector=myseries\nfeed.series=series_1,series_2\n\n\n\nCustom\n\n\nThe Opencast feed specifications are located in:\n\n\n.../etc/feeds\n\n\n\nBelow is custom.properties, the default specification for an example custom feed of published episodes:\n\n\nfeed.class=org.opencastproject.feed.impl.CustomFeedService\nfeed.uri=custom\nfeed.size=20\nfeed.query=dc_title-sum:{0}\nfeed.name=Special episodes\nfeed.description=Special collection of episodes\nfeed.copyright=All rights reserved by The Opencast Project\nfeed.home=/engage/ui\nfeed.entry=/engage/ui/embed.html?id={0}\nfeed.cover=/engage/feed-cover.png\nfeed.rssflavors=presentation/delivery,presenter/delivery,presenter/feed+preview,presenter/search+preview\nfeed.rsstags=rss\nfeed.rssmediatype=video,audio\nfeed.atomflavors=presentation/delivery,presenter/delivery,presenter/feed+preview,presenter/search+preview\nfeed.atomtags=atom\n\n\n\nProperties\n\n\nThe following properties are common to all feed specifications:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeed.class\n\n\nJava implementation, e.g. LatestFeedService.\n\n\n\n\n\n\nfeed.uri\n\n\nFeed location/identifier\n\n\n\n\n\n\nfeed.size\n\n\nMaximum number of entries in the feed (defaul: 100). Set to 0 to include all available entries.\n\n\n\n\n\n\nfeed.selector\n\n\nFeed route pattern, e.g. latest.\n\n\n\n\n\n\nfeed.name\n\n\nFeed title\n\n\n\n\n\n\nfeed.description\n\n\nFeed description\n\n\n\n\n\n\nfeed.copyright\n\n\nFeed copyright notice\n\n\n\n\n\n\nfeed.home\n\n\nFeed catalog homepage, e.g. http://www.opencastproject.org.\n\n\n\n\n\n\nfeed.entry\n\n\nThe route pattern used to generate links to individual enclosures, e.g. /engage/ui/embed.html?id={0}.\n\n\n\n\n\n\nfeed.cover\n\n\nFeed image\n\n\n\n\n\n\nfeed.rssflavors\n\n\nThe RSS enclosure route pattern, e.g. presenter/delivery, selected according to their appearance.\n\n\n\n\n\n\nfeed.rsstags\n\n\nA comma, semi-colon or space-separated list of tags used to filter available enclosures\n\n\n\n\n\n\nfeed.rssmediatype\n\n\nA comma, semi-colon or space-separated list of tags used to decide whether to prefer video or audio enclosures\n\n\n\n\n\n\nfeed.atomflavors\n\n\nThe Atom enclosures route pattern, e.g. presenter/delivery.\n\n\n\n\n\n\nfeed.atomtags\n\n\nA comma, semi-colon or space-separated list of tags used to filter available enclosures\n\n\n\n\n\n\n\n\nThe following properties are specific to custom feeds:\n\n\n\n\n\n\n\n\nName\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nfeed.query\n\n\nA custom lucene query, matched again Java's MessageFormat using solr.\n\n\n\n\n\n\n\n\nThe query \nhttp://opencast.example.edu:8080/feeds/alphabetical/a\n would return all episodes starting with the letter a.\n\n\nfeed.selector=alphabetical\nfeed.query=dc_title:{0}*",
            "title": "Atom/RSS Feed"
        },
        {
            "location": "/modules/atomrss/#configure-atom-and-rss-feeds",
            "text": "This document will help you understand and configure the Opencast RSS and Atom feed catalog. The catalog supports\nmultiple versions of each syndication format.",
            "title": "Configure Atom and RSS Feeds"
        },
        {
            "location": "/modules/atomrss/#feed-catalog",
            "text": "The catalog is located at:  http://opencast.example.edu:8080/feeds  Individual feeds are located at:  http://opencast.example.edu:8080/feeds/<feed_selector>",
            "title": "Feed Catalog"
        },
        {
            "location": "/modules/atomrss/#defaults",
            "text": "The catalog contains the following default feeds:",
            "title": "Defaults"
        },
        {
            "location": "/modules/atomrss/#latest",
            "text": "http://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/latest  Need an example? Visit http://demo.opencastproject.org/feeds/atom/1.0/latest",
            "title": "Latest"
        },
        {
            "location": "/modules/atomrss/#series",
            "text": "http://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/series/<series_id>",
            "title": "Series"
        },
        {
            "location": "/modules/atomrss/#aggregation-of-a-set-of-series",
            "text": "http://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/aggregated/<name_of_configured_aggregation>",
            "title": "Aggregation (of a set of series)"
        },
        {
            "location": "/modules/atomrss/#custom",
            "text": "http://demo.opencastproject.org/feeds/[atom|rss|*]/<version_number>/custom/<query>",
            "title": "Custom"
        },
        {
            "location": "/modules/atomrss/#aggregation",
            "text": "The feed allows administrators to pre-configure feeds for specific sets of series. Given the following configuration,\nhttp://opencast.example.edu:8080/feeds/aggregated/myseries would return the latest episodes from series  series_1  and series_2 .  The Opencast feed specifications are located in:  .../etc/feeds  Update aggregation.properties, the specification for an example feed aggregation:  feed.selector=myseries\nfeed.series=series_1,series_2",
            "title": "Aggregation"
        },
        {
            "location": "/modules/atomrss/#custom_1",
            "text": "The Opencast feed specifications are located in:  .../etc/feeds  Below is custom.properties, the default specification for an example custom feed of published episodes:  feed.class=org.opencastproject.feed.impl.CustomFeedService\nfeed.uri=custom\nfeed.size=20\nfeed.query=dc_title-sum:{0}\nfeed.name=Special episodes\nfeed.description=Special collection of episodes\nfeed.copyright=All rights reserved by The Opencast Project\nfeed.home=/engage/ui\nfeed.entry=/engage/ui/embed.html?id={0}\nfeed.cover=/engage/feed-cover.png\nfeed.rssflavors=presentation/delivery,presenter/delivery,presenter/feed+preview,presenter/search+preview\nfeed.rsstags=rss\nfeed.rssmediatype=video,audio\nfeed.atomflavors=presentation/delivery,presenter/delivery,presenter/feed+preview,presenter/search+preview\nfeed.atomtags=atom",
            "title": "Custom"
        },
        {
            "location": "/modules/atomrss/#properties",
            "text": "The following properties are common to all feed specifications:     Name  Description      feed.class  Java implementation, e.g. LatestFeedService.    feed.uri  Feed location/identifier    feed.size  Maximum number of entries in the feed (defaul: 100). Set to 0 to include all available entries.    feed.selector  Feed route pattern, e.g. latest.    feed.name  Feed title    feed.description  Feed description    feed.copyright  Feed copyright notice    feed.home  Feed catalog homepage, e.g. http://www.opencastproject.org.    feed.entry  The route pattern used to generate links to individual enclosures, e.g. /engage/ui/embed.html?id={0}.    feed.cover  Feed image    feed.rssflavors  The RSS enclosure route pattern, e.g. presenter/delivery, selected according to their appearance.    feed.rsstags  A comma, semi-colon or space-separated list of tags used to filter available enclosures    feed.rssmediatype  A comma, semi-colon or space-separated list of tags used to decide whether to prefer video or audio enclosures    feed.atomflavors  The Atom enclosures route pattern, e.g. presenter/delivery.    feed.atomtags  A comma, semi-colon or space-separated list of tags used to filter available enclosures     The following properties are specific to custom feeds:     Name  Description      feed.query  A custom lucene query, matched again Java's MessageFormat using solr.     The query  http://opencast.example.edu:8080/feeds/alphabetical/a  would return all episodes starting with the letter a.  feed.selector=alphabetical\nfeed.query=dc_title:{0}*",
            "title": "Properties"
        },
        {
            "location": "/modules/ltimodule/",
            "text": "Integrating Opencast in an LMS with The LTI module\n\n\nThe LTI - \"Learning Tools Interoperability\"  module has been introduced to offer an easy way to integrate Opencast in a learning management system. This guide has been written to explain how to use this module.\nFor more information about LTI specifications themselves, please visit http://www.imsglobal.org/toolsinteroperability2.cfm or http://developers.imsglobal.org/.\n\n\nHow To Use It\n\n\nTest if the LTI module is present in the Opencast instance.\nFirst of all, be sure that the module matterhorn-lti has been compiled, deployed and starts within the opencast instance.To test if the module is running, go on the page\n\nOPENCAST-URL/ltitools/index.html\n.\n\n\nA welcome message from the LTI tools should appear. This is the default index page for the LTI tool. But two ready-to-use elements  are available in this module:\n\n\nThe engage player:\n\nOPENCAST-URL/ltitools/player/index.html?id=RESOURCEID\n\n\nThe media module (recording list, use the player above): \nOPENCAST-URL/ltitools/series/index.html?series=[SERIES-ID]\n\n\nIf no SERIES-ID is given, the media module will display the recordings from all the series.\n\n\nConfigure Opencast\n\n\nThe integration of Opencast in the LMS through the LTI module has to be configured on both sides: In Opencast and in the LMS.\nTo let the LMS access Opencast, the security file etc/security/mh_default_org.xml from the opencast folder must be configured. The relevant sections are shown below:\nUncomment:\n\n\n<sec:custom-filter after=\"BASIC_AUTH_FILTER\" ref=\"oauthProtectedResourceFilter\" />\n\n\n\n\nSet the CONSUMER_KEY and the CONSUMER_SECRET\n\n\n  <!-- ####################### -->\n  <!-- # OAuth (LTI) Support # -->\n  <!-- ####################### -->\n  <bean name=\"oAuthConsumerDetailsService\" class=\"org.opencastproject.kernel.security.OAuthSingleConsumerDetailsService\">\n    <constructor-arg index=\"0\" ref=\"userDetailsService\" />\n    <constructor-arg index=\"1\" value=\"CONSUMER_KEY\" />\n    <constructor-arg index=\"2\" value=\"CONSUMER_SECRET\" />\n    <constructor-arg index=\"3\" value=\"consumerName\" />\n  </bean>\n\n\n\n\nChange trustedKey to:\n\n\n<bean class=\"org.opencastproject.kernel.security.LtiLaunchAuthenticationHandler\">\n        <constructor-arg index=\"0\" ref=\"userDetailsService\" />\n        <constructor-arg index=\"1\" ref=\"securityService\" />\n        <constructor-arg index=\"2\">\n          <list>\n            <value>CONSUMER_KEY</value>\n          </list>\n        </constructor-arg>\n      </bean>\n\n\n\n\n\n\nThe two OAuth parameters CONSUMER_KEY and CONSUMER_SECRET have to be set with your own values.\nThey are then required to embed OPENCAST into my LMS.\n\n\n\n\nConfigure the LMS\n\n\nTo connect OPENCAST to the LMS additional configuration parameters besides the LTI endpoint (ENGAGE-URL/lti), the consumerkey and consumersecret are needed on the LMS side. OPENCAST uses custom LTI tags to pass additional information. These include the kind of interface to present (engage player or media module) and the id of the media to show.\n\n\nThe interface is passed using the custom_tool parameter:\n\ncustom_tool = ltitools/player/index.html  (to show the engage player)\n\nor\n\ncustom_tool = ltitools/series/index.html (to show the series overview)\n\n\nThe ID of the series/episode needs to be passed differently depending on the interface chosen. For the engage player the custom_id field is used:\n\ncustom_id = 3e9f15b1-97ef-4be6-8276-59da869ceecd\n\nFor the series overview the id is passed as custom_series:\n\ncustom_series = 3e9f15b1-97ef-4be6-8276-59da869ceecd\n\n\nFor debugging purposes, it could be useful to set the following custom tag:\n\ncustom_test = true\n\n\nFor more information about how to set custom LTI tags, please check the documenation of your LMS.\n\n\nHow To Customise It\n\n\nThe LTI module can be extended/customised to fullfill your own needs.  The default elements from the LTI module (player, series) can be found in the folder \nOPENCAST/modules/matterhorn-lti/src/main/resources/tools\n.  These elements can be modified or new one can be created to extend the LTI module. Keep in mind that the player and series elements are using some files from the OPENCAST/shared-resources folder. These files are copied at compile-time. For more information about it, look at the maven pom file of the LTI module.",
            "title": "LTI Module"
        },
        {
            "location": "/modules/ltimodule/#integrating-opencast-in-an-lms-with-the-lti-module",
            "text": "The LTI - \"Learning Tools Interoperability\"  module has been introduced to offer an easy way to integrate Opencast in a learning management system. This guide has been written to explain how to use this module.\nFor more information about LTI specifications themselves, please visit http://www.imsglobal.org/toolsinteroperability2.cfm or http://developers.imsglobal.org/.",
            "title": "Integrating Opencast in an LMS with The LTI module"
        },
        {
            "location": "/modules/ltimodule/#how-to-use-it",
            "text": "Test if the LTI module is present in the Opencast instance.\nFirst of all, be sure that the module matterhorn-lti has been compiled, deployed and starts within the opencast instance.To test if the module is running, go on the page OPENCAST-URL/ltitools/index.html .  A welcome message from the LTI tools should appear. This is the default index page for the LTI tool. But two ready-to-use elements  are available in this module:  The engage player: OPENCAST-URL/ltitools/player/index.html?id=RESOURCEID  The media module (recording list, use the player above):  OPENCAST-URL/ltitools/series/index.html?series=[SERIES-ID]  If no SERIES-ID is given, the media module will display the recordings from all the series.",
            "title": "How To Use It"
        },
        {
            "location": "/modules/ltimodule/#configure-opencast",
            "text": "The integration of Opencast in the LMS through the LTI module has to be configured on both sides: In Opencast and in the LMS.\nTo let the LMS access Opencast, the security file etc/security/mh_default_org.xml from the opencast folder must be configured. The relevant sections are shown below:\nUncomment:  <sec:custom-filter after=\"BASIC_AUTH_FILTER\" ref=\"oauthProtectedResourceFilter\" />  Set the CONSUMER_KEY and the CONSUMER_SECRET    <!-- ####################### -->\n  <!-- # OAuth (LTI) Support # -->\n  <!-- ####################### -->\n  <bean name=\"oAuthConsumerDetailsService\" class=\"org.opencastproject.kernel.security.OAuthSingleConsumerDetailsService\">\n    <constructor-arg index=\"0\" ref=\"userDetailsService\" />\n    <constructor-arg index=\"1\" value=\"CONSUMER_KEY\" />\n    <constructor-arg index=\"2\" value=\"CONSUMER_SECRET\" />\n    <constructor-arg index=\"3\" value=\"consumerName\" />\n  </bean>  Change trustedKey to:  <bean class=\"org.opencastproject.kernel.security.LtiLaunchAuthenticationHandler\">\n        <constructor-arg index=\"0\" ref=\"userDetailsService\" />\n        <constructor-arg index=\"1\" ref=\"securityService\" />\n        <constructor-arg index=\"2\">\n          <list>\n            <value>CONSUMER_KEY</value>\n          </list>\n        </constructor-arg>\n      </bean>   The two OAuth parameters CONSUMER_KEY and CONSUMER_SECRET have to be set with your own values.\nThey are then required to embed OPENCAST into my LMS.",
            "title": "Configure Opencast"
        },
        {
            "location": "/modules/ltimodule/#configure-the-lms",
            "text": "To connect OPENCAST to the LMS additional configuration parameters besides the LTI endpoint (ENGAGE-URL/lti), the consumerkey and consumersecret are needed on the LMS side. OPENCAST uses custom LTI tags to pass additional information. These include the kind of interface to present (engage player or media module) and the id of the media to show.  The interface is passed using the custom_tool parameter: custom_tool = ltitools/player/index.html  (to show the engage player) \nor custom_tool = ltitools/series/index.html (to show the series overview)  The ID of the series/episode needs to be passed differently depending on the interface chosen. For the engage player the custom_id field is used: custom_id = 3e9f15b1-97ef-4be6-8276-59da869ceecd \nFor the series overview the id is passed as custom_series: custom_series = 3e9f15b1-97ef-4be6-8276-59da869ceecd  For debugging purposes, it could be useful to set the following custom tag: custom_test = true  For more information about how to set custom LTI tags, please check the documenation of your LMS.",
            "title": "Configure the LMS"
        },
        {
            "location": "/modules/ltimodule/#how-to-customise-it",
            "text": "The LTI module can be extended/customised to fullfill your own needs.  The default elements from the LTI module (player, series) can be found in the folder  OPENCAST/modules/matterhorn-lti/src/main/resources/tools .  These elements can be modified or new one can be created to extend the LTI module. Keep in mind that the player and series elements are using some files from the OPENCAST/shared-resources folder. These files are copied at compile-time. For more information about it, look at the maven pom file of the LTI module.",
            "title": "How To Customise It"
        },
        {
            "location": "/modules/mediamodule.configuration/",
            "text": "Media Module Configuration\n\n\nThe Media Module is the default overview of the distributed media files.\n\n\nThe configurations for the Media Module are done for each tenant. So the configuration keys are located in\n\n<opencast_home>/etc/org.opencastproject.organization-mh_default_org.cfg\n:\n\n\n\n\nprop.logo_mediamodule\n\n\nThis logo file will be displayed in the upper left of the Media Module page\n\n\nDefault: an Opencast logo\n\n\n\n\n\n\nprop.player\n\n\nThe player that should be use to play the videos.\n\n\nDefault: Opencast 2.0 (Theodul) player",
            "title": "Media Module"
        },
        {
            "location": "/modules/mediamodule.configuration/#media-module-configuration",
            "text": "The Media Module is the default overview of the distributed media files.  The configurations for the Media Module are done for each tenant. So the configuration keys are located in <opencast_home>/etc/org.opencastproject.organization-mh_default_org.cfg :   prop.logo_mediamodule  This logo file will be displayed in the upper left of the Media Module page  Default: an Opencast logo    prop.player  The player that should be use to play the videos.  Default: Opencast 2.0 (Theodul) player",
            "title": "Media Module Configuration"
        },
        {
            "location": "/modules/player.configuration/",
            "text": "Theodul Pass Player - Configuration\n\n\nThe Theodul Pass Player is the new default player from Opencast 2.0 onwards.  The old engage player from 1.x is still\navailable.\n\n\nThe configurations for the player are done for each tenant. So the configuration keys are located in\n\n.../etc/org.opencastproject.organization-mh_default_org.cfg\n.\n\n\nSelect the Opencast 2.0 Player\n\n\nTo activate the player set:\n\n\nprop.player=/engage/theodul/ui/core.html\n\n\n\nConfiguration\n\n\n\n\n\n\n\n\nProperty\n\n\nDescription\n\n\nOptions\n\n\n\n\n\n\n\n\n\n\nprop.logo_player\n\n\nLogo in the top right corner\n\n\nAny URL or local path to an image file\n\n\n\n\n\n\nprop.player.positioncontrols\n\n\nPosition of player controls\n\n\ntop\n, \nbottom\n (default)\n\n\n\n\n\n\nprop.player.mastervideotype\n\n\nDefault flavor of the master video *\n\n\nAny flavor or nothing\n\n\n\n\n\n\nprop.show_embed_links\n\n\nShow player embed code\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nprop.link_mediamodule\n\n\nIf to link to the media module\n\n\ntrue\n, \nfalse\n\n\n\n\n\n\nprop.player.shortcut.*\n\n\nKeyboard shortcut specifications\n\n\nAny key\n\n\n\n\n\n\n\n\nMaster Video Flavor\n\n\nThis specifies the flavor used to select the master video (the video on the left side in the video display). This video\nfile also provides the audio. If not set or no video of the specified type is available, the videos are taken in their\nsequence within the media package.",
            "title": "Configuration"
        },
        {
            "location": "/modules/player.configuration/#theodul-pass-player-configuration",
            "text": "The Theodul Pass Player is the new default player from Opencast 2.0 onwards.  The old engage player from 1.x is still\navailable.  The configurations for the player are done for each tenant. So the configuration keys are located in .../etc/org.opencastproject.organization-mh_default_org.cfg .",
            "title": "Theodul Pass Player - Configuration"
        },
        {
            "location": "/modules/player.configuration/#select-the-opencast-20-player",
            "text": "To activate the player set:  prop.player=/engage/theodul/ui/core.html",
            "title": "Select the Opencast 2.0 Player"
        },
        {
            "location": "/modules/player.configuration/#configuration",
            "text": "Property  Description  Options      prop.logo_player  Logo in the top right corner  Any URL or local path to an image file    prop.player.positioncontrols  Position of player controls  top ,  bottom  (default)    prop.player.mastervideotype  Default flavor of the master video *  Any flavor or nothing    prop.show_embed_links  Show player embed code  true ,  false    prop.link_mediamodule  If to link to the media module  true ,  false    prop.player.shortcut.*  Keyboard shortcut specifications  Any key",
            "title": "Configuration"
        },
        {
            "location": "/modules/player.configuration/#master-video-flavor",
            "text": "This specifies the flavor used to select the master video (the video on the left side in the video display). This video\nfile also provides the audio. If not set or no video of the specified type is available, the videos are taken in their\nsequence within the media package.",
            "title": "Master Video Flavor"
        },
        {
            "location": "/modules/player.url.parameter/",
            "text": "Theodul Pass Player - URL Parameters\n\n\nURL Parameters\n\n\n\n\ntime\n\n\nPossible values\n\n\nMinutes (with value \nX\n) and seconds (with value \nY\n)\n\n\nXmYs\n\n\nYsXm\n\n\nXmY\n\n\n\n\n\n\nMinutes (with value \nX\n) only\n\n\nXm\n\n\n\n\n\n\nSeconds (with value \nY\n) only\n\n\nYs\n\n\nY\n\n\n\n\n\n\nDefault value\n\n\n-\n\n\n\n\n\n\n\n\n\n\nDescription\n\n\nSeeks intially automatically to a specified time\n\n\nautomatically plays the video from the specified time on\n\n\n\n\n\n\n\n\n\n\nautoplay\n\n\nPossible values\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nDefault value\n\n\nfalse\n\n\n\n\n\n\nDescription\n\n\nAutomatically starts playing the video after a short delay\n\n\n\n\n\n\n\n\n\n\nquality\n\n\nPossible values\n\n\nlow\n\n\nmedium\n\n\nhigh\n\n\n\n\n\n\nDefault value\n\n\nmedium\n\n\n\n\n\n\nDescription\n\n\nSets a video quality if the video has been encoded in multiple\n  qualities\n\n\n\n\n\n\n\n\n\n\nmode\n\n\nPossible values\n\n\ndesktop\n\n\nembed\n\n\nmobile\n\n\n\n\n\n\nDefault value\n\n\ndesktop\n\n\n\n\n\n\nDescription\n\n\nSets the player mode manually\n\n\n\n\n\n\n\n\n\n\nbrowser\n\n\nPossible values\n\n\nall\n\n\ndefault\n\n\n\n\n\n\nDefault value\n\n\ndefault\n\n\n\n\n\n\nDescription\n\n\nIf your browser is not supported, try the new player with this flag activated\n  overwrites filtering for supported browsers with parameter set to \nall\n\n\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nhttp://YOUR.SERVER:8080/engage/theodul/ui/core.html?id=SOME-ID&time=3m30s\n\n\n\nDeveloper URL Parameters\n\n\n\n\ndebug\n\n\nPossible values\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nDefault value\n\n\nfalse\n\n\n\n\n\n\nDescription\n\n\nprints debug output to the developer console\n\n\n\n\n\n\n\n\n\n\ndebugEvents\n\n\nPossible values\n\n\ntrue\n\n\nfalse\n\n\n\n\n\n\nDefault value\n\n\nfalse\n\n\n\n\n\n\nDescription\n\n\nPrints debug output to the developer console when an event occurs\n\n\n\n\n\n\n\n\n\n\nformat\n\n\nPossible Values\n\n\nhls\n: Apple HTTP Live Streaming\n\n\ndash\n: MPEG DASH\n\n\nrtmp\n: Adobe RTMP (Flash)\n\n\nmp4\n: MP4 videos (no streaming)\n\n\nwebm\n: WebM videos (no streaming)\n\n\naudio\n: audio only (no streaming)\n\n\ndefault\n: reset to defaults\n\n\n\n\n\n\nDefault value\n\n\ndefault\n\n\n\n\n\n\nDescription\n\n\nsets the preferred (streaming) format\n\n\nif not available, the defaults will be selected\n\n\nthe value is permanently stored for the browser in the local storage\n\n\n\n\n\n\n\n\n\n\n\n\nExample\n\n\nhttp://YOUR.SERVER:8080/engage/theodul/ui/core.html?id=SOME-ID&debug=true&debugEvents=true",
            "title": "URL Parameters"
        },
        {
            "location": "/modules/player.url.parameter/#theodul-pass-player-url-parameters",
            "text": "",
            "title": "Theodul Pass Player - URL Parameters"
        },
        {
            "location": "/modules/player.url.parameter/#url-parameters",
            "text": "time  Possible values  Minutes (with value  X ) and seconds (with value  Y )  XmYs  YsXm  XmY    Minutes (with value  X ) only  Xm    Seconds (with value  Y ) only  Ys  Y    Default value  -      Description  Seeks intially automatically to a specified time  automatically plays the video from the specified time on      autoplay  Possible values  true  false    Default value  false    Description  Automatically starts playing the video after a short delay      quality  Possible values  low  medium  high    Default value  medium    Description  Sets a video quality if the video has been encoded in multiple\n  qualities      mode  Possible values  desktop  embed  mobile    Default value  desktop    Description  Sets the player mode manually      browser  Possible values  all  default    Default value  default    Description  If your browser is not supported, try the new player with this flag activated\n  overwrites filtering for supported browsers with parameter set to  all",
            "title": "URL Parameters"
        },
        {
            "location": "/modules/player.url.parameter/#example",
            "text": "http://YOUR.SERVER:8080/engage/theodul/ui/core.html?id=SOME-ID&time=3m30s",
            "title": "Example"
        },
        {
            "location": "/modules/player.url.parameter/#developer-url-parameters",
            "text": "debug  Possible values  true  false    Default value  false    Description  prints debug output to the developer console      debugEvents  Possible values  true  false    Default value  false    Description  Prints debug output to the developer console when an event occurs      format  Possible Values  hls : Apple HTTP Live Streaming  dash : MPEG DASH  rtmp : Adobe RTMP (Flash)  mp4 : MP4 videos (no streaming)  webm : WebM videos (no streaming)  audio : audio only (no streaming)  default : reset to defaults    Default value  default    Description  sets the preferred (streaming) format  if not available, the defaults will be selected  the value is permanently stored for the browser in the local storage",
            "title": "Developer URL Parameters"
        },
        {
            "location": "/modules/player.url.parameter/#example_1",
            "text": "http://YOUR.SERVER:8080/engage/theodul/ui/core.html?id=SOME-ID&debug=true&debugEvents=true",
            "title": "Example"
        },
        {
            "location": "/modules/searchindex/",
            "text": "Search Index Configuration\n\n\nOpencast has Solr included by default. This guide is only needed, if you want to run Solr on a separate server.\n\n\nThe software versions in these instructions are not the only versions that will work, they are just the version tested\nwhen this document was written.  Newer versions of both Tomcat and Solr are highly recommended.\n\n\nIntroduction\n\n\nOpencast services use filesystem, relational database, and/or search indexes to store and retrieve information. In\norder to cluster services across multiple servers, we must provide shared storage solutions for each of these\ntechnologies. We do this with NFS or ZFS for filesystems, JDBC for relational databases, and solr for search indexes. If\nyou plan on clustering either the workflow service or the search service, you must configure Opencast to use remote\nsolr servers as described below, otherwise no further action is required.\n\n\nObtaining the software\n\n\nSolr runs in any modern servlet environment such as Apache Tomcat 7. Download and unpack Tomcat.\n\n\n$ curl -O http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.5-beta/bin/apache-tomcat-7.0.5.zip\n$ unzip apache-tomcat-7.0.5.zip\n\n\n\nDownload solr from the closest mirror and unpack the zip file. Make sure the permissions are set properly (the zip file\ndoesn't retain proper unix permissions)\n\n\n$ curl -O http://archive.apache.org/dist/lucene/solr/1.4.1/apache-solr-1.4.1.zip\n$ unzip apache-solr-1.4.1.zip\n$ chmod 755 apache-tomcat-7.0.5/bin/*\n\n\n\nDeploy solr to tomcat\n\n\nCopy the solr example war file to tomcat's webapps directory and expand the war file.\n\n\n$ unzip apache-solr-1.4.1/example/webapps/solr.war -d apache-tomcat-7.0.5/webapps/solr/\n\n\n\nConfigure solr\n\n\nAdd the solr config files to the solr webapp in tomcat. If you are setting up the search service, use the solr config\nfrom the search module.\n\n\n$ cd apache-tomcat-7.0.5\n$ cp -R [opencast source]/modules/matterhorn-search-service-impl/src/main/resources/solr solr\n\n\n\nAlternatively, if this is the solr index supporting the workflow service, copy those files instead:\n\n\n$ cd apache-tomcat-7.0.5\n$ cp -R [opencast source]/modules/matterhorn-workflow-service-impl/src/main/resources/solr solr\n\n\n\nEdit the dataDir setting in solr/conf/solrconfig.xml to specify the directory you want to use for the index files.\n\n\nDependency of the workflow index\n\n\nThe index has a dependency on a Opencast class. The easiest way of getting rid of this dependency is providing a .jar\nfile with that class within a directory named lib in the solr folder (you may need to create it if it does not exist).\nThe .jar file can be the compiled matterhorn-solr bundle. Placing the jar in the main Tomcat lib directory does not\nwork.\n\n\nStart the server\n\n\n$ bin/startup.sh\nUsing CATALINA_BASE:   /Users/josh/Desktop/apache-tomcat-7.0.5\nUsing CATALINA_HOME:   /Users/josh/Desktop/apache-tomcat-7.0.5\nUsing CATALINA_TMPDIR: /Users/josh/Desktop/apache-tomcat-7.0.5/temp\nUsing JRE_HOME:        /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home\n\n\n\nYou should see that the solr server is running on http://localhost:8080/solr\n\n\n\n\nYou can use the admin screen to monitor the server or make ad-hoc queries:\n\n\n\n\n\n\nSecure the solr server\n\n\nJust like with a relational database server, it is critical that you limit access to the solr server. Opencast's\ncommunication with solr servers is unauthenticated, so you must secure a firewall on the solr servers that accepts HTTP\nrequests only from Opencast servers. If these servers were publicly accessible, anyone could make changes to\nOpencast data from outside Opencast itself.\n\n\nConfigure Opencast\n\n\nSet the URL to this solr server in Opencast's custom.properties file:\n\n\norg.opencastproject.search.solr.url=http://your.solr.server.edu:8080/solr/\n\n\n\nIf this solr server is supporting clustered workflow services:\n\n\norg.opencastproject.workflow.solr.url==http://your.solr.server.edu:8080/solr/\n\n\n\nIt is important to understand that a solr server provides exactly one schema, and one schema only. If you want to\ncluster both the workflow service and the search service, you will need two separate solr servers. These solr servers\ncan run on the same machine, but each will needs its own servlet container and port.",
            "title": "Search Index"
        },
        {
            "location": "/modules/searchindex/#search-index-configuration",
            "text": "Opencast has Solr included by default. This guide is only needed, if you want to run Solr on a separate server.  The software versions in these instructions are not the only versions that will work, they are just the version tested\nwhen this document was written.  Newer versions of both Tomcat and Solr are highly recommended.",
            "title": "Search Index Configuration"
        },
        {
            "location": "/modules/searchindex/#introduction",
            "text": "Opencast services use filesystem, relational database, and/or search indexes to store and retrieve information. In\norder to cluster services across multiple servers, we must provide shared storage solutions for each of these\ntechnologies. We do this with NFS or ZFS for filesystems, JDBC for relational databases, and solr for search indexes. If\nyou plan on clustering either the workflow service or the search service, you must configure Opencast to use remote\nsolr servers as described below, otherwise no further action is required.",
            "title": "Introduction"
        },
        {
            "location": "/modules/searchindex/#obtaining-the-software",
            "text": "Solr runs in any modern servlet environment such as Apache Tomcat 7. Download and unpack Tomcat.  $ curl -O http://archive.apache.org/dist/tomcat/tomcat-7/v7.0.5-beta/bin/apache-tomcat-7.0.5.zip\n$ unzip apache-tomcat-7.0.5.zip  Download solr from the closest mirror and unpack the zip file. Make sure the permissions are set properly (the zip file\ndoesn't retain proper unix permissions)  $ curl -O http://archive.apache.org/dist/lucene/solr/1.4.1/apache-solr-1.4.1.zip\n$ unzip apache-solr-1.4.1.zip\n$ chmod 755 apache-tomcat-7.0.5/bin/*",
            "title": "Obtaining the software"
        },
        {
            "location": "/modules/searchindex/#deploy-solr-to-tomcat",
            "text": "Copy the solr example war file to tomcat's webapps directory and expand the war file.  $ unzip apache-solr-1.4.1/example/webapps/solr.war -d apache-tomcat-7.0.5/webapps/solr/",
            "title": "Deploy solr to tomcat"
        },
        {
            "location": "/modules/searchindex/#configure-solr",
            "text": "Add the solr config files to the solr webapp in tomcat. If you are setting up the search service, use the solr config\nfrom the search module.  $ cd apache-tomcat-7.0.5\n$ cp -R [opencast source]/modules/matterhorn-search-service-impl/src/main/resources/solr solr  Alternatively, if this is the solr index supporting the workflow service, copy those files instead:  $ cd apache-tomcat-7.0.5\n$ cp -R [opencast source]/modules/matterhorn-workflow-service-impl/src/main/resources/solr solr  Edit the dataDir setting in solr/conf/solrconfig.xml to specify the directory you want to use for the index files.",
            "title": "Configure solr"
        },
        {
            "location": "/modules/searchindex/#dependency-of-the-workflow-index",
            "text": "The index has a dependency on a Opencast class. The easiest way of getting rid of this dependency is providing a .jar\nfile with that class within a directory named lib in the solr folder (you may need to create it if it does not exist).\nThe .jar file can be the compiled matterhorn-solr bundle. Placing the jar in the main Tomcat lib directory does not\nwork.",
            "title": "Dependency of the workflow index"
        },
        {
            "location": "/modules/searchindex/#start-the-server",
            "text": "$ bin/startup.sh\nUsing CATALINA_BASE:   /Users/josh/Desktop/apache-tomcat-7.0.5\nUsing CATALINA_HOME:   /Users/josh/Desktop/apache-tomcat-7.0.5\nUsing CATALINA_TMPDIR: /Users/josh/Desktop/apache-tomcat-7.0.5/temp\nUsing JRE_HOME:        /System/Library/Frameworks/JavaVM.framework/Versions/CurrentJDK/Home  You should see that the solr server is running on http://localhost:8080/solr   You can use the admin screen to monitor the server or make ad-hoc queries:",
            "title": "Start the server"
        },
        {
            "location": "/modules/searchindex/#secure-the-solr-server",
            "text": "Just like with a relational database server, it is critical that you limit access to the solr server. Opencast's\ncommunication with solr servers is unauthenticated, so you must secure a firewall on the solr servers that accepts HTTP\nrequests only from Opencast servers. If these servers were publicly accessible, anyone could make changes to\nOpencast data from outside Opencast itself.",
            "title": "Secure the solr server"
        },
        {
            "location": "/modules/searchindex/#configure-opencast",
            "text": "Set the URL to this solr server in Opencast's custom.properties file:  org.opencastproject.search.solr.url=http://your.solr.server.edu:8080/solr/  If this solr server is supporting clustered workflow services:  org.opencastproject.workflow.solr.url==http://your.solr.server.edu:8080/solr/  It is important to understand that a solr server provides exactly one schema, and one schema only. If you want to\ncluster both the workflow service and the search service, you will need two separate solr servers. These solr servers\ncan run on the same machine, but each will needs its own servlet container and port.",
            "title": "Configure Opencast"
        },
        {
            "location": "/modules/stream-security/",
            "text": "Stream Security\n\n\nIntroduction\n\n\nSecurity usually is a challenging, technically aspects of any software system. However, diving into technical details\nbefore understanding the principles of the solution can lead to false assumptions about the level of security in place.\nTherefore, this section provides a high-level overview of Opencast's stream security functionality.\n\n\nContent Security in Opencast\n\n\nIn many settings, some or even all content published by an Opencast installation must not be accessible by everyone.\nInstead, access should be restricted to those users with corresponding permissions. So, if access control already\nensures that each user only has access to the recordings he or she is allowed to see, what does stream security add to\nthe mix?\n\n\nLooking more closely at what it means to serve recordings to a viewer reveals that a distinction needs to be made\nbetween:\n\n\n\n\nthe presentation of the video player, the recording metadata\n\n\nthe serving of the video streams, preview images etc. to that player.\n\n\n\n\nThe former is protected by the engage part of Opencast. The latter may be served by download and streaming servers.\nThose distribution servers are independent of Opencast and have no knowledge about the current user and its permissions\nwith regard to the requested video asset .\n\n\nTo summarize: Opencast is capable of assessing a recording\u2019s access control list and the current user\u2019s permissions to\ndecide if a user is allowed to access the recording\u2019s metadata and the player.  External download and streaming servers,\nserving the actual video files are not aware of these permissions. As a result, nothing prevents an authorized user from\npassing on the actual video and image URLs to the public, thereby circumventing the restrictions implied on the\npresentation layer earlier on.\n\n\nSecuring the Streams\n\n\nSince the download and streaming servers do not (and should not) have access to security related information about the\nuser, its roles nor its permissions with regard to the media files, there is no way to perform authorization checks the\nsame way Opencast is performing them while serving up recording metadata. The only way to decide if a given request\nshould be served or not is to leave authorization to Opencast and agree on a secure protocol that defines whether a\nrequest is meant to be granted by Opencast or not.\n\n\nStream security solves the problem exactly as described: Each request that is sent to any of the download or streaming\nservers must contain a validation policy, indicating for how long access should be granted and optionally even from\nwhich IP address. Signing of the policy ensures that potential changes to the policy will be detected. On the other end,\nthe server must be enabled to verify the signature and extract the policy to verify whether it should comply with the\nrequest or not.\n\n\nWhat is secured and what is not?\n\n\nEven with Stream security enabled, some loopholes exist where unauthorized viewers might be able to get access to\nprotected resources, even though for a limited time only. The following section describes in detail what is and what\nis not secured.\n\n\nURL hacking\n\n\nExecutive summary: Accessing a resource with an unsigned or incorrectly signed URL is impossible.\n\n\nResources distributed by Opencast are organized in a file structure that is built upon a resource\u2019s series identifier as\nwell as the identifier of the recording itself. Since those identifiers usually are based on\n\nUUIDs\n, guessing the URL is hard but not impossible. In\naddition, a malicious user might be getting hold of a valid identifier through network sniffing, social hacking or by\nother means.\n\n\nWith Stream Security enabled, a user cannot access that resource, since the URL for accessing the resource would either\nbe lacking the policy and signature completely or would contain a broken signature due to an identifier mismatch in the\npolicy.\n\n\nIt is important to note that, if stream security is enabled, all resources will be signed and protected, even ones that\ndo not have any access restrictions defined in their access control lists. Accessing resources with unsigned URLs will\nnot be possible.\n\n\nRevoking access rights\n\n\nExecutive summary: Access is revoked once the digital signature expires.\n\n\nIf a user has the rights to access a resource, it does not automatically mean that permission has been granted for a\nlifetime. After a signed URL\u2019s policy has expired, the URL must receive an updated policy and be signed again in order\nto provide continuous access to the corresponding resource, so in the case of revoked access rights, the user in\nquestion will be able to keep access to the resource as long as the initially signed url is valid. After that, Opencast\nwill not provide a signed URL anymore due to the change in permissions.\n\n\nOn the other hand, there is no way to revoke access to that resource for that particular user unless the URL expires.\nThe only way would be to completely remove the resource from the distribution server. It is therefore important to\nchoose reasonable expiration times for signed URLs.\n\n\nUnauthorized sharing of URLs\n\n\nExecutive summary: Leaked signed URLs are only accessible for the duration of the validity of the signature.\n\n\nA signed URL shared by an authorized user with a non-authorized third party will expire (as explained above). The\nexpiration time can be set as low as some seconds but will then require even authorized users to obtain newly signed\nURLs as they continue to access protected content (e.g. the user takes a quick break watching a recording by hitting\n\u201cpause\u201d, then hits \u201cplay\u201d again to resume). This risk can be lowered further by restricting a resource to a client\u2019s IP\naddress so that it can only be played by someone with the same IP.\n\n\nDownloading or ripping content\n\n\nExecutive summary: Content protected by stream security is not protected against unauthorized publication through\nauthorized users.\n\n\nSince stream security does not implement digital rights management (DRM), authorized users may download content while in\npossession of correctly signed URLs. When that content is republished on systems that are not under the control of the\noriginal owner (i.e. are not protected by stream security or any other means), it is publicly available.\n\n\nMost institutions will have a policy in place that legally prevents circumventing protection and sharing of protected\nmedia, and as a result, the above scenario will be taxed as piracy.\n\n\nTechnical Overview\n\n\nStream security consists of several components, and each of these components must be installed and configured properly,\notherwise the system may not behave as expected. This part of the documentation describes how each of the components\nneed to be installed and holds information on which configuration options are available.\n\n\nTerms\n\n\nFor the understanding of this document it is important to have the following terms clearly defined.\n\n\nPolicy\n\n\nA policy defines the timeframe and (optionally) from which addresses a specified resource may be accessed. In order to\nexchange the policy between system components, the involved components must agree on a serialization specification.\n\n\nSignature\n\n\nThe signature expresses the validity of a policy. As with the policy, the system\u2019s signature components, must follow a\npredefined signing algorithm. Only then is it possible to verify if the signature was issued for a specific policy, or\nif either the signature or the policy was modified.\n\n\nKey\n\n\nUsing keys is a common way to protect information that is being shared between two or more systems. In stream security,\nkeys are used to prevent signature forgery. A key consists of an identifier (ID) and a secret value. The keys need to be\nkept private, otherwise everyone can create signatures and thereby gain unlimited access to all resource protected by\nthat key.\n\n\nSigning Protocol\n\n\nThe combination of a policy specification and a signature algorithm forms the signing protocol, where the policy\ncontains the rules to be applied and the signature ensures that the rules remain unaltered. Components that implement\nthe same signing protocol are compatible and can be used in combination.\n\n\nComponents\n\n\nA typical signing infrastructure consists of two main components: a signing service and a verification component. While\nthe signing service is used to sign arbitrary URLs, the verification component is located on the distribution servers to\nprotect the resources and only serve requests that have been properly signed.\n\n\nAll signing providers and verification components developed by the Opencast community implement the Opencast signing\nprotocol as documented in the developer guide and are therefore compatible.\n\n\nURL Signing Service\n\n\nThe URL signing service is designed to support one or more signing implementations called signing providers. With this\nconcept, different signing protocols, and by virtue, different verification components are supported. The resource is\npresented to each signing provider in turn, where it is either signed or passed on. This process continues until a\nsignature is obtained.\n\n\nOut of the box, Opencast provides the following implementation:\n\n\n\n\nGeneric Signing Provider\n: This provider may be used in combination with HTTP servers. It appends the necessary\n  information (policy, signature and key id) to the URL.\n\n\n\n\nThe URL signing service makes it straightforward to provide additional implementations to handle third party\ndistribution servers URL signatures. This becomes important in situations where files are served by a server that is\ncurrently not supported or if files are served by a CDN that implements its own proprietary signing protocol.\n\n\nVerification components\n\n\nIn order to take advantage of the signed URLs, a verification component needs to reside on the distribution servers to\nverify the validity of the signature (i.e. check that the URL has not been altered after it was signed) and then grant\nor deny access to the resource, based on the policy associated with the URL.\n\n\nIn addition to these external verification components there is also an Opencast verification component called the\n\nUrlSigningFilter\n that is used to protect files that Opencast itself provides.\n\n\nVerification components have the option of strict or non-strict checking. Strict verification of resources means the\nentire URL will be considered when comparing the incoming request for a resource against the policy, including the\nscheme (http, https, etc.), hostname and port. If using non-strict checking, only the path to the resource will be\nconsidered. So if the request is for a resource at \nhttp://httpdserver:8080/the/full/path/video.mp4\n, only the\n\n/the/full/path/video.mp4\n part of the URL will be checked against the policy\u2019s path. This is useful when using a load\nbalancer so that the requested hostname does not have to match the actual hostname or if a video player is rewriting\nrequests, e.g. by inserting the port number.\n\n\nFurther Information\n\n\nFor further technical information like installation instructions, configuration guides, server plugins and the signing\nspecification, please have a look at these documents:\n\n\n\n\nStream Security Configuration & Testing\n\n\nThe Opencast Signing Protocol is defined in the subsection Stream Security in the modules section of the developer guide.",
            "title": "Stream Security"
        },
        {
            "location": "/modules/stream-security/#stream-security",
            "text": "",
            "title": "Stream Security"
        },
        {
            "location": "/modules/stream-security/#introduction",
            "text": "Security usually is a challenging, technically aspects of any software system. However, diving into technical details\nbefore understanding the principles of the solution can lead to false assumptions about the level of security in place.\nTherefore, this section provides a high-level overview of Opencast's stream security functionality.",
            "title": "Introduction"
        },
        {
            "location": "/modules/stream-security/#content-security-in-opencast",
            "text": "In many settings, some or even all content published by an Opencast installation must not be accessible by everyone.\nInstead, access should be restricted to those users with corresponding permissions. So, if access control already\nensures that each user only has access to the recordings he or she is allowed to see, what does stream security add to\nthe mix?  Looking more closely at what it means to serve recordings to a viewer reveals that a distinction needs to be made\nbetween:   the presentation of the video player, the recording metadata  the serving of the video streams, preview images etc. to that player.   The former is protected by the engage part of Opencast. The latter may be served by download and streaming servers.\nThose distribution servers are independent of Opencast and have no knowledge about the current user and its permissions\nwith regard to the requested video asset .  To summarize: Opencast is capable of assessing a recording\u2019s access control list and the current user\u2019s permissions to\ndecide if a user is allowed to access the recording\u2019s metadata and the player.  External download and streaming servers,\nserving the actual video files are not aware of these permissions. As a result, nothing prevents an authorized user from\npassing on the actual video and image URLs to the public, thereby circumventing the restrictions implied on the\npresentation layer earlier on.",
            "title": "Content Security in Opencast"
        },
        {
            "location": "/modules/stream-security/#securing-the-streams",
            "text": "Since the download and streaming servers do not (and should not) have access to security related information about the\nuser, its roles nor its permissions with regard to the media files, there is no way to perform authorization checks the\nsame way Opencast is performing them while serving up recording metadata. The only way to decide if a given request\nshould be served or not is to leave authorization to Opencast and agree on a secure protocol that defines whether a\nrequest is meant to be granted by Opencast or not.  Stream security solves the problem exactly as described: Each request that is sent to any of the download or streaming\nservers must contain a validation policy, indicating for how long access should be granted and optionally even from\nwhich IP address. Signing of the policy ensures that potential changes to the policy will be detected. On the other end,\nthe server must be enabled to verify the signature and extract the policy to verify whether it should comply with the\nrequest or not.",
            "title": "Securing the Streams"
        },
        {
            "location": "/modules/stream-security/#what-is-secured-and-what-is-not",
            "text": "Even with Stream security enabled, some loopholes exist where unauthorized viewers might be able to get access to\nprotected resources, even though for a limited time only. The following section describes in detail what is and what\nis not secured.",
            "title": "What is secured and what is not?"
        },
        {
            "location": "/modules/stream-security/#url-hacking",
            "text": "Executive summary: Accessing a resource with an unsigned or incorrectly signed URL is impossible.  Resources distributed by Opencast are organized in a file structure that is built upon a resource\u2019s series identifier as\nwell as the identifier of the recording itself. Since those identifiers usually are based on UUIDs , guessing the URL is hard but not impossible. In\naddition, a malicious user might be getting hold of a valid identifier through network sniffing, social hacking or by\nother means.  With Stream Security enabled, a user cannot access that resource, since the URL for accessing the resource would either\nbe lacking the policy and signature completely or would contain a broken signature due to an identifier mismatch in the\npolicy.  It is important to note that, if stream security is enabled, all resources will be signed and protected, even ones that\ndo not have any access restrictions defined in their access control lists. Accessing resources with unsigned URLs will\nnot be possible.",
            "title": "URL hacking"
        },
        {
            "location": "/modules/stream-security/#revoking-access-rights",
            "text": "Executive summary: Access is revoked once the digital signature expires.  If a user has the rights to access a resource, it does not automatically mean that permission has been granted for a\nlifetime. After a signed URL\u2019s policy has expired, the URL must receive an updated policy and be signed again in order\nto provide continuous access to the corresponding resource, so in the case of revoked access rights, the user in\nquestion will be able to keep access to the resource as long as the initially signed url is valid. After that, Opencast\nwill not provide a signed URL anymore due to the change in permissions.  On the other hand, there is no way to revoke access to that resource for that particular user unless the URL expires.\nThe only way would be to completely remove the resource from the distribution server. It is therefore important to\nchoose reasonable expiration times for signed URLs.",
            "title": "Revoking access rights"
        },
        {
            "location": "/modules/stream-security/#unauthorized-sharing-of-urls",
            "text": "Executive summary: Leaked signed URLs are only accessible for the duration of the validity of the signature.  A signed URL shared by an authorized user with a non-authorized third party will expire (as explained above). The\nexpiration time can be set as low as some seconds but will then require even authorized users to obtain newly signed\nURLs as they continue to access protected content (e.g. the user takes a quick break watching a recording by hitting\n\u201cpause\u201d, then hits \u201cplay\u201d again to resume). This risk can be lowered further by restricting a resource to a client\u2019s IP\naddress so that it can only be played by someone with the same IP.",
            "title": "Unauthorized sharing of URLs"
        },
        {
            "location": "/modules/stream-security/#downloading-or-ripping-content",
            "text": "Executive summary: Content protected by stream security is not protected against unauthorized publication through\nauthorized users.  Since stream security does not implement digital rights management (DRM), authorized users may download content while in\npossession of correctly signed URLs. When that content is republished on systems that are not under the control of the\noriginal owner (i.e. are not protected by stream security or any other means), it is publicly available.  Most institutions will have a policy in place that legally prevents circumventing protection and sharing of protected\nmedia, and as a result, the above scenario will be taxed as piracy.",
            "title": "Downloading or ripping content"
        },
        {
            "location": "/modules/stream-security/#technical-overview",
            "text": "Stream security consists of several components, and each of these components must be installed and configured properly,\notherwise the system may not behave as expected. This part of the documentation describes how each of the components\nneed to be installed and holds information on which configuration options are available.",
            "title": "Technical Overview"
        },
        {
            "location": "/modules/stream-security/#terms",
            "text": "For the understanding of this document it is important to have the following terms clearly defined.",
            "title": "Terms"
        },
        {
            "location": "/modules/stream-security/#policy",
            "text": "A policy defines the timeframe and (optionally) from which addresses a specified resource may be accessed. In order to\nexchange the policy between system components, the involved components must agree on a serialization specification.",
            "title": "Policy"
        },
        {
            "location": "/modules/stream-security/#signature",
            "text": "The signature expresses the validity of a policy. As with the policy, the system\u2019s signature components, must follow a\npredefined signing algorithm. Only then is it possible to verify if the signature was issued for a specific policy, or\nif either the signature or the policy was modified.",
            "title": "Signature"
        },
        {
            "location": "/modules/stream-security/#key",
            "text": "Using keys is a common way to protect information that is being shared between two or more systems. In stream security,\nkeys are used to prevent signature forgery. A key consists of an identifier (ID) and a secret value. The keys need to be\nkept private, otherwise everyone can create signatures and thereby gain unlimited access to all resource protected by\nthat key.",
            "title": "Key"
        },
        {
            "location": "/modules/stream-security/#signing-protocol",
            "text": "The combination of a policy specification and a signature algorithm forms the signing protocol, where the policy\ncontains the rules to be applied and the signature ensures that the rules remain unaltered. Components that implement\nthe same signing protocol are compatible and can be used in combination.",
            "title": "Signing Protocol"
        },
        {
            "location": "/modules/stream-security/#components",
            "text": "A typical signing infrastructure consists of two main components: a signing service and a verification component. While\nthe signing service is used to sign arbitrary URLs, the verification component is located on the distribution servers to\nprotect the resources and only serve requests that have been properly signed.  All signing providers and verification components developed by the Opencast community implement the Opencast signing\nprotocol as documented in the developer guide and are therefore compatible.",
            "title": "Components"
        },
        {
            "location": "/modules/stream-security/#url-signing-service",
            "text": "The URL signing service is designed to support one or more signing implementations called signing providers. With this\nconcept, different signing protocols, and by virtue, different verification components are supported. The resource is\npresented to each signing provider in turn, where it is either signed or passed on. This process continues until a\nsignature is obtained.  Out of the box, Opencast provides the following implementation:   Generic Signing Provider : This provider may be used in combination with HTTP servers. It appends the necessary\n  information (policy, signature and key id) to the URL.   The URL signing service makes it straightforward to provide additional implementations to handle third party\ndistribution servers URL signatures. This becomes important in situations where files are served by a server that is\ncurrently not supported or if files are served by a CDN that implements its own proprietary signing protocol.",
            "title": "URL Signing Service"
        },
        {
            "location": "/modules/stream-security/#verification-components",
            "text": "In order to take advantage of the signed URLs, a verification component needs to reside on the distribution servers to\nverify the validity of the signature (i.e. check that the URL has not been altered after it was signed) and then grant\nor deny access to the resource, based on the policy associated with the URL.  In addition to these external verification components there is also an Opencast verification component called the UrlSigningFilter  that is used to protect files that Opencast itself provides.  Verification components have the option of strict or non-strict checking. Strict verification of resources means the\nentire URL will be considered when comparing the incoming request for a resource against the policy, including the\nscheme (http, https, etc.), hostname and port. If using non-strict checking, only the path to the resource will be\nconsidered. So if the request is for a resource at  http://httpdserver:8080/the/full/path/video.mp4 , only the /the/full/path/video.mp4  part of the URL will be checked against the policy\u2019s path. This is useful when using a load\nbalancer so that the requested hostname does not have to match the actual hostname or if a video player is rewriting\nrequests, e.g. by inserting the port number.",
            "title": "Verification components"
        },
        {
            "location": "/modules/stream-security/#further-information",
            "text": "For further technical information like installation instructions, configuration guides, server plugins and the signing\nspecification, please have a look at these documents:   Stream Security Configuration & Testing  The Opencast Signing Protocol is defined in the subsection Stream Security in the modules section of the developer guide.",
            "title": "Further Information"
        },
        {
            "location": "/modules/textextraction/",
            "text": "Text Extraction Configuration\n\n\nHow the text extraction process works\n\n\nThe sequence of the Opencast services used during slide detection and text extraction is the following:\n\n\n-----> Segmentation -----> TextAnalyzerService ----------------->\n                              /             \\\n                             /               \\\n                   TextExtractor          DictionaryService\n                (OCR with Tesseract)   (Filter extracted texts)\n\n\n\nThe segmentation will define the frames which are passed to the text analyzer. For extraction, a frame from the end of a\nsegment is used to make sure that most of a slides text is visible.\n\n\nThe frame is then exported as image and passed to the text extraction service which calls an OCR engine to get the text\noutput. For this, the Tesseract OCR engine is used by default.\n\n\nAfter the text extraction is done, the analysis service will pass the recognized text to the dictionary service which\nmay filter it to remove messed up words, unknown words, single characters or other things depending on the actual\nimplementation and configuration.\n\n\nFinally, the extracted text is attached to the media package as MPEG 7 XML and the Opencast workflow continues.\n\n\nConfiguration\n\n\nThis section describes the configuration of all involved tools and services. In this guide, German is used as target\nlanguage but the configuration for other languages should be similar. If necessary, important differences will be\npointed out.\n\n\nOCR Engine: Tesseract\n\n\nTesseract is the default OCR engine used by Opencast. It will accept an image file and write the extracted text to an\noutput file. The command line arguments for this will be handled by Opencast. But apart from these mandatory ones, it is\npossible to pass additional arguments to Tesseract, defining the internally used dictionary, box files and the layout\nanalysis.\n\n\nFor example, if you want OCR for German content, you want to run something like this:\n\n\ntesseract in.tif out.txt -l deu -psm 3\n\n\n\n\n\nThe arguments \nin.tif\n and \nout.txt\n are automatically set by Opencast.\n\n\nThe argument \n-l\n specifies the language files used by Tesseract. \ndeu\n specifies the German language. Multiple\n  languages may be specified, separated by plus characters. Please make sure that you have installed the language packs\n  you want to use on every worker (E.g. \nyum install tesseract-langpack-deu\n).\n\n\nFinally \n-psm 3\n specifies the layout analysis for Tesseract. The value \n3\n means \nFully automatic page segmentation,\n  but no orientation and script detection\n which is actually the default. Hence in this case, the argument could simply\n  be omitted. If you know more about your input videos, you might want to use different options here (not likely).\n\n\n\n\nIn Opencast, you can modify this options in the \ncustom.properties\n file by setting the following option:\n\n\norg.opencastproject.textanalyzer.tesseract.options=-l deu -psm 3\n\n\n\nIt is highly recommended to configure Tesseract to use your local language. It will improve the recognition a lot and\nonly this will enable the recognition of special characters specific to your local language.\n\n\nEncoding (Image Preprocessing)\n\n\nThe text extraction works best if there is a high contrast between text and background and additionally, the text is not\ntoo thin. Ideally, this means that you have black and white images with a clear, bold font.\n\n\nAt this point, it is probably worth noting that despite what is often said and could also be found in the old\ndocumentation for Opencast, it does not matter for Tesseract if it is black text on a white background or if the colors\nare inverted (white on black). Because of the way Tesseract works, that does not matter.\n\n\nA lot of lecture slides are unfortunately not designed this way. Lecturers use colors, background images, etc. That is\nwhy, to get a better result, it is a good idea to do some image preprocessing steps. Some easy ones can be included\ndirectly into the image extraction step using FFmpeg.\n\n\nFor this, edit the \n/etc/opencast/encoding/opencast-images.properties\n and modify the command for the image\nextraction:\n\n\nprofile.text-analysis.http.ffmpeg.command = -ss #{time} -i #{in.video.path} \\\n    -filter:v boxblur=1:1,curves=all=0.4/0#{space}0.6/1 \\\n  -frames:v 1 -pix_fmt:v gray -r 1 #{out.dir}/#{out.name}#{out.suffix}\n\n\n\nThis profile will create a gray, high contrast image. The additional light blur will reduce or remove noise and thicken\nthe normal letters.\n\n\nThe kind of preprocessing you should use highly depends on the input material. Interesting filters to try out for your\nmaterial are among others the blur filters, the denoise filters, the curves filter and in some cases the color-channel\nmixer.\n\n\nDictionaryService (Filtering)\n\n\nThe filtering you want to do on the recognized texts highly depends on what you want to use the recognized texts for.\nFor searching, you might want a higher degree of filtering, for users you might also want to present text with slight\nerrors, for testing and debugging, you want no filtering at all.\n\n\nStarting with version 1.6, Opencast provides three different kinds of implementation for filtering which can be just\nswapped out at any time:\n\n\n\n\nmatterhorn-dictionary-none\n\n\nmatterhorn-dictionary-regexp (default)\n\n\nmatterhorn-dictionary-hunspell\n\n\n\n\nNo Filtering (matterhorn-dictionary-none)\n\n\nThe \nmatterhorn-dictionary-none\n module is the simplest one. It will just let the recognized texts pass through\nunmodified. There is no additional configuration needed or even possible. Of course, this is also the fastest one.\n\n\nUsing a Regular Expression (matterhorn-dictionary-regexp)\n\n\nStarting with 1.6, this is the default implementation for the DictionaryService. It is quite fast and easy to configure\nbut is limited in terms of filtering capabilities as it will not check if a recognized word actually makes sense.\n\n\nThe default expression for this module is \n\\w+\n which will let upper- and lowercase characters as well as digits pass\nthrough, but will block all other characters. For the German language, for example, this would mean that all special\ncharacters would be blocked as well. So you want to configure Opencast to let them pass as well.\n\n\nYou can do that by modifying the \npattern\n in\n\netc/org.opencastproject.dictionary.regexp.DictionaryServiceImpl.cfg\n:\n\n\nFor German, a suitable pattern could be:\n\n\npattern=[\\\\w\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df][\\\\w\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df]+[-.,:;!?]*\n\n\n\nThis expression will let all words pass which contain upper- and lowercase [a-z], digits and German special characters\nas well as punctuation at the end of a word. Additionally, it requires that the words are at least two characters long\nwhich will filter out most of the common noise.\n\n\nA similar pattern that could be used for Spanish would be:\n\n\npattern=[\u00bf\u00a1(]*[\\\\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00fc\u00dc\u00f1\u00d1][\\\\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00fc\u00dc\u00f1\u00d1]+[)-.,:;!?]*\n\n\n\nUsing a Spell Checker (matterhorn-dictionary-hunspell)\n\n\nLast, the \nmatterhorn-dictionary-hunspell\n will check words based on a spell checker and a dictionary. As spell checker,\nthe tool \nhunspell\n is used which is one of the most common spell checkers on Linux and should be available from the\nsystem repositories for most common operating systems.\n\n\nFor the Hunspell based DictionaryService, there are two configuration options.  One is for the binary and one for the\narguments to use for filtering.\n\n\nBy default, Opencast will just call \nhunspell\n without an absolute path. This will work as long as hunspell is in the\nsystems path which should be the case unless you have built and installed it manually. In that case, the binary can be\nconfigured using the following option in the \ncustom.properties\n file:\n\n\norg.opencastproject.dictionary.hunspell.binary=/usr/bin/hunspell\n\n\n\nWhile most people will not need the binary path configuration, most people will need the filtering option which can be\nused for setting the languages. Configuration for this can be done using the following key in the \ncustom.properties\n\nfile:\n\n\norg.opencastproject.dictionary.hunspell.command=-d de_DE,en_GB,en_US -G\n\n\n\nNote that equivalent to the Tesseract configuration, again the necessary languages have to be installed in the system.\nOn RedHat based systems, for German, you would install the \nhunspell-de\n package from the system repositories.\n\n\nFor Hunspell, you can also create custom dictionaries or add custom words to the existing ones. This might be\ninteresting for technical terms.",
            "title": "Text Extraction"
        },
        {
            "location": "/modules/textextraction/#text-extraction-configuration",
            "text": "",
            "title": "Text Extraction Configuration"
        },
        {
            "location": "/modules/textextraction/#how-the-text-extraction-process-works",
            "text": "The sequence of the Opencast services used during slide detection and text extraction is the following:  -----> Segmentation -----> TextAnalyzerService ----------------->\n                              /             \\\n                             /               \\\n                   TextExtractor          DictionaryService\n                (OCR with Tesseract)   (Filter extracted texts)  The segmentation will define the frames which are passed to the text analyzer. For extraction, a frame from the end of a\nsegment is used to make sure that most of a slides text is visible.  The frame is then exported as image and passed to the text extraction service which calls an OCR engine to get the text\noutput. For this, the Tesseract OCR engine is used by default.  After the text extraction is done, the analysis service will pass the recognized text to the dictionary service which\nmay filter it to remove messed up words, unknown words, single characters or other things depending on the actual\nimplementation and configuration.  Finally, the extracted text is attached to the media package as MPEG 7 XML and the Opencast workflow continues.",
            "title": "How the text extraction process works"
        },
        {
            "location": "/modules/textextraction/#configuration",
            "text": "This section describes the configuration of all involved tools and services. In this guide, German is used as target\nlanguage but the configuration for other languages should be similar. If necessary, important differences will be\npointed out.",
            "title": "Configuration"
        },
        {
            "location": "/modules/textextraction/#ocr-engine-tesseract",
            "text": "Tesseract is the default OCR engine used by Opencast. It will accept an image file and write the extracted text to an\noutput file. The command line arguments for this will be handled by Opencast. But apart from these mandatory ones, it is\npossible to pass additional arguments to Tesseract, defining the internally used dictionary, box files and the layout\nanalysis.  For example, if you want OCR for German content, you want to run something like this:  tesseract in.tif out.txt -l deu -psm 3   The arguments  in.tif  and  out.txt  are automatically set by Opencast.  The argument  -l  specifies the language files used by Tesseract.  deu  specifies the German language. Multiple\n  languages may be specified, separated by plus characters. Please make sure that you have installed the language packs\n  you want to use on every worker (E.g.  yum install tesseract-langpack-deu ).  Finally  -psm 3  specifies the layout analysis for Tesseract. The value  3  means  Fully automatic page segmentation,\n  but no orientation and script detection  which is actually the default. Hence in this case, the argument could simply\n  be omitted. If you know more about your input videos, you might want to use different options here (not likely).   In Opencast, you can modify this options in the  custom.properties  file by setting the following option:  org.opencastproject.textanalyzer.tesseract.options=-l deu -psm 3  It is highly recommended to configure Tesseract to use your local language. It will improve the recognition a lot and\nonly this will enable the recognition of special characters specific to your local language.",
            "title": "OCR Engine: Tesseract"
        },
        {
            "location": "/modules/textextraction/#encoding-image-preprocessing",
            "text": "The text extraction works best if there is a high contrast between text and background and additionally, the text is not\ntoo thin. Ideally, this means that you have black and white images with a clear, bold font.  At this point, it is probably worth noting that despite what is often said and could also be found in the old\ndocumentation for Opencast, it does not matter for Tesseract if it is black text on a white background or if the colors\nare inverted (white on black). Because of the way Tesseract works, that does not matter.  A lot of lecture slides are unfortunately not designed this way. Lecturers use colors, background images, etc. That is\nwhy, to get a better result, it is a good idea to do some image preprocessing steps. Some easy ones can be included\ndirectly into the image extraction step using FFmpeg.  For this, edit the  /etc/opencast/encoding/opencast-images.properties  and modify the command for the image\nextraction:  profile.text-analysis.http.ffmpeg.command = -ss #{time} -i #{in.video.path} \\\n    -filter:v boxblur=1:1,curves=all=0.4/0#{space}0.6/1 \\\n  -frames:v 1 -pix_fmt:v gray -r 1 #{out.dir}/#{out.name}#{out.suffix}  This profile will create a gray, high contrast image. The additional light blur will reduce or remove noise and thicken\nthe normal letters.  The kind of preprocessing you should use highly depends on the input material. Interesting filters to try out for your\nmaterial are among others the blur filters, the denoise filters, the curves filter and in some cases the color-channel\nmixer.",
            "title": "Encoding (Image Preprocessing)"
        },
        {
            "location": "/modules/textextraction/#dictionaryservice-filtering",
            "text": "The filtering you want to do on the recognized texts highly depends on what you want to use the recognized texts for.\nFor searching, you might want a higher degree of filtering, for users you might also want to present text with slight\nerrors, for testing and debugging, you want no filtering at all.  Starting with version 1.6, Opencast provides three different kinds of implementation for filtering which can be just\nswapped out at any time:   matterhorn-dictionary-none  matterhorn-dictionary-regexp (default)  matterhorn-dictionary-hunspell",
            "title": "DictionaryService (Filtering)"
        },
        {
            "location": "/modules/textextraction/#no-filtering-matterhorn-dictionary-none",
            "text": "The  matterhorn-dictionary-none  module is the simplest one. It will just let the recognized texts pass through\nunmodified. There is no additional configuration needed or even possible. Of course, this is also the fastest one.",
            "title": "No Filtering (matterhorn-dictionary-none)"
        },
        {
            "location": "/modules/textextraction/#using-a-regular-expression-matterhorn-dictionary-regexp",
            "text": "Starting with 1.6, this is the default implementation for the DictionaryService. It is quite fast and easy to configure\nbut is limited in terms of filtering capabilities as it will not check if a recognized word actually makes sense.  The default expression for this module is  \\w+  which will let upper- and lowercase characters as well as digits pass\nthrough, but will block all other characters. For the German language, for example, this would mean that all special\ncharacters would be blocked as well. So you want to configure Opencast to let them pass as well.  You can do that by modifying the  pattern  in etc/org.opencastproject.dictionary.regexp.DictionaryServiceImpl.cfg :  For German, a suitable pattern could be:  pattern=[\\\\w\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df][\\\\w\u00e4\u00f6\u00fc\u00c4\u00d6\u00dc\u00df]+[-.,:;!?]*  This expression will let all words pass which contain upper- and lowercase [a-z], digits and German special characters\nas well as punctuation at the end of a word. Additionally, it requires that the words are at least two characters long\nwhich will filter out most of the common noise.  A similar pattern that could be used for Spanish would be:  pattern=[\u00bf\u00a1(]*[\\\\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00fc\u00dc\u00f1\u00d1][\\\\w\u00e1\u00e9\u00ed\u00f3\u00fa\u00c1\u00c9\u00cd\u00d3\u00da\u00fc\u00dc\u00f1\u00d1]+[)-.,:;!?]*",
            "title": "Using a Regular Expression (matterhorn-dictionary-regexp)"
        },
        {
            "location": "/modules/textextraction/#using-a-spell-checker-matterhorn-dictionary-hunspell",
            "text": "Last, the  matterhorn-dictionary-hunspell  will check words based on a spell checker and a dictionary. As spell checker,\nthe tool  hunspell  is used which is one of the most common spell checkers on Linux and should be available from the\nsystem repositories for most common operating systems.  For the Hunspell based DictionaryService, there are two configuration options.  One is for the binary and one for the\narguments to use for filtering.  By default, Opencast will just call  hunspell  without an absolute path. This will work as long as hunspell is in the\nsystems path which should be the case unless you have built and installed it manually. In that case, the binary can be\nconfigured using the following option in the  custom.properties  file:  org.opencastproject.dictionary.hunspell.binary=/usr/bin/hunspell  While most people will not need the binary path configuration, most people will need the filtering option which can be\nused for setting the languages. Configuration for this can be done using the following key in the  custom.properties \nfile:  org.opencastproject.dictionary.hunspell.command=-d de_DE,en_GB,en_US -G  Note that equivalent to the Tesseract configuration, again the necessary languages have to be installed in the system.\nOn RedHat based systems, for German, you would install the  hunspell-de  package from the system repositories.  For Hunspell, you can also create custom dictionaries or add custom words to the existing ones. This might be\ninteresting for technical terms.",
            "title": "Using a Spell Checker (matterhorn-dictionary-hunspell)"
        },
        {
            "location": "/modules/videoeditor.setup/",
            "text": "Video Editor: Setup\n\n\nUser Interface Configuration\n\n\nCurrently there are two config file parameters for UI options.\n\n\nThe config file can be found at \netc/org.opencastproject.organization-mh_default_org.cfg\n.\n\n\n\n\nprop.adminui.prePostRoll\n\n\nChange the duration of the pre and post roll (in seconds)\n\n\n\n\n\n\nprop.adminui.minSegmentLength\n\n\nChange the minimum required segment length (in seconds)\n\n\n\n\n\n\n\n\nSilence Detection Configuration\n\n\nThe settings regarding the sensitivity of the silence detection can be changed in\n\netc/org.opencastproject.silencedetection.impl.SilenceDetectionServiceImpl.cfg\n.\n\n\n\n\nsilence.pre.length\n\n\nDuration of silence that should be included at the beginning of  a new voice segment. This is to avoid that a cut\n  seems to sudden.\n\n\nDefault: 2000 (2s)\n\n\n\n\n\n\nsilence.threshold.db\n\n\nSilence threshold (e.g. -50dB for loud classrooms, -35dB for silent indoor location).\n\n\nDefault: -40dB\n\n\n\n\n\n\nsilence.min.length\n\n\nMinimum duration in milliseconds to detect a sequence as silence.\n\n\nDefault: 10000 (10s)\n\n\n\n\n\n\nvoice.min.length\n\n\nMinimum segment duration in milliseconds to start a new voice containing sequence after a silent sequence.\n\n\nDefault: 60000 (1min)\n\n\n\n\n\n\n\n\nVideo Editor Configuration\n\n\nThe FFmpeg properties for the Video Editor can be modified in\n\netc/org.opencastproject.videoeditor.impl.VideoEditorServiceImpl.cfg\n. Usually there should be no reason to touch this\nfile.",
            "title": "Setup"
        },
        {
            "location": "/modules/videoeditor.setup/#video-editor-setup",
            "text": "",
            "title": "Video Editor: Setup"
        },
        {
            "location": "/modules/videoeditor.setup/#user-interface-configuration",
            "text": "Currently there are two config file parameters for UI options.  The config file can be found at  etc/org.opencastproject.organization-mh_default_org.cfg .   prop.adminui.prePostRoll  Change the duration of the pre and post roll (in seconds)    prop.adminui.minSegmentLength  Change the minimum required segment length (in seconds)",
            "title": "User Interface Configuration"
        },
        {
            "location": "/modules/videoeditor.setup/#silence-detection-configuration",
            "text": "The settings regarding the sensitivity of the silence detection can be changed in etc/org.opencastproject.silencedetection.impl.SilenceDetectionServiceImpl.cfg .   silence.pre.length  Duration of silence that should be included at the beginning of  a new voice segment. This is to avoid that a cut\n  seems to sudden.  Default: 2000 (2s)    silence.threshold.db  Silence threshold (e.g. -50dB for loud classrooms, -35dB for silent indoor location).  Default: -40dB    silence.min.length  Minimum duration in milliseconds to detect a sequence as silence.  Default: 10000 (10s)    voice.min.length  Minimum segment duration in milliseconds to start a new voice containing sequence after a silent sequence.  Default: 60000 (1min)",
            "title": "Silence Detection Configuration"
        },
        {
            "location": "/modules/videoeditor.setup/#video-editor-configuration",
            "text": "The FFmpeg properties for the Video Editor can be modified in etc/org.opencastproject.videoeditor.impl.VideoEditorServiceImpl.cfg . Usually there should be no reason to touch this\nfile.",
            "title": "Video Editor Configuration"
        },
        {
            "location": "/modules/videoeditor.architecture/",
            "text": "Video Editor: Architecture\n\n\nModules Of The Videoeditor\n\n\nThe Videoeditor consists of the following moduls. Additional to this there is a Workflow Operation Handler within the\nConductor module that provides the UI elements for the Video Editor.\n\n\n\n\nmatterhorn-silencedetection-api\n\n\nAPI for the silence detection\n\n\n\n\n\n\nmatterhorn-silencedetection-impl\n\n\nImplementation of the silence detection service\n\n\nProvides a SMIL file that can be used by the Video Editor UI or the Video Editor service to create a new cutted\n  file.\n\n\n\n\n\n\nmatterhorn-silencedetection-remote\n\n\nRemote implementation of the silence detection service to enable load balancing in a distributed setup.\n\n\n\n\n\n\nmatterhorn-smil-api\n\n\nAPI for the SMIL service\n\n\n\n\n\n\nmatterhorn-smil-impl\n\n\nThe SMIL service allows creation and manipulation of SMIL files. This is more or less a helper class to create\n  consistent SMIL files.\n\n\n\n\n\n\nmatterhorn-videoeditor-api\n\n\nThe API for the Video Editor which takes a SMIL file as an input to create a cutted version of the media files.\n\n\n\n\n\n\nmatterhorn-videoeditor-impl\n\n\nThe Video Editor service creates new media files that will be cutted based on the information provided in a SMIL\n  file. In the current implementation GStreamer with the gnonlin module is used to process the files.\n\n\n\n\n\n\nmatterhorn-videoeditor-remote\n\n\nRemote implementation of the video editor service to enable load balancing in a distributed setup.\n\n\n\n\n\n\n\n\nSeveral other changes have been made on other Opencast modules to provide a better user experience for the video\neditor (i.e. byte-range request on the working-file-repository).\n\n\nEdit List Format\n\n\nThe video editor uses SMIL 3.0 as a standardized Data format for the edit lists (cutting information). Some conventions\nand namespace extensions have been made to make sure that Opencast is able to find the files.\n\n\n\n\nAs we usually have two (or more) parallel media files, these files are grouped in a \n<par>\n-element which forms a\n   segment that should be included in the resulting video.  This means the included \n<video>\n-files will be played in\n   parallel.\n\n\nThe clipBegin and clipEnd attributes a provided as milliseconds. Usually these should be identical for all \n<videos>\n\n   within a \n<par>\n.  For each segment a \n<par>\n is created.\n\n\nIn the result of the silence detection segments with silence are omitted within the SMIL files, so only segments\n   within the SMIL doc will be in the resulting video.\n\n\nThe segments within the SMIL file will be in the order they are written down. If the sequence of the segments is\n   changed, the sequence within the resulting video is changed too.\n\n\n\n\nExample SMIL file\n\n\n<smil xmlns=\"http://www.w3.org/ns/SMIL\" baseProfile=\"Language\" version=\"3.0\" xml:id=\"s-524c7815-4520-48e4-bb5e-94dcfdb3229f\">\n    <head xml:id=\"h-03b31c8d-68cf-49ea-8bae-d94abddf8f09\">\n        <meta name=\"track-duration\" content=\"6000841ms\" xml:id=\"meta-32069ddb-351d-4dca-a742-b9be490080f8\"/>\n        <paramGroup xml:id=\"pg-bb1e4ab7-08e8-4ae7-9da8-1f6d46b56387\">\n            <param value=\"9f373445-5f46-4bdd-8d93-dca5e1094c38\" name=\"track-id\" valuetype=\"data\" xml:id=\"param-d509b427-b239-4c4b-985a-f8b4ea31bbfb\"/>\n            <param value=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9f373445-5f46-4bdd-8d93-dca5e1094c38/lecturer.mp4\" name=\"track-src\" valuetype=\"data\" xml:id=\"param-411e0015-af0e-463c-898d-9a2bc594df46\"/>\n            <param value=\"presenter/preview\" name=\"track-flavor\" valuetype=\"data\" xml:id=\"param-5ea022cd-189d-420f-9cea-4f6775af285e\"/>\n        </paramGroup>\n        <paramGroup xml:id=\"pg-35035f9c-ab9a-49a7-9ef8-9825190b949b\">\n            <param value=\"9af21dad-cb92-4e18-bc4c-b8c9b7ce4e2f\" name=\"track-id\" valuetype=\"data\" xml:id=\"param-c3c427ad-ef8a-4a71-9b0c-9208dd8a6bed\"/>\n            <param value=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9af21dad-cb92-4e18-bc4c-b8c9b7ce4e2f/screen.mp4\" name=\"track-src\" valuetype=\"data\" xml:id=\"param-c15e1ed7-f773-456d-a007-fc237d9e0665\"/>\n            <param value=\"presentation/preview\" name=\"track-flavor\" valuetype=\"data\" xml:id=\"param-97d5b5ac-1258-4267-a013-dc3882d7e242\"/>\n        </paramGroup>\n    </head>\n    <body xml:id=\"b-c233c9ef-42d9-4f50-a1d2-29e3bbff003d\">\n        <par xml:id=\"par-7955133a-bcbe-40f8-87fd-47e78b3357c0\">\n            <video src=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9f373445-5f46-4bdd-8d93-dca5e1094c38/lecturer.mp4\" paramGroup=\"pg-bb1e4ab7-08e8-4ae7-9da8-1f6d46b56387\" clipEnd=\"5522400ms\" clipBegin=\"157880ms\" xml:id=\"v-61f5d0ee-dd36-4b1d-af3d-3f09f8807179\"/>\n            <video src=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9af21dad-cb92-4e18-bc4c-b8c9b7ce4e2f/screen.mp4\" paramGroup=\"pg-35035f9c-ab9a-49a7-9ef8-9825190b949b\" clipEnd=\"5522400ms\" clipBegin=\"157880ms\" xml:id=\"v-c68260e7-fd0d-4df6-8696-cc475ab3b3f8\"/>\n        </par>\n    </body>\n</smil>\n\n\n\nWorkflow Operations\n\n\nWaveform Operation\n\n\nThe \nwaveform\n operation creates an image showing the temporal audio activity within the recording. This is be done\nwith a probably well known waveform (see example image).\n\n\n\n\nThe operation does not need an additional module, as it is not very work intensive to create such an image. The\noperation needs and audio-only file to create the image and it provides an PNG image.\n\n\nInput parameter is the source-flavor of the audio files for which a waveform should be created. The *-operator can be\nused if the waveform should be created for all flavors with a certain subtypes (like \"audio\" in our example).\n\n\nThe output-parameter is target-flavor which should use the *-operator if it was used in the source-flavor too.\n\n\nWaveform Operation Template\n\n\n<operation\n  id=\"waveform\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Generating waveform\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/audio</configuration>\n    <configuration key=\"target-flavor\">*/waveform</configuration>\n  </configurations>\n</operation>\n\n\n\nSilence Operation\n\n\nThe \nsilence\n operation performs a silence detection on an audio-only input file. The operation needs the silence\ndetection API and impl (or remote in a distributed system) modules to be installed to process the request.\n\n\nThe input parameters are source-flavors that takes one flavor/sub-type or multiple input flavors with the *-operator\nfollowed by the sub-type, and reference-tracks-flavour where the subtype of the media files that should be included in\nthe provided SMIL file will be set. The * should not be modified here. In most cases it is not important which\nreference-tracks-flavour is selected as long as all relevant flavors are available within this feature. \"preview\" is not\na bad choice as all files available within the video editor UI are also available with this flavor, unlike \"source\"\nwhere not all flavors may be available, as some recorders record all streams to one file and the tracks are separated\nafterwards. The editor operation afterwards will anyway try to select the best available quality.\n\n\nThe output parameter is smil-flavor-subtype which provides the modificatory for the flavor subtype after this operation.\nThe main flavor will be consistent and only the subtype will be replaced.\n\n\nThe output of this operation is a SMIL file (see the example above).\n\n\nSilence Operation Template\n\n\n<operation\n  id=\"silence\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Executing silence detection\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/audio</configuration>\n    <configuration key=\"smil-flavor-subtype\">smil</configuration>\n    <configuration key=\"reference-tracks-flavor\">*/preview</configuration>\n  </configurations>\n</operation>\n\n\n\nEditor Operation\n\n\nThe \neditor\n operation provides the UI for editing trim hold state and processes the edited files. This operation\nneeds the videoeditor API and impl (or remote on distributed systems) to be installed.\n\n\nThe input parameters are:\n\n\n\n\nsource-flavors: the subtype of all media files in the best available quality and in a codec that can be processed by\n   the videoeditor modules. The *-should usually not be changed, as tracks can be excluded in the editor UI too, only\n   the subtype is important. All needed videos should be available within this flavor.\n\n\npreview-flavours: the subtype of the media files that should be used for the preview player. This is an HTML5 player\n   so the coded can be H.264 or WebM based on the browser. The main flavor should be the same as in source-flavors.\n\n\nsmil-flavors: the smil file(s) that should be used as a proposal within the editor UI. If * is used presenter/smil\n   will be favored, if this is not available the first in the list will be used.\n\n\nskipped-flavors: the flavor of the files that should be used if this workflow-operation is skipped.\n\n\n\n\nThe output parameters are:\n\n\n\n\ntarget-smil-flavor: only a unique flavor is allowed here, as this is the file that the editor UI writes and that will\n   be taken for processing the edited files afterwards.\n\n\ntarget-flavor-subtype: the flavor-subtype that will be used for all media files created in this operation.\n\n\n\n\nEditor Operation Template\n\n\n<operation\n  id=\"editor\"\n  if=\"${trimHold}\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Waiting for user to review / video edit recording\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/work</configuration>\n    <configuration key=\"preview-flavors\">*/preview</configuration>\n    <configuration key=\"skipped-flavors\">*/preview</configuration>\n    <configuration key=\"smil-flavors\">*/smil</configuration>\n    <configuration key=\"target-smil-flavor\">episode/smil</configuration>\n    <configuration key=\"target-flavor-subtype\">trimmed</configuration>\n  </configurations>\n</operation>\n\n\n\nIncluding The Video Editor To The Workflow Definition File\n\n\nIncluding the Video Editor with the silence detection into the needs some changes in the default workflow. Several of\nthe steps here are inherited from the trim-operations and the workflow it was included too. We assume that you set\n${trimHold} variable like in the current workflow definitions with trimming.\n\n\n\n\nThe prepare-av operations has to be adopted. Gstreamer/gnonlin is kind of picky on the codec that it supports. So the\n   media file has to be re-encoded in the beginning of the workflow. The prepare-av encoding profiles (av.work and\n   mux-av.work) have been updated in the Video Editor branch for this. Within the prepare-av operation in the\n   workflow-definition XML-file rewriting the file should be forced:\n\n\n\n\nChanges in the workflow definition\n\n\n<configuration key=\"rewrite\">true</configuration>\n\n\n<configuration key=\"audio-muxing-source-flavors\">*/?,*/*</configuration>\n\n\n\n\n\n\nThe preview videos have to be created. These can be in H.264 (for Safari, IE, Chrome) or WebM (for Firefox, Opera or\n   Chrome) codec. Encoding profiles for WebM are provided in the video editor branch and are used in the examples. This\n   operation should be after the prepare-av operation.\n\n\nWorkflow operation to create WebM preview videos\n\n\n<operation\n  id=\"compose\"\n  if=\"${trimHold}\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Encoding presenter (camera) video for videoeditor preview\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"target-flavor\">*/preview</configuration>\n    <configuration key=\"encoding-profile\">webm-preview.http</configuration>\n  </configurations>\n</operation>\n\n\n\n\n\n\n\nAn audio-only file has to be composed for the waveform and silence operation. This operation should be after the\n   prepare-av operation.  Workflow operation to compose the audio-only file(s)\n\n\n<operation\n  id=\"compose\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Extracting audio for waveform generation\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"target-flavor\">*/audio</configuration>\n    <configuration key=\"encoding-profile\">audio.wav</configuration>\n  </configurations>\n</operation>\n\n\n\n\n\n\n\nThe waveform operation should be included. See above for the XML-code for this operation. The audio-only file should already be available.\n\n\n\n\nThe silence detection should be done. See above for the XML-code for this operation. The audio-only file should already be available.\n\n\nAfter all previous operations have been done the editor can be included. See above for the XML-code for this operation.\n\n\nYou may consider to tag the trimmed files for archiving. Then you should include this operation after the editor:\n\n\n\n\nTagging trimmed files for the archive\n\n\n    <operation\n      id=\"tag\"\n      description=\"Tagging media for archival\">\n      <configurations>\n        <configuration key=\"source-flavors\">*/trimmed</configuration>\n        <configuration key=\"target-tags\">+archive</configuration>\n      </configurations>\n    </operation>\n\nYou could check, if you want to archive the source media too, or remove the source-flavors from the previous tagging operations.\n\n\n\n\n\nThe rest of the workflow definition can be kept as it is, the input flavor subtype for the trimmed files in other\n   operations is \"/trimmed\" if you follow the naming in this example.\n\n\n\n\nThe default \ncompose-distribute-publish.xml\n workflow definition within the Video Editor branch has already been updated\nto include the editor instead of the trim-hold state. The trim operation is not overwritten with the video editor but\ncould still be used.",
            "title": "Architecture"
        },
        {
            "location": "/modules/videoeditor.architecture/#video-editor-architecture",
            "text": "",
            "title": "Video Editor: Architecture"
        },
        {
            "location": "/modules/videoeditor.architecture/#modules-of-the-videoeditor",
            "text": "The Videoeditor consists of the following moduls. Additional to this there is a Workflow Operation Handler within the\nConductor module that provides the UI elements for the Video Editor.   matterhorn-silencedetection-api  API for the silence detection    matterhorn-silencedetection-impl  Implementation of the silence detection service  Provides a SMIL file that can be used by the Video Editor UI or the Video Editor service to create a new cutted\n  file.    matterhorn-silencedetection-remote  Remote implementation of the silence detection service to enable load balancing in a distributed setup.    matterhorn-smil-api  API for the SMIL service    matterhorn-smil-impl  The SMIL service allows creation and manipulation of SMIL files. This is more or less a helper class to create\n  consistent SMIL files.    matterhorn-videoeditor-api  The API for the Video Editor which takes a SMIL file as an input to create a cutted version of the media files.    matterhorn-videoeditor-impl  The Video Editor service creates new media files that will be cutted based on the information provided in a SMIL\n  file. In the current implementation GStreamer with the gnonlin module is used to process the files.    matterhorn-videoeditor-remote  Remote implementation of the video editor service to enable load balancing in a distributed setup.     Several other changes have been made on other Opencast modules to provide a better user experience for the video\neditor (i.e. byte-range request on the working-file-repository).",
            "title": "Modules Of The Videoeditor"
        },
        {
            "location": "/modules/videoeditor.architecture/#edit-list-format",
            "text": "The video editor uses SMIL 3.0 as a standardized Data format for the edit lists (cutting information). Some conventions\nand namespace extensions have been made to make sure that Opencast is able to find the files.   As we usually have two (or more) parallel media files, these files are grouped in a  <par> -element which forms a\n   segment that should be included in the resulting video.  This means the included  <video> -files will be played in\n   parallel.  The clipBegin and clipEnd attributes a provided as milliseconds. Usually these should be identical for all  <videos> \n   within a  <par> .  For each segment a  <par>  is created.  In the result of the silence detection segments with silence are omitted within the SMIL files, so only segments\n   within the SMIL doc will be in the resulting video.  The segments within the SMIL file will be in the order they are written down. If the sequence of the segments is\n   changed, the sequence within the resulting video is changed too.   Example SMIL file  <smil xmlns=\"http://www.w3.org/ns/SMIL\" baseProfile=\"Language\" version=\"3.0\" xml:id=\"s-524c7815-4520-48e4-bb5e-94dcfdb3229f\">\n    <head xml:id=\"h-03b31c8d-68cf-49ea-8bae-d94abddf8f09\">\n        <meta name=\"track-duration\" content=\"6000841ms\" xml:id=\"meta-32069ddb-351d-4dca-a742-b9be490080f8\"/>\n        <paramGroup xml:id=\"pg-bb1e4ab7-08e8-4ae7-9da8-1f6d46b56387\">\n            <param value=\"9f373445-5f46-4bdd-8d93-dca5e1094c38\" name=\"track-id\" valuetype=\"data\" xml:id=\"param-d509b427-b239-4c4b-985a-f8b4ea31bbfb\"/>\n            <param value=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9f373445-5f46-4bdd-8d93-dca5e1094c38/lecturer.mp4\" name=\"track-src\" valuetype=\"data\" xml:id=\"param-411e0015-af0e-463c-898d-9a2bc594df46\"/>\n            <param value=\"presenter/preview\" name=\"track-flavor\" valuetype=\"data\" xml:id=\"param-5ea022cd-189d-420f-9cea-4f6775af285e\"/>\n        </paramGroup>\n        <paramGroup xml:id=\"pg-35035f9c-ab9a-49a7-9ef8-9825190b949b\">\n            <param value=\"9af21dad-cb92-4e18-bc4c-b8c9b7ce4e2f\" name=\"track-id\" valuetype=\"data\" xml:id=\"param-c3c427ad-ef8a-4a71-9b0c-9208dd8a6bed\"/>\n            <param value=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9af21dad-cb92-4e18-bc4c-b8c9b7ce4e2f/screen.mp4\" name=\"track-src\" valuetype=\"data\" xml:id=\"param-c15e1ed7-f773-456d-a007-fc237d9e0665\"/>\n            <param value=\"presentation/preview\" name=\"track-flavor\" valuetype=\"data\" xml:id=\"param-97d5b5ac-1258-4267-a013-dc3882d7e242\"/>\n        </paramGroup>\n    </head>\n    <body xml:id=\"b-c233c9ef-42d9-4f50-a1d2-29e3bbff003d\">\n        <par xml:id=\"par-7955133a-bcbe-40f8-87fd-47e78b3357c0\">\n            <video src=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9f373445-5f46-4bdd-8d93-dca5e1094c38/lecturer.mp4\" paramGroup=\"pg-bb1e4ab7-08e8-4ae7-9da8-1f6d46b56387\" clipEnd=\"5522400ms\" clipBegin=\"157880ms\" xml:id=\"v-61f5d0ee-dd36-4b1d-af3d-3f09f8807179\"/>\n            <video src=\"http://my.server.tld/files/mediapackage/98c91b97-51de-46ae-992d-c497798f16c8/9af21dad-cb92-4e18-bc4c-b8c9b7ce4e2f/screen.mp4\" paramGroup=\"pg-35035f9c-ab9a-49a7-9ef8-9825190b949b\" clipEnd=\"5522400ms\" clipBegin=\"157880ms\" xml:id=\"v-c68260e7-fd0d-4df6-8696-cc475ab3b3f8\"/>\n        </par>\n    </body>\n</smil>",
            "title": "Edit List Format"
        },
        {
            "location": "/modules/videoeditor.architecture/#workflow-operations",
            "text": "",
            "title": "Workflow Operations"
        },
        {
            "location": "/modules/videoeditor.architecture/#waveform-operation",
            "text": "The  waveform  operation creates an image showing the temporal audio activity within the recording. This is be done\nwith a probably well known waveform (see example image).   The operation does not need an additional module, as it is not very work intensive to create such an image. The\noperation needs and audio-only file to create the image and it provides an PNG image.  Input parameter is the source-flavor of the audio files for which a waveform should be created. The *-operator can be\nused if the waveform should be created for all flavors with a certain subtypes (like \"audio\" in our example).  The output-parameter is target-flavor which should use the *-operator if it was used in the source-flavor too.  Waveform Operation Template  <operation\n  id=\"waveform\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Generating waveform\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/audio</configuration>\n    <configuration key=\"target-flavor\">*/waveform</configuration>\n  </configurations>\n</operation>",
            "title": "Waveform Operation"
        },
        {
            "location": "/modules/videoeditor.architecture/#silence-operation",
            "text": "The  silence  operation performs a silence detection on an audio-only input file. The operation needs the silence\ndetection API and impl (or remote in a distributed system) modules to be installed to process the request.  The input parameters are source-flavors that takes one flavor/sub-type or multiple input flavors with the *-operator\nfollowed by the sub-type, and reference-tracks-flavour where the subtype of the media files that should be included in\nthe provided SMIL file will be set. The * should not be modified here. In most cases it is not important which\nreference-tracks-flavour is selected as long as all relevant flavors are available within this feature. \"preview\" is not\na bad choice as all files available within the video editor UI are also available with this flavor, unlike \"source\"\nwhere not all flavors may be available, as some recorders record all streams to one file and the tracks are separated\nafterwards. The editor operation afterwards will anyway try to select the best available quality.  The output parameter is smil-flavor-subtype which provides the modificatory for the flavor subtype after this operation.\nThe main flavor will be consistent and only the subtype will be replaced.  The output of this operation is a SMIL file (see the example above).  Silence Operation Template  <operation\n  id=\"silence\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Executing silence detection\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/audio</configuration>\n    <configuration key=\"smil-flavor-subtype\">smil</configuration>\n    <configuration key=\"reference-tracks-flavor\">*/preview</configuration>\n  </configurations>\n</operation>",
            "title": "Silence Operation"
        },
        {
            "location": "/modules/videoeditor.architecture/#editor-operation",
            "text": "The  editor  operation provides the UI for editing trim hold state and processes the edited files. This operation\nneeds the videoeditor API and impl (or remote on distributed systems) to be installed.  The input parameters are:   source-flavors: the subtype of all media files in the best available quality and in a codec that can be processed by\n   the videoeditor modules. The *-should usually not be changed, as tracks can be excluded in the editor UI too, only\n   the subtype is important. All needed videos should be available within this flavor.  preview-flavours: the subtype of the media files that should be used for the preview player. This is an HTML5 player\n   so the coded can be H.264 or WebM based on the browser. The main flavor should be the same as in source-flavors.  smil-flavors: the smil file(s) that should be used as a proposal within the editor UI. If * is used presenter/smil\n   will be favored, if this is not available the first in the list will be used.  skipped-flavors: the flavor of the files that should be used if this workflow-operation is skipped.   The output parameters are:   target-smil-flavor: only a unique flavor is allowed here, as this is the file that the editor UI writes and that will\n   be taken for processing the edited files afterwards.  target-flavor-subtype: the flavor-subtype that will be used for all media files created in this operation.   Editor Operation Template  <operation\n  id=\"editor\"\n  if=\"${trimHold}\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Waiting for user to review / video edit recording\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/work</configuration>\n    <configuration key=\"preview-flavors\">*/preview</configuration>\n    <configuration key=\"skipped-flavors\">*/preview</configuration>\n    <configuration key=\"smil-flavors\">*/smil</configuration>\n    <configuration key=\"target-smil-flavor\">episode/smil</configuration>\n    <configuration key=\"target-flavor-subtype\">trimmed</configuration>\n  </configurations>\n</operation>",
            "title": "Editor Operation"
        },
        {
            "location": "/modules/videoeditor.architecture/#including-the-video-editor-to-the-workflow-definition-file",
            "text": "Including the Video Editor with the silence detection into the needs some changes in the default workflow. Several of\nthe steps here are inherited from the trim-operations and the workflow it was included too. We assume that you set\n${trimHold} variable like in the current workflow definitions with trimming.   The prepare-av operations has to be adopted. Gstreamer/gnonlin is kind of picky on the codec that it supports. So the\n   media file has to be re-encoded in the beginning of the workflow. The prepare-av encoding profiles (av.work and\n   mux-av.work) have been updated in the Video Editor branch for this. Within the prepare-av operation in the\n   workflow-definition XML-file rewriting the file should be forced:   Changes in the workflow definition  <configuration key=\"rewrite\">true</configuration>  <configuration key=\"audio-muxing-source-flavors\">*/?,*/*</configuration>    The preview videos have to be created. These can be in H.264 (for Safari, IE, Chrome) or WebM (for Firefox, Opera or\n   Chrome) codec. Encoding profiles for WebM are provided in the video editor branch and are used in the examples. This\n   operation should be after the prepare-av operation.  Workflow operation to create WebM preview videos  <operation\n  id=\"compose\"\n  if=\"${trimHold}\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Encoding presenter (camera) video for videoeditor preview\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"target-flavor\">*/preview</configuration>\n    <configuration key=\"encoding-profile\">webm-preview.http</configuration>\n  </configurations>\n</operation>    An audio-only file has to be composed for the waveform and silence operation. This operation should be after the\n   prepare-av operation.  Workflow operation to compose the audio-only file(s)  <operation\n  id=\"compose\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Extracting audio for waveform generation\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"target-flavor\">*/audio</configuration>\n    <configuration key=\"encoding-profile\">audio.wav</configuration>\n  </configurations>\n</operation>    The waveform operation should be included. See above for the XML-code for this operation. The audio-only file should already be available.   The silence detection should be done. See above for the XML-code for this operation. The audio-only file should already be available.  After all previous operations have been done the editor can be included. See above for the XML-code for this operation.  You may consider to tag the trimmed files for archiving. Then you should include this operation after the editor:   Tagging trimmed files for the archive      <operation\n      id=\"tag\"\n      description=\"Tagging media for archival\">\n      <configurations>\n        <configuration key=\"source-flavors\">*/trimmed</configuration>\n        <configuration key=\"target-tags\">+archive</configuration>\n      </configurations>\n    </operation>\n\nYou could check, if you want to archive the source media too, or remove the source-flavors from the previous tagging operations.   The rest of the workflow definition can be kept as it is, the input flavor subtype for the trimmed files in other\n   operations is \"/trimmed\" if you follow the naming in this example.   The default  compose-distribute-publish.xml  workflow definition within the Video Editor branch has already been updated\nto include the editor instead of the trim-hold state. The trim operation is not overwritten with the video editor but\ncould still be used.",
            "title": "Including The Video Editor To The Workflow Definition File"
        },
        {
            "location": "/modules/videosegmentation/",
            "text": "Video Segmentation Configuration\n\n\nWhat is Video Segmentation\n\n\nVideo segmentation is a way of dividing a movie into meaningful segments. In the context of lecture capture,\nsegmentation is best applied to captured screen presentation, that the presenter goes through slide after slide.\n\n\nAs a result, the video segmentation returns the exact times of slide changes on the timeline, which allows for\nsophisticated ways for the learner to browse the lecture content, as shown in the slides section of the Opencast Player.\n\n\nHow the video segmentation process works\n\n\nFor detecting new scenes, Opencast uses the scene detection build into the FFmpeg select filter. The basic idea behind\nthis filter is to compare to consecutive frames and decide if the second frame belongs to a new scene based on the\ndifference.\n\n\nWhat can be optimized\n\n\nThe segmentation does not yield perfect results for all scenarios if always the same parameters for the FFmpeg filter\nare used. Especially for presentations that include live handwriting or small videos often way too many segments are\ncreated. In these special cases the difference between two consecutive frames is much higher than for normal\npresentation slides and these big differences happen very often, whereby many segments would be found.\nTo improve the resulting number of segments, different FFmpeg parameters are tried out and to prevent having segments\nthat are too short to be reasonably clickable, too short segments are filtered out.\n\n\nHow the Optimization works\n\n\nIn general the optimization repeats a cycle of calling the ffmpeg filter, merging too small segments and calculating a\nnew changes threshold until the segmentation is good enough.\n\n\nAdditional to calling the ffmpeg function there is a filter function that merges small segments to a bigger segment or\nsplits it to the surrounding segments if the resulting segment would be too small. This can be beneficial for example\nif a video is shown in a lecture, so that the video will be only one segment and not many short segments.\nThe stability threshold is used in the filter method to determine which segments are long enough and which should be\nmerged.\n\n\nFirst the segmentation is run with a stability threshold of 1 second and the initial changes threshold, that can be\nchanged in the options. If the segmentation or the filtered segmentation doesn't deviate more from the preferred number\nof segments than the maximum error allows, the optimization is done. If not, a new changes threshold, that should yield\nbetter results, is calculated and the segmentation is run again until the segmentation is good enough or until the\nmaximum number of cycles is reached.\n\n\nConfiguration\n\n\nThe value for the frame difference as well as the minimum length for a segment, the preferred number of segments, the\nmaximum error and the maximum number of cycles can be configured in\n\netc/org.opencastproject.videosegmenter.ffmpeg.VideoSegmenterServiceImpl.cfg\n.\n\n\nThe options that can be set are the minimum length of a segment (defaults to 60 sec).\n\n\nstabilitythreshold = 60\n\n\n\nThe percentage of pixels that may change between two frames without considering them different (defaults to 0.025).\n\n\nchangesthreshold = 0.025\n\n\n\nThe number of segments that the segmentation optimally should yield (defaults to 30).\n\n\nprefNumber = 30\n\n\n\nThe maximum error for the number of segments in percent. As soon as a segmentation with a lower error is achieved the\noptimization will be ended (defaults to 0.25).\n\n\nmaxError = 0.25\n\n\n\nThe maximum number of times the optimization will call the FFmpeg select filter (defaults to 3).\n\n\nmaxCycles = 3\n\n\n\nThe absolute maximum number of segments. If at the end of the optimization more segments than this are found, instead a\nuniform segmentation will be generated (defaults to 150).\n\n\nabsoluteMax = 150\n\n\n\nThe absolute minimum number of segments. If at the end of the optimization less segments than this are found, instead a\nuniform segmentation will be generated (defaults to 3).\n\n\nabsoluteMin = 3\n\n\n\nThis parameter controls whether the options prefNumber, absoluteMax and absoluteMin are interpreted as absolute\nsegment numbers or relative to track duration. If this is set to true, prefNumber, absoluteMax and absoluteMin will be\ninterpreted as number of segments per hour. (defaults to false)\n\n\ndurationDependent = false",
            "title": "Video Segmentation"
        },
        {
            "location": "/modules/videosegmentation/#video-segmentation-configuration",
            "text": "",
            "title": "Video Segmentation Configuration"
        },
        {
            "location": "/modules/videosegmentation/#what-is-video-segmentation",
            "text": "Video segmentation is a way of dividing a movie into meaningful segments. In the context of lecture capture,\nsegmentation is best applied to captured screen presentation, that the presenter goes through slide after slide.  As a result, the video segmentation returns the exact times of slide changes on the timeline, which allows for\nsophisticated ways for the learner to browse the lecture content, as shown in the slides section of the Opencast Player.",
            "title": "What is Video Segmentation"
        },
        {
            "location": "/modules/videosegmentation/#how-the-video-segmentation-process-works",
            "text": "For detecting new scenes, Opencast uses the scene detection build into the FFmpeg select filter. The basic idea behind\nthis filter is to compare to consecutive frames and decide if the second frame belongs to a new scene based on the\ndifference.",
            "title": "How the video segmentation process works"
        },
        {
            "location": "/modules/videosegmentation/#what-can-be-optimized",
            "text": "The segmentation does not yield perfect results for all scenarios if always the same parameters for the FFmpeg filter\nare used. Especially for presentations that include live handwriting or small videos often way too many segments are\ncreated. In these special cases the difference between two consecutive frames is much higher than for normal\npresentation slides and these big differences happen very often, whereby many segments would be found.\nTo improve the resulting number of segments, different FFmpeg parameters are tried out and to prevent having segments\nthat are too short to be reasonably clickable, too short segments are filtered out.",
            "title": "What can be optimized"
        },
        {
            "location": "/modules/videosegmentation/#how-the-optimization-works",
            "text": "In general the optimization repeats a cycle of calling the ffmpeg filter, merging too small segments and calculating a\nnew changes threshold until the segmentation is good enough.  Additional to calling the ffmpeg function there is a filter function that merges small segments to a bigger segment or\nsplits it to the surrounding segments if the resulting segment would be too small. This can be beneficial for example\nif a video is shown in a lecture, so that the video will be only one segment and not many short segments.\nThe stability threshold is used in the filter method to determine which segments are long enough and which should be\nmerged.  First the segmentation is run with a stability threshold of 1 second and the initial changes threshold, that can be\nchanged in the options. If the segmentation or the filtered segmentation doesn't deviate more from the preferred number\nof segments than the maximum error allows, the optimization is done. If not, a new changes threshold, that should yield\nbetter results, is calculated and the segmentation is run again until the segmentation is good enough or until the\nmaximum number of cycles is reached.",
            "title": "How the Optimization works"
        },
        {
            "location": "/modules/videosegmentation/#configuration",
            "text": "The value for the frame difference as well as the minimum length for a segment, the preferred number of segments, the\nmaximum error and the maximum number of cycles can be configured in etc/org.opencastproject.videosegmenter.ffmpeg.VideoSegmenterServiceImpl.cfg .  The options that can be set are the minimum length of a segment (defaults to 60 sec).  stabilitythreshold = 60  The percentage of pixels that may change between two frames without considering them different (defaults to 0.025).  changesthreshold = 0.025  The number of segments that the segmentation optimally should yield (defaults to 30).  prefNumber = 30  The maximum error for the number of segments in percent. As soon as a segmentation with a lower error is achieved the\noptimization will be ended (defaults to 0.25).  maxError = 0.25  The maximum number of times the optimization will call the FFmpeg select filter (defaults to 3).  maxCycles = 3  The absolute maximum number of segments. If at the end of the optimization more segments than this are found, instead a\nuniform segmentation will be generated (defaults to 150).  absoluteMax = 150  The absolute minimum number of segments. If at the end of the optimization less segments than this are found, instead a\nuniform segmentation will be generated (defaults to 3).  absoluteMin = 3  This parameter controls whether the options prefNumber, absoluteMax and absoluteMin are interpreted as absolute\nsegment numbers or relative to track duration. If this is set to true, prefNumber, absoluteMax and absoluteMin will be\ninterpreted as number of segments per hour. (defaults to false)  durationDependent = false",
            "title": "Configuration"
        },
        {
            "location": "/modules/youtubepublication/",
            "text": "YouTube Publication Configuration\n\n\nThis page documents the configuration for Opencast module \nmatterhorn-publication-service-youtube-v3\n.\n\n\nBefore you start\n\n\nYou need to meet these requirements to make a YouTube Publication:\n\n\n\n\nGoogle Account\n\n\nYouTube Channel to make the publication\n\n\n\n\nGoogle Developers Configuration\n\n\nCreate new Google Project\n\n\n\n\nLogin to Google account\n\n\nNavigate to the \nGoogle Developers Console\n\n\nClick \nCreate Project\n and follow the instructions\n\n\nOn your new projects page, choose \nAPIs & auth\n then \nConsent screen\n in the navigation pane\n\n\nSet the \nPRODUCT NAME\n and the \nEMAIL ADDRESS\n\n\n\n\nEnable API\n\n\n\n\nChoose \nAPIs\n in the navigation pane\n\n\nUse the filter to find and enable \nYouTube Data API v3\n\n\n\n\nRegister an Application\n\n\n\n\nChoose \nCredentials\n in the navigation panel\n\n\nClick \nCreate new Client ID\n for OAuth\n\n\nChoose \nInstalled application\n for the application type and \nOther\n for the installed application type\n\n\nAccept with \nCreate Client ID\n\n\n\n\nSave Client ID in JSON Format\n\n\n\n\nDownload the client information in JSON format by clicking \nDownload JSON\n\n\nSave the JSON file to \n${karaf.etc}/youtube-v3/client-secrets-youtube-v3.json\n (Usually this is\n  \netc/youtube-v3/client-secrets-youtube-v3.json\n)\n\n\n\n\nYouTube configuration in Opencast\n\n\nWith the JSON file created and saved previously, you have to proceed as described:\n\n\n\n\n\n\nStart Opencast server (Restart Opencast in case was running)\n\n\nATTENTION:\n Until this operation is fully configured, Opencast will not read and write the database. In case you\nwant to abort the configuration, you only need to delete the JSON file and restart Opencast.\n\n\n\n\n\n\nIn the command line, enter the command to view the extended status of the Opencast service:\n\n\n# systemctl status opencast -l\n\n\n\nThis command will show parts of the Opencast logs in which you should see an URL that you have to copy to a browser.\n\n\n\n\n\n\nThe web page will ask for your Google account (you have to use the account with which you created the developer\n  project earlier) followed by access settings and settings for the channel you want to publish to.\n\n\n\n\n\n\nOnce you have accepted the access, you will receive an answer like:\n\n\nReceived verification code. Closing\u2026\n\n\n\n\n\n\n\nNow verify that Opencast has received the access key and that it has been saved in\n  \nwork/opencast/youtube-v3/data-store/store.\n\n\n\n\n\n\nRestart Opencast\n\n\n\n\n\n\nActivate YouTube publication in Opencast\n\n\nOpencast can now publish to YouTube. The last step is to activate this feature. For this you have to create a new\nworkflow or modify an existing one.\n\n\n\n\n\n\nMake a copy of the default workflow \netc/opencast/workflows/ng-schedule-and-upload.xml\n and create a copy named\n  \netc/opencast/workflows/ng-schedule-and-upload-youtube.xml\n\n\n\n\n\n\nIn the file, modify the \n<configuration_panel>\n and enable the YouTube option, like this:\n\n\n<input id=\"publishToYouTube\" name=\"publishToYouTube\" type=\"checkbox\"\n  checked=\"checked\" class=\"configField\" value=\"true\" />\n<label for=\"publishToYouTube\">YouTube</label>\n\n\n\n\n\n\n\nIn \n<operation id=\"defaults\"\n, set \npublishToYouTube\n to \ntrue\n.\n\n\n\n\n\n\nAdditionally, in the workflow \nng-partial-publish.xml\n you also configure the \n<operation id=\"publish-youtube\"\n. For\n  example, you could specify to publish the presentation stream only by setting the configuration to:\n\n\n<configuration key=\"source-flavors\">presentation/trimmed</configuration>\n\n\n\n\n\n\n\nOpencast will detect the new workflow without restart, with that you can select the new workflow with the YouTube option\nenabled.",
            "title": "YouTube Publication"
        },
        {
            "location": "/modules/youtubepublication/#youtube-publication-configuration",
            "text": "This page documents the configuration for Opencast module  matterhorn-publication-service-youtube-v3 .",
            "title": "YouTube Publication Configuration"
        },
        {
            "location": "/modules/youtubepublication/#before-you-start",
            "text": "You need to meet these requirements to make a YouTube Publication:   Google Account  YouTube Channel to make the publication",
            "title": "Before you start"
        },
        {
            "location": "/modules/youtubepublication/#google-developers-configuration",
            "text": "",
            "title": "Google Developers Configuration"
        },
        {
            "location": "/modules/youtubepublication/#create-new-google-project",
            "text": "Login to Google account  Navigate to the  Google Developers Console  Click  Create Project  and follow the instructions  On your new projects page, choose  APIs & auth  then  Consent screen  in the navigation pane  Set the  PRODUCT NAME  and the  EMAIL ADDRESS",
            "title": "Create new Google Project"
        },
        {
            "location": "/modules/youtubepublication/#enable-api",
            "text": "Choose  APIs  in the navigation pane  Use the filter to find and enable  YouTube Data API v3",
            "title": "Enable API"
        },
        {
            "location": "/modules/youtubepublication/#register-an-application",
            "text": "Choose  Credentials  in the navigation panel  Click  Create new Client ID  for OAuth  Choose  Installed application  for the application type and  Other  for the installed application type  Accept with  Create Client ID",
            "title": "Register an Application"
        },
        {
            "location": "/modules/youtubepublication/#save-client-id-in-json-format",
            "text": "Download the client information in JSON format by clicking  Download JSON  Save the JSON file to  ${karaf.etc}/youtube-v3/client-secrets-youtube-v3.json  (Usually this is\n   etc/youtube-v3/client-secrets-youtube-v3.json )",
            "title": "Save Client ID in JSON Format"
        },
        {
            "location": "/modules/youtubepublication/#youtube-configuration-in-opencast",
            "text": "With the JSON file created and saved previously, you have to proceed as described:    Start Opencast server (Restart Opencast in case was running)  ATTENTION:  Until this operation is fully configured, Opencast will not read and write the database. In case you\nwant to abort the configuration, you only need to delete the JSON file and restart Opencast.    In the command line, enter the command to view the extended status of the Opencast service:  # systemctl status opencast -l  This command will show parts of the Opencast logs in which you should see an URL that you have to copy to a browser.    The web page will ask for your Google account (you have to use the account with which you created the developer\n  project earlier) followed by access settings and settings for the channel you want to publish to.    Once you have accepted the access, you will receive an answer like:  Received verification code. Closing\u2026    Now verify that Opencast has received the access key and that it has been saved in\n   work/opencast/youtube-v3/data-store/store.    Restart Opencast",
            "title": "YouTube configuration in Opencast"
        },
        {
            "location": "/modules/youtubepublication/#activate-youtube-publication-in-opencast",
            "text": "Opencast can now publish to YouTube. The last step is to activate this feature. For this you have to create a new\nworkflow or modify an existing one.    Make a copy of the default workflow  etc/opencast/workflows/ng-schedule-and-upload.xml  and create a copy named\n   etc/opencast/workflows/ng-schedule-and-upload-youtube.xml    In the file, modify the  <configuration_panel>  and enable the YouTube option, like this:  <input id=\"publishToYouTube\" name=\"publishToYouTube\" type=\"checkbox\"\n  checked=\"checked\" class=\"configField\" value=\"true\" />\n<label for=\"publishToYouTube\">YouTube</label>    In  <operation id=\"defaults\" , set  publishToYouTube  to  true .    Additionally, in the workflow  ng-partial-publish.xml  you also configure the  <operation id=\"publish-youtube\" . For\n  example, you could specify to publish the presentation stream only by setting the configuration to:  <configuration key=\"source-flavors\">presentation/trimmed</configuration>    Opencast will detect the new workflow without restart, with that you can select the new workflow with the YouTube option\nenabled.",
            "title": "Activate YouTube publication in Opencast"
        },
        {
            "location": "/workflowoperationhandlers/",
            "text": "Workflow Operation Handler\n\n\nIntroduction\n\n\nWorkflows are the central element to define how a media package is being processed by the Opencast services. Their\ndefinitions consist of a list of workflow operations, which basically map a piece of configuration to Opencast code:\n\n\n<definition xmlns=\"http://workflow.opencastproject.org\">\n    ....\n    <operation\n      id=\"tag\"\n      <configurations>\n        <configuration key=\"source-flavors\">presentation/trimmed</configuration>\n        <configuration key=\"target-flavor\">presentation/tagged</configuration>\n      </configurations>\n   </operation>\n   ...\n</definition>\n\n\n\nDefault Workflow Operations\n\n\nThe following table contains the workflow operations that are available in an out-of-the-box Opencast installation:\n\n\n\n\n\n\n\n\nOperation Handler\n\n\nDescription\n\n\nDetails\n\n\n\n\n\n\n\n\n\n\nanalyze-tracks\n\n\nAnalyze tracks in media package\n\n\nDocumentation\n\n\n\n\n\n\nanalyze-audio\n\n\nAnalyze first audio stream\n\n\nDocumentation\n\n\n\n\n\n\narchive\n\n\nArchive the current state of the mediapackage\n\n\nDocumentation\n\n\n\n\n\n\ncleanup\n\n\nCleanup the working file repository\n\n\nDocumentation\n\n\n\n\n\n\ncomment\n\n\nAdd, resolve or delete a comment\n\n\nDocumentation\n\n\n\n\n\n\ncompose\n\n\nEncode media files using FFmpeg\n\n\nDocumentation\n\n\n\n\n\n\ncomposite\n\n\nCompose two videos on one canvas.\n\n\nDocumentation\n\n\n\n\n\n\nconcat\n\n\nConcatenate multiple video tracks into one video track\n\n\nDocumentation\n\n\n\n\n\n\ncopy\n\n\nCopy media package elements to target directory\n\n\nDocumentation\n\n\n\n\n\n\ncover-image\n\n\nGenerate a cover-image containing metadata\n\n\nDocumentation\n\n\n\n\n\n\ndefaults\n\n\nApplies default workflow configuration values\n\n\nDocumentation\n\n\n\n\n\n\neditor\n\n\nWaiting for user to review, then cut video based on edit-list\n\n\nDocumentation\n\n\n\n\n\n\nemail\n\n\nSends email notifications at any part of a workflow\n\n\nDocumentation\n\n\n\n\n\n\nencode\n\n\nEncode media files to differents formats in parallel\n\n\nDocumentation\n\n\n\n\n\n\nexport-wf-properties\n\n\nExport workflow properties\n\n\nDocumentation\n\n\n\n\n\n\nextract-text\n\n\nExtracting text from presentation segments\n\n\nDocumentation\n\n\n\n\n\n\nhttp-notify\n\n\nNotifies an HTTP endpoint about the process of the workflow\n\n\nDocumentation\n\n\n\n\n\n\nimage\n\n\nExtract images from a video using FFmpeg\n\n\nDocumentation\n\n\n\n\n\n\nimage-to-video\n\n\nCreate a video track from a source image\n\n\nDocumentation\n\n\n\n\n\n\nimport-wf-properties\n\n\nImport workflow properties\n\n\nDocumentation\n\n\n\n\n\n\nincident\n\n\nTesting incidents on a dummy job\n\n\nDocumentation\n\n\n\n\n\n\ningest-download\n\n\nDownload files from external URL for ingest\n\n\nDocumentation\n\n\n\n\n\n\ninspect\n\n\nInspect the media (check if it is valid)\n\n\nDocumentation\n\n\n\n\n\n\nnormalize-audio\n\n\nNormalize first audio stream\n\n\nDocumentation\n\n\n\n\n\n\npartial-import\n\n\nImport partial tracks and process according to a SMIL document\n\n\nDocumentation\n\n\n\n\n\n\npost-mediapackage\n\n\nSend mediapackage to remote service\n\n\nDocumentation\n\n\n\n\n\n\nprepare-av\n\n\nPreparing audio and video work versions\n\n\nDocumentation\n\n\n\n\n\n\npublish-configure\n\n\nDistribute and publish media to the configured publication\n\n\nDocumentation\n\n\n\n\n\n\npublish-engage\n\n\nDistribute and publish media to the engage player\n\n\nDocumentation\n\n\n\n\n\n\nretract-configure\n\n\nRetracts media from configured publication\n\n\nDocumentation\n\n\n\n\n\n\nsegment-video\n\n\nExtracting segments from presentation\n\n\nDocumentation\n\n\n\n\n\n\nsegmentpreviews\n\n\nExtract segment images from a video using FFmpeg\n\n\nDocumentation\n\n\n\n\n\n\nseries\n\n\nApply series to the mediapackage\n\n\nDocumentation\n\n\n\n\n\n\nsilence\n\n\nSilence detection on audio of the mediapackage\n\n\nDocumentation\n\n\n\n\n\n\ntag\n\n\nModify the tag sets of media package elements\n\n\nDocumentation\n\n\n\n\n\n\ntheme\n\n\nMake settings of themes available to processing\n\n\nDocumentation\n\n\n\n\n\n\nwaveform\n\n\nCreate a waveform image of the audio of the mediapackage\n\n\nDocumentation\n\n\n\n\n\n\nzip\n\n\nCreate zipped archive of the current state of the mediapackage\n\n\nDocumentation",
            "title": "Overview"
        },
        {
            "location": "/workflowoperationhandlers/#workflow-operation-handler",
            "text": "",
            "title": "Workflow Operation Handler"
        },
        {
            "location": "/workflowoperationhandlers/#introduction",
            "text": "Workflows are the central element to define how a media package is being processed by the Opencast services. Their\ndefinitions consist of a list of workflow operations, which basically map a piece of configuration to Opencast code:  <definition xmlns=\"http://workflow.opencastproject.org\">\n    ....\n    <operation\n      id=\"tag\"\n      <configurations>\n        <configuration key=\"source-flavors\">presentation/trimmed</configuration>\n        <configuration key=\"target-flavor\">presentation/tagged</configuration>\n      </configurations>\n   </operation>\n   ...\n</definition>",
            "title": "Introduction"
        },
        {
            "location": "/workflowoperationhandlers/#default-workflow-operations",
            "text": "The following table contains the workflow operations that are available in an out-of-the-box Opencast installation:     Operation Handler  Description  Details      analyze-tracks  Analyze tracks in media package  Documentation    analyze-audio  Analyze first audio stream  Documentation    archive  Archive the current state of the mediapackage  Documentation    cleanup  Cleanup the working file repository  Documentation    comment  Add, resolve or delete a comment  Documentation    compose  Encode media files using FFmpeg  Documentation    composite  Compose two videos on one canvas.  Documentation    concat  Concatenate multiple video tracks into one video track  Documentation    copy  Copy media package elements to target directory  Documentation    cover-image  Generate a cover-image containing metadata  Documentation    defaults  Applies default workflow configuration values  Documentation    editor  Waiting for user to review, then cut video based on edit-list  Documentation    email  Sends email notifications at any part of a workflow  Documentation    encode  Encode media files to differents formats in parallel  Documentation    export-wf-properties  Export workflow properties  Documentation    extract-text  Extracting text from presentation segments  Documentation    http-notify  Notifies an HTTP endpoint about the process of the workflow  Documentation    image  Extract images from a video using FFmpeg  Documentation    image-to-video  Create a video track from a source image  Documentation    import-wf-properties  Import workflow properties  Documentation    incident  Testing incidents on a dummy job  Documentation    ingest-download  Download files from external URL for ingest  Documentation    inspect  Inspect the media (check if it is valid)  Documentation    normalize-audio  Normalize first audio stream  Documentation    partial-import  Import partial tracks and process according to a SMIL document  Documentation    post-mediapackage  Send mediapackage to remote service  Documentation    prepare-av  Preparing audio and video work versions  Documentation    publish-configure  Distribute and publish media to the configured publication  Documentation    publish-engage  Distribute and publish media to the engage player  Documentation    retract-configure  Retracts media from configured publication  Documentation    segment-video  Extracting segments from presentation  Documentation    segmentpreviews  Extract segment images from a video using FFmpeg  Documentation    series  Apply series to the mediapackage  Documentation    silence  Silence detection on audio of the mediapackage  Documentation    tag  Modify the tag sets of media package elements  Documentation    theme  Make settings of themes available to processing  Documentation    waveform  Create a waveform image of the audio of the mediapackage  Documentation    zip  Create zipped archive of the current state of the mediapackage  Documentation",
            "title": "Default Workflow Operations"
        },
        {
            "location": "/workflowoperationhandlers/analyze-tracks-woh/",
            "text": "AnalyzeTracksWorkflowOperationHandler\n\n\nDescription\n\n\nThe AnalyzeTracksWorkflowOperationHandler analyzes specified tracks in the mediapackage and sets workflow instance variables that\ncan be used to control if workflow operations should be executed.\n\n\nFor all tracks matching the flavor specified by the mandatory configuration key \nsource-flavor\n,\nthe following workflow instance variables will be set:\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntype\n_\nsubtype\n_audio\n\n\nBoolean\n\n\nSet to \ntrue\n if track contains at least one audio stream, \nfalse\n otherwise\n\n\n\n\n\n\ntype\n_\nsubtype\n_video\n\n\nBoolean\n\n\nSet to \ntrue\n if track contains at least one video stream, \nfalse\n otherwise\n\n\n\n\n\n\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor*\n\n\n\"presentation/work\"\n\n\nThe \"flavor\" of the track to use as a source input\n\n\n\n\n\n\n\n\n* mandatory configuration key\n\n\nOperation Example\n\n\n<operation\n  id=\"analyze-tracks\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Analyze tracks in media package and set control variables\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n  </configurations>\n</operation>",
            "title": "Analyze Tracks"
        },
        {
            "location": "/workflowoperationhandlers/analyze-tracks-woh/#analyzetracksworkflowoperationhandler",
            "text": "",
            "title": "AnalyzeTracksWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/analyze-tracks-woh/#description",
            "text": "The AnalyzeTracksWorkflowOperationHandler analyzes specified tracks in the mediapackage and sets workflow instance variables that\ncan be used to control if workflow operations should be executed.  For all tracks matching the flavor specified by the mandatory configuration key  source-flavor ,\nthe following workflow instance variables will be set:     Name  Type  Description      type _ subtype _audio  Boolean  Set to  true  if track contains at least one audio stream,  false  otherwise    type _ subtype _video  Boolean  Set to  true  if track contains at least one video stream,  false  otherwise",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/analyze-tracks-woh/#parameter-table",
            "text": "Configuration Key  Example  Description      source-flavor*  \"presentation/work\"  The \"flavor\" of the track to use as a source input     * mandatory configuration key",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/analyze-tracks-woh/#operation-example",
            "text": "<operation\n  id=\"analyze-tracks\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Analyze tracks in media package and set control variables\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/",
            "text": "AnalyzeAudioWorkflowOperationHandler\n\n\nDescription\n\n\nThe AnalyzeAudioiWorkflowOperationHandler analyzes the first audio stream of a video or audio track through SoX (http://sox.sourceforge.net/) and writes the result back to the given track.\n\n\nThis workflow operation handler can be used with audio and/or video files. At least one audio stream must be available otherwise nothing happens. Here are the internal steps done by the different inputs:\n\n\nUsed with Audio only file (forceTranscode is deactivated):\n\n\n\n\nAnalyze the given audio file with SoX\n\n\nWrite analyzed audio metadata back to the given track's mediapackage.\n\n\n\n\nUsed with Video file or with Audio only file with forceTranscode activated:\n\n\n\n\nExtract audio file encoded as FLAC audio and save it temporary in a collection\n\n\nAnalyze the previous encoded audio file with SoX\n\n\nWrite analyzed audio metadata back to the given track's mediapackage.\n\n\nDelete the temporary encoded FLAC audio file\n\n\n\n\nExample result track:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<track type=\"presentation/audio\" id=\"audio\">\n    <mimetype>video/x-flac</mimetype>\n    <tags />\n    <url>fooVideo.flac</url>\n    <checksum type=\"md5\">46cb2e9df2e73756b0d96c33b1aaf055</checksum>\n    <duration>65680</duration>\n    <audio id=\"audio-1\">\n        <device />\n        <encoder type=\"ADPCM\" />\n        <bitdepth>16</bitdepth>\n        <channels>2</channels>\n        <bitrate>62500.0</bitrate>\n        <peakleveldb>-30</peakleveldb> <!-- NEW -->\n        <rmsleveldb>-20</rmsleveldb> <!-- NEW -->\n        <rmspeakdb>-10</rmspeakdb> <!-- NEW -->\n    </audio>\n</track>\n\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-flavors\n\n\n\"presentation/work,presenter/work\"\n\n\nThe \"flavors\" of the track to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavor\n\n\n\"presentation/work\"\n\n\nThe \"flavor\" of the track to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\nsource-tags\n\n\n\"engage,atom,rss\"\n\n\nThe \"tag\" of the track to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\nforce-transcode\n\n\n\"true\" or \"false\"\n\n\nWhether to force transcoding the audio stream\n\n\n\n\n\n\n\n\n(This is needed when trying to strip an audio stream from an audio only video container, because SoX can not handle video formats, so it must be encoded to an audio format)\n\n\nFALSE\n\n\n\n\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"analyze-audio\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Analyze audio stream\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"force-transcode\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Analyze Audio"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/#analyzeaudioworkflowoperationhandler",
            "text": "",
            "title": "AnalyzeAudioWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/#description",
            "text": "The AnalyzeAudioiWorkflowOperationHandler analyzes the first audio stream of a video or audio track through SoX (http://sox.sourceforge.net/) and writes the result back to the given track.  This workflow operation handler can be used with audio and/or video files. At least one audio stream must be available otherwise nothing happens. Here are the internal steps done by the different inputs:",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/#used-with-audio-only-file-forcetranscode-is-deactivated",
            "text": "Analyze the given audio file with SoX  Write analyzed audio metadata back to the given track's mediapackage.",
            "title": "Used with Audio only file (forceTranscode is deactivated):"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/#used-with-video-file-or-with-audio-only-file-with-forcetranscode-activated",
            "text": "Extract audio file encoded as FLAC audio and save it temporary in a collection  Analyze the previous encoded audio file with SoX  Write analyzed audio metadata back to the given track's mediapackage.  Delete the temporary encoded FLAC audio file   Example result track:  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<track type=\"presentation/audio\" id=\"audio\">\n    <mimetype>video/x-flac</mimetype>\n    <tags />\n    <url>fooVideo.flac</url>\n    <checksum type=\"md5\">46cb2e9df2e73756b0d96c33b1aaf055</checksum>\n    <duration>65680</duration>\n    <audio id=\"audio-1\">\n        <device />\n        <encoder type=\"ADPCM\" />\n        <bitdepth>16</bitdepth>\n        <channels>2</channels>\n        <bitrate>62500.0</bitrate>\n        <peakleveldb>-30</peakleveldb> <!-- NEW -->\n        <rmsleveldb>-20</rmsleveldb> <!-- NEW -->\n        <rmspeakdb>-10</rmspeakdb> <!-- NEW -->\n    </audio>\n</track>",
            "title": "Used with Video file or with Audio only file with forceTranscode activated:"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      source-flavors  \"presentation/work,presenter/work\"  The \"flavors\" of the track to use as a source input  EMPTY    source-flavor  \"presentation/work\"  The \"flavor\" of the track to use as a source input  EMPTY    source-tags  \"engage,atom,rss\"  The \"tag\" of the track to use as a source input  EMPTY    force-transcode  \"true\" or \"false\"  Whether to force transcoding the audio stream     (This is needed when trying to strip an audio stream from an audio only video container, because SoX can not handle video formats, so it must be encoded to an audio format)  FALSE",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/analyzeaudio-woh/#operation-example",
            "text": "<operation\n  id=\"analyze-audio\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Analyze audio stream\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"force-transcode\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/archive-woh/",
            "text": "ArchiveWorkflowHandler\n\n\nDescription\n\n\nThe ArchiveWorkflowHandler will archive the specified assets of the mediapackage.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-tags\n\n\ntext\n\n\nSpecifies the media to be archived.\n\n\n\n\n\n\nsource-flavors\n\n\npresenter/source\n\n\nFlavors that should be archived, separated by \",\"\n\n\n\n\n\n\n\n\nRequired Assets\n\n\nAll archive operations require a dublincore/episode catalog to be archived along with the additional assets. Not adding\none will cause the operation to fail.\n\n\nOperation Example\n\n\n<operation\n  id=\"archive\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Archiving\">\n  <configurations>\n    <configuration key=\"source-tags\">archive</configuration>\n  </configurations>\n</operation>",
            "title": "Archive"
        },
        {
            "location": "/workflowoperationhandlers/archive-woh/#archiveworkflowhandler",
            "text": "",
            "title": "ArchiveWorkflowHandler"
        },
        {
            "location": "/workflowoperationhandlers/archive-woh/#description",
            "text": "The ArchiveWorkflowHandler will archive the specified assets of the mediapackage.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/archive-woh/#parameter-table",
            "text": "configuration keys  example  description      source-tags  text  Specifies the media to be archived.    source-flavors  presenter/source  Flavors that should be archived, separated by \",\"",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/archive-woh/#required-assets",
            "text": "All archive operations require a dublincore/episode catalog to be archived along with the additional assets. Not adding\none will cause the operation to fail.",
            "title": "Required Assets"
        },
        {
            "location": "/workflowoperationhandlers/archive-woh/#operation-example",
            "text": "<operation\n  id=\"archive\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Archiving\">\n  <configurations>\n    <configuration key=\"source-tags\">archive</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/cleanup-woh/",
            "text": "CleanupWorkflowOperationHandler\n\n\nDescription\n\n\nThis opertaion removes all files in the working file repository for mediapackage elements that don't match one of the\n\npreserve-flavors\n configuration value.\nIt is used as last workflow operation in a workflow to ensure that temporary processing artefacts are removed from the working file repository.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npreserve-flavors\n\n\nsecurity/*,*/source\n\n\nComma-separated list of flavors to be preserved.\n\n\n\n\n\n\ndelete-external\n\n\ntrue\n\n\nWhether to try to delete external working file repository URIs using HTTP delete. Default is false.\n\n\n\n\n\n\n\n\n* mandatory configuration key\n\n\nNotes:\n\n\n\n\nIf \ndelete-external\n is set to true, all externally referenced media package elements will be removed from its source independent of the value of \npreserve-flavors\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"cleanup\"\n  fail-on-error=\"false\"\n  description=\"Remove temporary processing artifacts\">\n  <configurations>\n    <configuration key=\"preserve-flavors\">security/*</configuration>\n    <configuration key=\"delete-external\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Cleanup"
        },
        {
            "location": "/workflowoperationhandlers/cleanup-woh/#cleanupworkflowoperationhandler",
            "text": "",
            "title": "CleanupWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/cleanup-woh/#description",
            "text": "This opertaion removes all files in the working file repository for mediapackage elements that don't match one of the preserve-flavors  configuration value.\nIt is used as last workflow operation in a workflow to ensure that temporary processing artefacts are removed from the working file repository.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/cleanup-woh/#parameter-table",
            "text": "Configuration Key  Example  Description      preserve-flavors  security/*,*/source  Comma-separated list of flavors to be preserved.    delete-external  true  Whether to try to delete external working file repository URIs using HTTP delete. Default is false.     * mandatory configuration key  Notes:   If  delete-external  is set to true, all externally referenced media package elements will be removed from its source independent of the value of  preserve-flavors",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/cleanup-woh/#operation-example",
            "text": "<operation\n  id=\"cleanup\"\n  fail-on-error=\"false\"\n  description=\"Remove temporary processing artifacts\">\n  <configurations>\n    <configuration key=\"preserve-flavors\">security/*</configuration>\n    <configuration key=\"delete-external\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/comment-woh/",
            "text": "CommentWorkflowOperationHandler\n\n\nDescription\n\n\nThe CommentWorkflowOperationHandler can be used to create, resolve or delete comments for events within workflows.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nExample\n\n\nDescription\n\n\nDefault\n\n\n\n\n\n\n\n\n\n\naction\n\n\ncreate\n\n\nAction to be performed: create, resolve or delete\n\n\ncreate\n\n\n\n\n\n\ndescription*\n\n\nRecording has not been cut yet.\n\n\nThe description text to add to the comment\n\n\n\n\n\n\n\n\nreason\n\n\nEVENTS.COMMENTS.REASONS.CUTTING\n\n\nThe optional comment reason's i18n id. You can find the id in etc/listprovides/event.comment.reasons.properties\n\n\n\n\n\n\n\n\n\n\n* mandatory configuration key\n\n\nNotes:\n\n\n\n\ncreate\n will not create duplicate comments, i.e. if there is already a comment with the same reason and description, no additional comment will be created\n\n\nresolve\n and \ndelete\n will perform no action in case that no comment with the specified reason and description exists\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"comment\"\n  description=\"Mark the recording for cutting\">\n  <configurations>\n    <configuration key=\"description\">Recording has not been cut yet.</configuration>\n    <configuration key=\"reason\">EVENTS.COMMENTS.REASONS.CUTTING</configuration>\n    <configuration key=\"action\">create</configuration>\n  </configurations>\n</operation>",
            "title": "Comment"
        },
        {
            "location": "/workflowoperationhandlers/comment-woh/#commentworkflowoperationhandler",
            "text": "",
            "title": "CommentWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/comment-woh/#description",
            "text": "The CommentWorkflowOperationHandler can be used to create, resolve or delete comments for events within workflows.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/comment-woh/#parameter-table",
            "text": "Configuration Key  Example  Description  Default      action  create  Action to be performed: create, resolve or delete  create    description*  Recording has not been cut yet.  The description text to add to the comment     reason  EVENTS.COMMENTS.REASONS.CUTTING  The optional comment reason's i18n id. You can find the id in etc/listprovides/event.comment.reasons.properties      * mandatory configuration key  Notes:   create  will not create duplicate comments, i.e. if there is already a comment with the same reason and description, no additional comment will be created  resolve  and  delete  will perform no action in case that no comment with the specified reason and description exists",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/comment-woh/#operation-example",
            "text": "<operation\n  id=\"comment\"\n  description=\"Mark the recording for cutting\">\n  <configurations>\n    <configuration key=\"description\">Recording has not been cut yet.</configuration>\n    <configuration key=\"reason\">EVENTS.COMMENTS.REASONS.CUTTING</configuration>\n    <configuration key=\"action\">create</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/compose-woh/",
            "text": "ComposeWorkflowHandler\n\n\nDescription\n\n\nThe ComposeWorkflowHandler is used to encode media files to different formats using FFmpeg.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresenter/work\n\n\nWhich media should be encoded\n\n\n\n\n\n\ntarget-flavor\n\n\npresenter/delivery\n\n\nSpecifies the flavor of the new media\n\n\n\n\n\n\nsource-tags\n\n\nsometag\n\n\nTags of media to encode\n\n\n\n\n\n\ntarget-tags\n\n\nsometag\n\n\nSpecifies the tags of the new media\n\n\n\n\n\n\nencoding-profile\n\n\nwebm-hd\n\n\nSpecifies the encoding profile to use\n\n\n\n\n\n\ntags-and-flavors\n\n\ntrue\n\n\nWhen false (default), the operation selects input elements that have EITHER any of the source tags OR the source flavor. When true, the operation selects input elements that have BOTH the source-flavor AND any of the source tags\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n    id=\"compose\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Encoding presenter (camera) video to Flash download\">\n    <configurations>\n        <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n        <configuration key=\"target-flavor\">presenter/delivery</configuration>\n        <configuration key=\"target-tags\">engage</configuration>\n        <configuration key=\"encoding-profile\">flash.http</configuration>\n    </configurations>\n</operation>",
            "title": "Compose"
        },
        {
            "location": "/workflowoperationhandlers/compose-woh/#composeworkflowhandler",
            "text": "",
            "title": "ComposeWorkflowHandler"
        },
        {
            "location": "/workflowoperationhandlers/compose-woh/#description",
            "text": "The ComposeWorkflowHandler is used to encode media files to different formats using FFmpeg.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/compose-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presenter/work  Which media should be encoded    target-flavor  presenter/delivery  Specifies the flavor of the new media    source-tags  sometag  Tags of media to encode    target-tags  sometag  Specifies the tags of the new media    encoding-profile  webm-hd  Specifies the encoding profile to use    tags-and-flavors  true  When false (default), the operation selects input elements that have EITHER any of the source tags OR the source flavor. When true, the operation selects input elements that have BOTH the source-flavor AND any of the source tags",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/compose-woh/#operation-example",
            "text": "<operation\n    id=\"compose\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Encoding presenter (camera) video to Flash download\">\n    <configurations>\n        <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n        <configuration key=\"target-flavor\">presenter/delivery</configuration>\n        <configuration key=\"target-tags\">engage</configuration>\n        <configuration key=\"encoding-profile\">flash.http</configuration>\n    </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/",
            "text": "Composite Workflow Operation Handler\n\n\nDescription\n\n\nThe CompositeWorkflowOperationHandler is used to composite two videos (upper and lower) and an optional watermark into\none video, including encoding to different formats. The audio track is always taken from the lower video. Everything is\ndone using FFmpeg. The composition can be done in various layout formats e.g. side by side or picture in picture. The\nlayout has to be defined in JSON format and is described in section \"Layout Definition\". For some general information\nabout layouts see Opencast Composer Layout Module.\n\n\nThe internal ffmpeg command is using the following filters: scale for scaling the videos, pad for defining the output\ndimension including the background color, movie for adding additional videos and images and overlay for aligning the\nvideos and images to the output dimension. More info can be found here: https://trac.ffmpeg.org/wiki/FilteringGuide\n\n\nSample complex composite filter command\n\n\n-filter:v \"[in]scale=640:480,pad=1920:1080:20:20:black[lower];movie=test.mp4,scale=640:480[upper];movie=watermark.jpg[watermark];[lower][upper]overlay=200:200[video];[video][watermark]overlay=main_w-overlay_w-20:20[out]\" sidebyside.mp4\n\n\n\nParameter Table\n\n\nTags and flavors can be used in combination.\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nvalue type (EBNF)\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-tags-upper\n\n\nString , { \",\" , String }\n\n\ncomp,rss\n\n\nThe \"tag\" of the upper track to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavor-upper\n\n\nMediaPackageElementFlavor\n\n\npresenter/trimmed\n\n\nThe \"flavor\" of the upper track to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\nsource-tags-lower\n\n\nString , { \",\" , String }\n\n\ncomp,rss\n\n\nThe \"tag\" of the lower track to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavor-lower\n\n\nMediaPackageElementFlavor\n\n\npresenter/trimmed\n\n\nThe \"flavor\" of the lower track to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\nsource-tags-watermark\n\n\nString , { \",\" , String }\n\n\nbranding\n\n\nThe \"tag\" of the attachment image to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavor-watermark\n\n\nMediaPackageElementFlavor\n\n\nimage/work\n\n\nThe \"flavor\" of the attachment image to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\nsource-url-watermark\n\n\nURL\n\n\nfile:///Users/me/logo.jpg\n\n\nThe \"URL\" of the fallback image to use as a source input.\n\n\nEMPTY\n\n\n\n\n\n\ntarget-tags\n\n\nString , { \",\" , String }\n\n\ncomposite,rss,atom,archive\n\n\nThe tags to apply to the compound video track.\n\n\nEMPTY\n\n\n\n\n\n\n* \ntarget-flavor\n\n\nMediaPackageElementFlavor\n\n\ncomposite/delivery\n\n\nThe flavor to apply to the compound video track.\n\n\nEMPTY\n\n\n\n\n\n\n* \nencoding-profile\n\n\nString\n\n\ncomposite\n\n\nThe encoding profile to use.\n\n\nEMPTY\n\n\n\n\n\n\n* \noutput-resolution\n\n\nwidth , \"x\" , height\n\n\n1900x1080\n\n\nThe resulting resolution of the compound video e.g. 1900x1080.\n\n\nEMPTY\n\n\n\n\n\n\noutput-background\n\n\nString\n\n\nred\n\n\nThe resulting background color of the compound video http://www.ffmpeg.org/ffmpeg-utils.html#Color.\n\n\nblack\n\n\n\n\n\n\nlayout\n\n\nname\n\n\nJson , \";\" , Json , [ \";\" , Json ]\n\n\nThe layout name to use or a semi-colon separated JSON layout definition (lower video, upper video, optional watermark). If a layout name is given than the corresponding layout-{name} key must be defined.\n\n\nEMPTY\n\n\n\n\n\n\nlayout-single\n\n\nname\n\n\nJson , \";\" , Json , [ \";\" , Json ]\n\n\nLayout to be used in case of one input video track (see \nlayout\n)\n\n\nEMPTY\n\n\n\n\n\n\nlayout-dual\n\n\nname\n\n\nJson , \";\" , Json , [ \";\" , Json ]\n\n\nLayout to be used in case of two input video tracks (see \nlayout\n). Defaults to value of \nlayout\n if not set.\n\n\nEMPTY\n\n\n\n\n\n\nlayout-{name}\n\n\nJson , \";\" , Json , [ \";\" , Json ]\n\n\nDefine semi-colon separated JSON layouts (lower video, upper video, optional watermark) to provide by name.\n\n\nEMPTY\n\n\n\n\n\n\n\n\n\n\n* \nmandatory\n\n\nNotes:\n\n\n\n\nAt least one of the configuration keys \nlayout\n, \nlayout-single\n, or \nlayout-multiple\n must be set\n\n\n\n\nLayout Definition\n\n\nThe layout definitions are provided as JSON. Each definition consist of the layout specifications for the lower and\nupper video and an optional specification for the watermark. The specifications have to be separated by comma.\n\n\nIt is always ensured that the media does not exceed the canvas. Offset and scaling is adjusted appropriately.\n\n\nA single layout is specified as follows:\n\n\n{\n  // How much of the canvas shall be covered. [0.0 - 1.0]\n  // 1.0 means that the media is scaled to cover the complete width of the canvas keeping the aspect ratio.\n  \"horizontalCoverage\": Double,\n  // The offset between the anchor points of the media and the canvas\n  \"anchorOffset\": {\n    // The anchor point of the media. [0.0 - 1.0]\n    // (0.0, 0.0) is the upper left corner, (1.0, 1.0) is the lower right corner.\n    // (0.5, 0.5) is the center.\n    \"referring\": {\n      \"left\": Double,\n      \"top\": Double\n    },\n    // The anchor point of the canvas.\n    \"reference\": {\n      \"left\": Double,\n      \"top\": Double\n    },\n    // The offset between the two anchor points.\n    \"offset\": {\n      \"y\": Integer,\n      \"x\": Integer\n    }\n  }\n}\n\n// Example.\n// The media is scaled to cover the whole width of the canvas and is placed in the upper left corner.\n{\n  \"horizontalCoverage\": 1.0,\n  \"anchorOffset\": {\n    \"referring\": {\n      \"left\": 0.0,\n      \"top\": 0.0\n    },\n    \"offset\": {\n      \"y\": 0,\n      \"x\": 0\n    },\n    \"reference\": {\n      \"left\": 0.0,\n      \"top\": 0.0\n    }\n  }\n}\n\n// Example.\n// The media is scaled to cover 20% of the width of the canvas and is placed in the lower right corner\n// with an offset of -10px on both x and y axis so that it does not touch the canvas' border.\n{\n  \"horizontalCoverage\": 0.2,\n  \"anchorOffset\": {\n    \"referring\": {\n      \"left\": 1.0,\n      \"top\": 1.0\n    },\n    \"offset\": {\n      \"y\": -10,\n      \"x\": -10\n    },\n    \"reference\": {\n      \"left\": 1.0,\n      \"top\": 1.0\n    }\n  }\n}\n\n\n\nOperation Example\n\n\n<operation\n  id=\"composite\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Composite\">\n  <configurations>\n    <configuration key=\"source-flavor-upper\">presentation/trimmed</configuration>\n    <configuration key=\"source-flavor-lower\">presenter/trimmed</configuration>\n    <configuration key=\"source-tags-upper\">comp,rss</configuration>\n    <configuration key=\"source-tags-lower\">comp,rss</configuration>\n    <configuration key=\"source-tags-watermark\">branding</configuration>\n    <configuration key=\"source-flavor-watermark\">image/work</configuration>\n    <configuration key=\"source-url-watermark\">file:///Users/me/logo.jpg</configuration>\n    <configuration key=\"encoding-profile\">composite</configuration>\n    <configuration key=\"target-tags\">composite,rss,atom,archive</configuration>\n    <configuration key=\"target-flavor\">composite/delivery</configuration>\n    <configuration key=\"output-resolution\">1900x1080</configuration>\n    <configuration key=\"output-background\">red</configuration>\n    <configuration key=\"layout\">topleft</configuration>\n    <configuration key=\"layout-topleft\">\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":1.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":1.0,\"top\":1.0}}};\n      {\"horizontalCoverage\":0.2,\"anchorOffset\":{\"referring\":{\"left\":0.0,\"top\":0.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":0.0,\"top\":0.0}}};\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":0.0},\"offset\":{\"y\":20,\"x\":20},\"reference\":{\"left\":1.0,\"top\":0.0}}}\n    </configuration>\n    <configuration key=\"layout-topright\">\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":1.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":1.0,\"top\":1.0}}};\n      {\"horizontalCoverage\":0.2,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":0.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":1.0,\"top\":0.0}}};\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":0.0,\"top\":0.0},\"offset\":{\"y\":20,\"x\":20},\"reference\":{\"left\":0.0,\"top\":0.0}}}\n    </configuration>\n  </configurations>\n</operation>",
            "title": "Composite"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/#composite-workflow-operation-handler",
            "text": "",
            "title": "Composite Workflow Operation Handler"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/#description",
            "text": "The CompositeWorkflowOperationHandler is used to composite two videos (upper and lower) and an optional watermark into\none video, including encoding to different formats. The audio track is always taken from the lower video. Everything is\ndone using FFmpeg. The composition can be done in various layout formats e.g. side by side or picture in picture. The\nlayout has to be defined in JSON format and is described in section \"Layout Definition\". For some general information\nabout layouts see Opencast Composer Layout Module.  The internal ffmpeg command is using the following filters: scale for scaling the videos, pad for defining the output\ndimension including the background color, movie for adding additional videos and images and overlay for aligning the\nvideos and images to the output dimension. More info can be found here: https://trac.ffmpeg.org/wiki/FilteringGuide",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/#sample-complex-composite-filter-command",
            "text": "-filter:v \"[in]scale=640:480,pad=1920:1080:20:20:black[lower];movie=test.mp4,scale=640:480[upper];movie=watermark.jpg[watermark];[lower][upper]overlay=200:200[video];[video][watermark]overlay=main_w-overlay_w-20:20[out]\" sidebyside.mp4",
            "title": "Sample complex composite filter command"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/#parameter-table",
            "text": "Tags and flavors can be used in combination.     configuration keys  value type (EBNF)  example  description  default value      source-tags-upper  String , { \",\" , String }  comp,rss  The \"tag\" of the upper track to use as a source input.  EMPTY    source-flavor-upper  MediaPackageElementFlavor  presenter/trimmed  The \"flavor\" of the upper track to use as a source input.  EMPTY    source-tags-lower  String , { \",\" , String }  comp,rss  The \"tag\" of the lower track to use as a source input.  EMPTY    source-flavor-lower  MediaPackageElementFlavor  presenter/trimmed  The \"flavor\" of the lower track to use as a source input.  EMPTY    source-tags-watermark  String , { \",\" , String }  branding  The \"tag\" of the attachment image to use as a source input.  EMPTY    source-flavor-watermark  MediaPackageElementFlavor  image/work  The \"flavor\" of the attachment image to use as a source input.  EMPTY    source-url-watermark  URL  file:///Users/me/logo.jpg  The \"URL\" of the fallback image to use as a source input.  EMPTY    target-tags  String , { \",\" , String }  composite,rss,atom,archive  The tags to apply to the compound video track.  EMPTY    *  target-flavor  MediaPackageElementFlavor  composite/delivery  The flavor to apply to the compound video track.  EMPTY    *  encoding-profile  String  composite  The encoding profile to use.  EMPTY    *  output-resolution  width , \"x\" , height  1900x1080  The resulting resolution of the compound video e.g. 1900x1080.  EMPTY    output-background  String  red  The resulting background color of the compound video http://www.ffmpeg.org/ffmpeg-utils.html#Color.  black    layout  name  Json , \";\" , Json , [ \";\" , Json ]  The layout name to use or a semi-colon separated JSON layout definition (lower video, upper video, optional watermark). If a layout name is given than the corresponding layout-{name} key must be defined.  EMPTY    layout-single  name  Json , \";\" , Json , [ \";\" , Json ]  Layout to be used in case of one input video track (see  layout )  EMPTY    layout-dual  name  Json , \";\" , Json , [ \";\" , Json ]  Layout to be used in case of two input video tracks (see  layout ). Defaults to value of  layout  if not set.  EMPTY    layout-{name}  Json , \";\" , Json , [ \";\" , Json ]  Define semi-colon separated JSON layouts (lower video, upper video, optional watermark) to provide by name.  EMPTY      *  mandatory  Notes:   At least one of the configuration keys  layout ,  layout-single , or  layout-multiple  must be set",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/#layout-definition",
            "text": "The layout definitions are provided as JSON. Each definition consist of the layout specifications for the lower and\nupper video and an optional specification for the watermark. The specifications have to be separated by comma.  It is always ensured that the media does not exceed the canvas. Offset and scaling is adjusted appropriately.  A single layout is specified as follows:  {\n  // How much of the canvas shall be covered. [0.0 - 1.0]\n  // 1.0 means that the media is scaled to cover the complete width of the canvas keeping the aspect ratio.\n  \"horizontalCoverage\": Double,\n  // The offset between the anchor points of the media and the canvas\n  \"anchorOffset\": {\n    // The anchor point of the media. [0.0 - 1.0]\n    // (0.0, 0.0) is the upper left corner, (1.0, 1.0) is the lower right corner.\n    // (0.5, 0.5) is the center.\n    \"referring\": {\n      \"left\": Double,\n      \"top\": Double\n    },\n    // The anchor point of the canvas.\n    \"reference\": {\n      \"left\": Double,\n      \"top\": Double\n    },\n    // The offset between the two anchor points.\n    \"offset\": {\n      \"y\": Integer,\n      \"x\": Integer\n    }\n  }\n}\n\n// Example.\n// The media is scaled to cover the whole width of the canvas and is placed in the upper left corner.\n{\n  \"horizontalCoverage\": 1.0,\n  \"anchorOffset\": {\n    \"referring\": {\n      \"left\": 0.0,\n      \"top\": 0.0\n    },\n    \"offset\": {\n      \"y\": 0,\n      \"x\": 0\n    },\n    \"reference\": {\n      \"left\": 0.0,\n      \"top\": 0.0\n    }\n  }\n}\n\n// Example.\n// The media is scaled to cover 20% of the width of the canvas and is placed in the lower right corner\n// with an offset of -10px on both x and y axis so that it does not touch the canvas' border.\n{\n  \"horizontalCoverage\": 0.2,\n  \"anchorOffset\": {\n    \"referring\": {\n      \"left\": 1.0,\n      \"top\": 1.0\n    },\n    \"offset\": {\n      \"y\": -10,\n      \"x\": -10\n    },\n    \"reference\": {\n      \"left\": 1.0,\n      \"top\": 1.0\n    }\n  }\n}",
            "title": "Layout Definition"
        },
        {
            "location": "/workflowoperationhandlers/composite-woh/#operation-example",
            "text": "<operation\n  id=\"composite\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Composite\">\n  <configurations>\n    <configuration key=\"source-flavor-upper\">presentation/trimmed</configuration>\n    <configuration key=\"source-flavor-lower\">presenter/trimmed</configuration>\n    <configuration key=\"source-tags-upper\">comp,rss</configuration>\n    <configuration key=\"source-tags-lower\">comp,rss</configuration>\n    <configuration key=\"source-tags-watermark\">branding</configuration>\n    <configuration key=\"source-flavor-watermark\">image/work</configuration>\n    <configuration key=\"source-url-watermark\">file:///Users/me/logo.jpg</configuration>\n    <configuration key=\"encoding-profile\">composite</configuration>\n    <configuration key=\"target-tags\">composite,rss,atom,archive</configuration>\n    <configuration key=\"target-flavor\">composite/delivery</configuration>\n    <configuration key=\"output-resolution\">1900x1080</configuration>\n    <configuration key=\"output-background\">red</configuration>\n    <configuration key=\"layout\">topleft</configuration>\n    <configuration key=\"layout-topleft\">\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":1.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":1.0,\"top\":1.0}}};\n      {\"horizontalCoverage\":0.2,\"anchorOffset\":{\"referring\":{\"left\":0.0,\"top\":0.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":0.0,\"top\":0.0}}};\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":0.0},\"offset\":{\"y\":20,\"x\":20},\"reference\":{\"left\":1.0,\"top\":0.0}}}\n    </configuration>\n    <configuration key=\"layout-topright\">\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":1.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":1.0,\"top\":1.0}}};\n      {\"horizontalCoverage\":0.2,\"anchorOffset\":{\"referring\":{\"left\":1.0,\"top\":0.0},\"offset\":{\"y\":-20,\"x\":-20},\"reference\":{\"left\":1.0,\"top\":0.0}}};\n      {\"horizontalCoverage\":1.0,\"anchorOffset\":{\"referring\":{\"left\":0.0,\"top\":0.0},\"offset\":{\"y\":20,\"x\":20},\"reference\":{\"left\":0.0,\"top\":0.0}}}\n    </configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/",
            "text": "Concat workflow operation handler\n\n\n FFMPEG 1.1 is required for the encoding profile related to this operation! \n\n\nOverview\n\n\nThe \"concat\" operation handler has been created to concatenate multiple video tracks into one video track. The concatenation process uses the ffmpeg scale filter which is always re-encoding the videos, this means the resulting video has most likely a loss of quality.\n\n\n\n\nThe internal ffmpeg command is using the following filters:  scale, pad and setdar for scaling all videos to a similar size including letterboxing, aevalsrc for creating silent audio streams and of course the concat for the actual concatenation step. More info can be found here: https://trac.ffmpeg.org/wiki/FilteringGuide\n\n\nSample complex concat filter command\n\n\n-filter_complex \"[0:v]scale=iw*min(640/iw\\,480/ih):ih*min(640/iw\\,480/ih),pad=640:480:(ow-iw)/2:(oh-ih)/2,setdar=4:3[b];[1:v]scale=iw*min(640/iw\\,480/ih):ih*min(640/iw\\,480/ih),pad=640:480:(ow-iw)/2:(oh-ih)/2,setdar=4:3[c];[2:v]scale=iw*min(640/iw\\,480/ih):ih*min(640/iw\\,480/ih),pad=640:480:(ow-iw)/2:(oh-ih)/2,setdar=4:3[d];aevalsrc=0::d=1[silent];[b][0:a][c][silent][d][2:a]concat=n=3:v=1:a=1[v][a]\" -map '[v]' -map '[a]'\n\n\n\nUsage\n\n\nThis operation is quite similar to the compose operation. The only difference is that the input properties are not only limited to one \"source-flavor\" and \"source-tag\". The operation supports multiple flavor and tags as input.  To add multiple source, add different key with the prefix \"source-flavor-\"/\"source-tag-\" and an incremental number starting with 0. For example:\n\n\n\n\nsource-flavor-0\n\n\nsource-flavor-1\n\n\nsource-flavor-..\n\n\n\n\nConfiguration keys\n\n\n\n\n\n\n\n\nKey\n\n\nRequired\n\n\nDescription\n\n\nDefault Value\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nsource-flavor-part-X\n\n\nfalse\n\n\nAn iterative list of part/flavor to use as input track.\n\n\nNULL\n\n\n\n\n\n\n\n\npresenter/trimmed\n\n\nsource-tag-part-X\n\n\nfalse\n\n\nAn iterative list of part/tag to use as input track.\n\n\nNULL\n\n\n\n\n\n\nsource-to-concate\n\n\nsource-flavor-part-X-mandatory\n\n\nfalse\n\n\nDefine the flavor part-X as an optional track for concatenation.\n\n\nfalse\n\n\n\n\n\n\nsource-tag-part-X-mandatory\n\n\nfalse\n\n\nDefine the tag part-X as an optional track for concatenation.\n\n\nfalse\n\n\ntrue\n\n\n\n\n\n\nencoding-profile\n\n\ntrue\n\n\nDefine the encoding-profile to use for the concatenation operation. See example of profile below.\n\n\nNULL\n\n\nconcat\n\n\n\n\n\n\ntarget-flavor\n\n\ntrue\n\n\nDefine the flavor(s) to add to the output track.\n\n\nNULL\n\n\npresenter/concat\n\n\n\n\n\n\ntarget-tags\n\n\nfalse\n\n\nDefine the tag(s) to add to the output track\n\n\nNULL\n\n\nengage-download\n\n\n\n\n\n\noutput-resolution\n\n\ntrue\n\n\nDefine the output resolution in width, height or take it from one of the given parts\n\n\nNULL\n\n\n1900x1080, part-1\n\n\n\n\n\n\n\n\nExample\n\n\nExample of an concat operation in a workflow definition.\n\n\n<!-- Add intro and outro part to the presenter track -->\n<operation\n  id=\"concat\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Concatenate the presenter track and the intro/outro videos.\">\n  <configurations>\n    <configuration key=\"source-flavor-part-0\">intro/source</configuration>\n    <configuration key=\"source-flavor-part-1\">presenter/trimmed</configuration>\n    <configuration key=\"source-flavor-part-1-mandatory\">true</configuration>\n    <configuration key=\"source-flavor-part-2\">outro/source</configuration>\n    <configuration key=\"target-flavor\">presenter/concat</configuration>\n    <configuration key=\"target-tags\">engage-download,engage-streaming</configuration>\n    <configuration key=\"encoding-profile\">concat</configuration>\n    <configuration key=\"output-resolution\">1920x1080</configuration>\n  </configurations>\n</operation>\n\n\n\nEncoding profile\n\n\nThe encoding profile command must contain the the #{concatCommand} parameter.\n\n\n# Concat\nprofile.concat.name = concat\nprofile.concat.input = visual\nprofile.concat.output = visual\nprofile.concat.suffix = -concatenated.mp4\nprofile.concat.mimetype = video/mp4\nprofile.concat.ffmpeg.command = #{concatCommand} -acodec libfaac -b:a 128k -vcodec mpeg4 -b:v 1200k\n-flags +aic+mv4 #{out.dir}/#{out.name}#{out.suffix}",
            "title": "Concat"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#concat-workflow-operation-handler",
            "text": "FFMPEG 1.1 is required for the encoding profile related to this operation!",
            "title": "Concat workflow operation handler"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#overview",
            "text": "The \"concat\" operation handler has been created to concatenate multiple video tracks into one video track. The concatenation process uses the ffmpeg scale filter which is always re-encoding the videos, this means the resulting video has most likely a loss of quality.   The internal ffmpeg command is using the following filters:  scale, pad and setdar for scaling all videos to a similar size including letterboxing, aevalsrc for creating silent audio streams and of course the concat for the actual concatenation step. More info can be found here: https://trac.ffmpeg.org/wiki/FilteringGuide",
            "title": "Overview"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#sample-complex-concat-filter-command",
            "text": "-filter_complex \"[0:v]scale=iw*min(640/iw\\,480/ih):ih*min(640/iw\\,480/ih),pad=640:480:(ow-iw)/2:(oh-ih)/2,setdar=4:3[b];[1:v]scale=iw*min(640/iw\\,480/ih):ih*min(640/iw\\,480/ih),pad=640:480:(ow-iw)/2:(oh-ih)/2,setdar=4:3[c];[2:v]scale=iw*min(640/iw\\,480/ih):ih*min(640/iw\\,480/ih),pad=640:480:(ow-iw)/2:(oh-ih)/2,setdar=4:3[d];aevalsrc=0::d=1[silent];[b][0:a][c][silent][d][2:a]concat=n=3:v=1:a=1[v][a]\" -map '[v]' -map '[a]'",
            "title": "Sample complex concat filter command"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#usage",
            "text": "This operation is quite similar to the compose operation. The only difference is that the input properties are not only limited to one \"source-flavor\" and \"source-tag\". The operation supports multiple flavor and tags as input.  To add multiple source, add different key with the prefix \"source-flavor-\"/\"source-tag-\" and an incremental number starting with 0. For example:   source-flavor-0  source-flavor-1  source-flavor-..",
            "title": "Usage"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#configuration-keys",
            "text": "Key  Required  Description  Default Value  Example      source-flavor-part-X  false  An iterative list of part/flavor to use as input track.  NULL     presenter/trimmed  source-tag-part-X  false  An iterative list of part/tag to use as input track.  NULL    source-to-concate  source-flavor-part-X-mandatory  false  Define the flavor part-X as an optional track for concatenation.  false    source-tag-part-X-mandatory  false  Define the tag part-X as an optional track for concatenation.  false  true    encoding-profile  true  Define the encoding-profile to use for the concatenation operation. See example of profile below.  NULL  concat    target-flavor  true  Define the flavor(s) to add to the output track.  NULL  presenter/concat    target-tags  false  Define the tag(s) to add to the output track  NULL  engage-download    output-resolution  true  Define the output resolution in width, height or take it from one of the given parts  NULL  1900x1080, part-1",
            "title": "Configuration keys"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#example",
            "text": "Example of an concat operation in a workflow definition.  <!-- Add intro and outro part to the presenter track -->\n<operation\n  id=\"concat\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Concatenate the presenter track and the intro/outro videos.\">\n  <configurations>\n    <configuration key=\"source-flavor-part-0\">intro/source</configuration>\n    <configuration key=\"source-flavor-part-1\">presenter/trimmed</configuration>\n    <configuration key=\"source-flavor-part-1-mandatory\">true</configuration>\n    <configuration key=\"source-flavor-part-2\">outro/source</configuration>\n    <configuration key=\"target-flavor\">presenter/concat</configuration>\n    <configuration key=\"target-tags\">engage-download,engage-streaming</configuration>\n    <configuration key=\"encoding-profile\">concat</configuration>\n    <configuration key=\"output-resolution\">1920x1080</configuration>\n  </configurations>\n</operation>",
            "title": "Example"
        },
        {
            "location": "/workflowoperationhandlers/concat-woh/#encoding-profile",
            "text": "The encoding profile command must contain the the #{concatCommand} parameter.  # Concat\nprofile.concat.name = concat\nprofile.concat.input = visual\nprofile.concat.output = visual\nprofile.concat.suffix = -concatenated.mp4\nprofile.concat.mimetype = video/mp4\nprofile.concat.ffmpeg.command = #{concatCommand} -acodec libfaac -b:a 128k -vcodec mpeg4 -b:v 1200k\n-flags +aic+mv4 #{out.dir}/#{out.name}#{out.suffix}",
            "title": "Encoding profile"
        },
        {
            "location": "/workflowoperationhandlers/copy-woh/",
            "text": "CopyWorkflowOperationHandler\n\n\nDescription\n\n\nThe CopyWorkflowOperationHandler can be used to copy media package elements to a given target directory.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource-flavors\n\n\npresenter/source\n\n\nComma-separated list of source-flavors\n\n\n\n\n\n\nsource-tags\n\n\narchive\n\n\nComma-separated list of source-tags\n\n\n\n\n\n\ntarget-directory*\n\n\n/mnt/mydisk\n\n\nThe directory where the file is copied to\n\n\n\n\n\n\ntarget-filename\n\n\ntest\n\n\nThe optional target filename. The file extension extract from the media package element URI will be appended\n\n\n\n\n\n\n\n\n* mandatory configuration key\n\n\nNotes:\n\n\n\n\nsource-flavors\n and \nsource-tags\n may be used both together to select media package elements based on both flavors and tags\n\n\nIn case that neither \nsource-flavors\n nor \nsource-tags\n are specified, the operation will be skipped\n\n\nIn case no media package elements match \nsource-flavors\n and \nsource-tags\n, the operation will be skipped\n\n\n\n\nTarget Filenames\n\n\nIf \ntarget-filename\n is not specified, the filename for each media package element is extracted from the media package element URI. If \ntarget-filename\n is specified, the filename is the result of appending the file extension (extracted from the media package element URI) to \ntarget-filename\n. \nIn case the \nsource-flavors\n and \nsource-tags\n match mutliple media package elements, a sequentially increasing integer number (starting at 1) can be used within \ntarget-filename\n in Java string formatting manner to ensure unique filenames.\n\n\nOperation Example\n\n\n<operation id=\"copy\"\n         description=\"Copy sources to my disk\"\n         fail-on-error=\"true\"\n         exception-handler-workflow=\"ng-partial-error\">\n<configurations>\n  <configuration key=\"source-flavors\">presenter/source, presentation/source</configuration>\n  <configuration key=\"target-directory\">/mnt/mydisk</configuration>\n</configurations>",
            "title": "Copy"
        },
        {
            "location": "/workflowoperationhandlers/copy-woh/#copyworkflowoperationhandler",
            "text": "",
            "title": "CopyWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/copy-woh/#description",
            "text": "The CopyWorkflowOperationHandler can be used to copy media package elements to a given target directory.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/copy-woh/#parameter-table",
            "text": "Configuration Key  Example  Description      source-flavors  presenter/source  Comma-separated list of source-flavors    source-tags  archive  Comma-separated list of source-tags    target-directory*  /mnt/mydisk  The directory where the file is copied to    target-filename  test  The optional target filename. The file extension extract from the media package element URI will be appended     * mandatory configuration key  Notes:   source-flavors  and  source-tags  may be used both together to select media package elements based on both flavors and tags  In case that neither  source-flavors  nor  source-tags  are specified, the operation will be skipped  In case no media package elements match  source-flavors  and  source-tags , the operation will be skipped",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/copy-woh/#target-filenames",
            "text": "If  target-filename  is not specified, the filename for each media package element is extracted from the media package element URI. If  target-filename  is specified, the filename is the result of appending the file extension (extracted from the media package element URI) to  target-filename . \nIn case the  source-flavors  and  source-tags  match mutliple media package elements, a sequentially increasing integer number (starting at 1) can be used within  target-filename  in Java string formatting manner to ensure unique filenames.",
            "title": "Target Filenames"
        },
        {
            "location": "/workflowoperationhandlers/copy-woh/#operation-example",
            "text": "<operation id=\"copy\"\n         description=\"Copy sources to my disk\"\n         fail-on-error=\"true\"\n         exception-handler-workflow=\"ng-partial-error\">\n<configurations>\n  <configuration key=\"source-flavors\">presenter/source, presentation/source</configuration>\n  <configuration key=\"target-directory\">/mnt/mydisk</configuration>\n</configurations>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/",
            "text": "CoverImageWorkflowOperationHandler\n\n\nDescription\n\n\nThe CoverImageWorkflowOperationHandler generates a cover image based on an XSLT transformation which results in an SVG\nimage that is rasterized as PNG as a last step.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nName\n\n\nType\n\n\nExample\n\n\nDefault Value\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nstylesheet *\n\n\nURL\n\n\nfile:///etc/opencast/branding/coverimage.xsl\n\n\n-\n\n\nFile URI to the XSL stylesheet used to generate the SVG image\n\n\n\n\n\n\nmetadata\n\n\nXML\n\n\nHello!\n\n\n-\n\n\nXML string which is passed to the XSL transformation. If parameter is not given, a default XML is handed to the transformation\n\n\n\n\n\n\nwidth *\n\n\nint\n\n\n1920\n\n\n-\n\n\nWidth of the resulting image\n\n\n\n\n\n\nheight *\n\n\nint\n\n\n1080\n\n\n-\n\n\nHeight of the resulting image\n\n\n\n\n\n\nposterimage-flavor\n\n\nFlavor\n\n\nimage/poster\n\n\n-\n\n\nFlavor of a poster image which may be used as a part of the cover image (e.g. as a background)\n\n\n\n\n\n\nposterimage\n\n\nURL\n\n\nhttp://flickr.com/posterimage.jpg\n\n\n-\n\n\nURL to a custom poster image instead of using one out of the media package\n\n\n\n\n\n\ntarget-flavor *\n\n\nFlavor\n\n\nimage/cover\n\n\n-\n\n\nFlavor of the resulting cover image\n\n\n\n\n\n\ntarget-tags\n\n\nString\n\n\narchive,download\n\n\n-\n\n\nComma separated list of tags to be applied to the resulting attachment.\n\n\n\n\n\n\n\n\nOperation Example\n\n\nOperation example with metadata derived from events metadata:\n\n\n<operation\n  id=\"cover-image\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Create a cover image\">\n  <configurations>\n    <configuration key=\"stylesheet\">file://${karaf.etc}/branding/coverimage.xsl</configuration>\n    <configuration key=\"width\">1920</configuration>\n    <configuration key=\"height\">1080</configuration>\n    <configuration key=\"posterimage-flavor\">presenter/coverbackground</configuration>\n    <configuration key=\"target-flavor\">presenter/player+preview</configuration>\n    <configuration key=\"target-tags\">archive, engage-download</configuration>\n </configurations>\n</operation>\n\n\n\nOperation example with metadata provided in the operations configuration:\n\n\n<operation\n  id=\"cover-image\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Create a cover image\">\n  <configurations>\n    <configuration key=\"stylesheet\">file://${karaf.etc}/branding/coverimage.xsl</configuration>\n    <configuration key=\"metadata\"><![CDATA[<meta><title>my custom title</title><special>very special</special></meta>]]></configuration>\n    <configuration key=\"width\">1920</configuration>\n    <configuration key=\"height\">1080</configuration>\n    <configuration key=\"posterimage-flavor\">presenter/player+preview</configuration>\n    <configuration key=\"target-flavor\">image/cover</configuration>\n </configurations>\n</operation>\n\n\n\nTemplate\n\n\nAs a starting point for your own template you best take a look at file etc/branding/coverimage.xsl. \n\n\nThe metadata XML, which is passed to the cover image service, looks like the following example:\n\n\n<?xml version=\"1.0\"?>\n<metadata>\n  <title>Puppy Love</title>\n  <date>24. April 2014</date>\n  <time>11:21:00</time>\n  <license>All rights reserved</license>\n  <description>Here is a description of the video</description>\n  <series>Superbowl Commercials</series>\n  <contributors>Budweiser</contributors>\n  <creators>Budweiser</creators>\n  <subjects>Commercial</subjects>\n</metadata>\n\n\n\nDate and Time\n\n\nThe date is localized based on your servers Java Runtime language settings.",
            "title": "Cover Image"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/#coverimageworkflowoperationhandler",
            "text": "",
            "title": "CoverImageWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/#description",
            "text": "The CoverImageWorkflowOperationHandler generates a cover image based on an XSLT transformation which results in an SVG\nimage that is rasterized as PNG as a last step.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/#parameter-table",
            "text": "Name  Type  Example  Default Value  Description      stylesheet *  URL  file:///etc/opencast/branding/coverimage.xsl  -  File URI to the XSL stylesheet used to generate the SVG image    metadata  XML  Hello!  -  XML string which is passed to the XSL transformation. If parameter is not given, a default XML is handed to the transformation    width *  int  1920  -  Width of the resulting image    height *  int  1080  -  Height of the resulting image    posterimage-flavor  Flavor  image/poster  -  Flavor of a poster image which may be used as a part of the cover image (e.g. as a background)    posterimage  URL  http://flickr.com/posterimage.jpg  -  URL to a custom poster image instead of using one out of the media package    target-flavor *  Flavor  image/cover  -  Flavor of the resulting cover image    target-tags  String  archive,download  -  Comma separated list of tags to be applied to the resulting attachment.",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/#operation-example",
            "text": "Operation example with metadata derived from events metadata:  <operation\n  id=\"cover-image\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Create a cover image\">\n  <configurations>\n    <configuration key=\"stylesheet\">file://${karaf.etc}/branding/coverimage.xsl</configuration>\n    <configuration key=\"width\">1920</configuration>\n    <configuration key=\"height\">1080</configuration>\n    <configuration key=\"posterimage-flavor\">presenter/coverbackground</configuration>\n    <configuration key=\"target-flavor\">presenter/player+preview</configuration>\n    <configuration key=\"target-tags\">archive, engage-download</configuration>\n </configurations>\n</operation>  Operation example with metadata provided in the operations configuration:  <operation\n  id=\"cover-image\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Create a cover image\">\n  <configurations>\n    <configuration key=\"stylesheet\">file://${karaf.etc}/branding/coverimage.xsl</configuration>\n    <configuration key=\"metadata\"><![CDATA[<meta><title>my custom title</title><special>very special</special></meta>]]></configuration>\n    <configuration key=\"width\">1920</configuration>\n    <configuration key=\"height\">1080</configuration>\n    <configuration key=\"posterimage-flavor\">presenter/player+preview</configuration>\n    <configuration key=\"target-flavor\">image/cover</configuration>\n </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/#template",
            "text": "As a starting point for your own template you best take a look at file etc/branding/coverimage.xsl.   The metadata XML, which is passed to the cover image service, looks like the following example:  <?xml version=\"1.0\"?>\n<metadata>\n  <title>Puppy Love</title>\n  <date>24. April 2014</date>\n  <time>11:21:00</time>\n  <license>All rights reserved</license>\n  <description>Here is a description of the video</description>\n  <series>Superbowl Commercials</series>\n  <contributors>Budweiser</contributors>\n  <creators>Budweiser</creators>\n  <subjects>Commercial</subjects>\n</metadata>",
            "title": "Template"
        },
        {
            "location": "/workflowoperationhandlers/coverimage-woh/#date-and-time",
            "text": "The date is localized based on your servers Java Runtime language settings.",
            "title": "Date and Time"
        },
        {
            "location": "/workflowoperationhandlers/defaults-woh/",
            "text": "DefaultsWorkflowOperation\n\n\nDescription\n\n\nThe DefaultsWorkflowOperationHandler is used to define default workflow configuration values that are in effect in cases where a workflow instance is started without the user interface being invoked, with the result that no configuration of the workflow instance has taken place. The defaults specified by this handler will be applied for configuration keys that have not been specified but won't overwrite existing values.\n\n\nParameter Table\n\n\nTags and flavors can be used in combination.\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nkey\n\n\nhello world\n\n\nThis would set the workflow configuration \"key\" to the value \"hello world\" if - and only if - the key is undefined.\n\n\n-\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"defaults\"\n  description=\"Applying default values\">\n  <configurations>\n    <configuration key=\"key\">hello world</configuration>\n  </configurations>\n</operation>",
            "title": "Defaults"
        },
        {
            "location": "/workflowoperationhandlers/defaults-woh/#defaultsworkflowoperation",
            "text": "",
            "title": "DefaultsWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/defaults-woh/#description",
            "text": "The DefaultsWorkflowOperationHandler is used to define default workflow configuration values that are in effect in cases where a workflow instance is started without the user interface being invoked, with the result that no configuration of the workflow instance has taken place. The defaults specified by this handler will be applied for configuration keys that have not been specified but won't overwrite existing values.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/defaults-woh/#parameter-table",
            "text": "Tags and flavors can be used in combination.     configuration keys  example  description  default value      key  hello world  This would set the workflow configuration \"key\" to the value \"hello world\" if - and only if - the key is undefined.  -",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/defaults-woh/#operation-example",
            "text": "<operation\n  id=\"defaults\"\n  description=\"Applying default values\">\n  <configurations>\n    <configuration key=\"key\">hello world</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/editor-woh/",
            "text": "VideoEditorWorkflowOperationHandler\n\n\nDescription\n\n\nThe editor operation processes the edited files. This operation needs the videoeditor API and impl (or remote on\ndistributed systems) to be installed.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavors\n\n\n*/work\n\n\nthe subtype of all media files to use\n\n\n\n\n\n\nsmil-flavors\n\n\n*/smil\n\n\nthe smil file(s) to be used\n\n\n\n\n\n\nskipped-flavors\n\n\n*/work\n\n\nthe subtype of all media files to be used if the editor skipped\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"editor\"\n  if=\"${trimHold}\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Waiting for user to review / video edit recording\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/work</configuration>\n    <configuration key=\"skipped-flavors\">*/work</configuration>\n    <configuration key=\"smil-flavors\">*/smil</configuration>\n    <configuration key=\"target-smil-flavor\">episode/smil</configuration>\n    <configuration key=\"target-flavor-subtype\">trimmed</configuration>\n  </configurations>\n</operation>",
            "title": "Editor"
        },
        {
            "location": "/workflowoperationhandlers/editor-woh/#videoeditorworkflowoperationhandler",
            "text": "",
            "title": "VideoEditorWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/editor-woh/#description",
            "text": "The editor operation processes the edited files. This operation needs the videoeditor API and impl (or remote on\ndistributed systems) to be installed.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/editor-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavors  */work  the subtype of all media files to use    smil-flavors  */smil  the smil file(s) to be used    skipped-flavors  */work  the subtype of all media files to be used if the editor skipped",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/editor-woh/#operation-example",
            "text": "<operation\n  id=\"editor\"\n  if=\"${trimHold}\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Waiting for user to review / video edit recording\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/work</configuration>\n    <configuration key=\"skipped-flavors\">*/work</configuration>\n    <configuration key=\"smil-flavors\">*/smil</configuration>\n    <configuration key=\"target-smil-flavor\">episode/smil</configuration>\n    <configuration key=\"target-flavor-subtype\">trimmed</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/email-woh/",
            "text": "EmailWorkflowOperation\n\n\nDescription\n\n\nThe EmailWorkflowOperationHandler queries the SMTP Service to send an email with the provided parameters. It is useful to send email notifications that some operation(s) have been completed or that some error(s) occurred in a workflow.\nThe mail body consists of a single line of the form: \n (\n).\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nto\n\n\n\"my-email-account@my-email-domain.org\"\n\n\nIt specifies the field \"to\" of the email, i.e. the email account the email will be sent to.\n\n\nEMPTY\n\n\n\n\n\n\nsubject\n\n\nOperation has been completed\n\n\nSpecifies the mail subject\n\n\nEMPTY\n\n\n\n\n\n\n\n\nSome other email parameters can be customized in the SMTP Service configuration\n\n\nOperation Example\n\n\n<operation\n    id=\"send-email\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Sends email\">\n    <configurations>\n        <configuration key=\"to\">root@localhost</configuration>\n        <configuration key=\"subject\">Failure processing a mediapackage</configuration>\n    </configurations>\n</operation>",
            "title": "Email"
        },
        {
            "location": "/workflowoperationhandlers/email-woh/#emailworkflowoperation",
            "text": "",
            "title": "EmailWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/email-woh/#description",
            "text": "The EmailWorkflowOperationHandler queries the SMTP Service to send an email with the provided parameters. It is useful to send email notifications that some operation(s) have been completed or that some error(s) occurred in a workflow.\nThe mail body consists of a single line of the form:   ( ).",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/email-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      to  \"my-email-account@my-email-domain.org\"  It specifies the field \"to\" of the email, i.e. the email account the email will be sent to.  EMPTY    subject  Operation has been completed  Specifies the mail subject  EMPTY     Some other email parameters can be customized in the SMTP Service configuration",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/email-woh/#operation-example",
            "text": "<operation\n    id=\"send-email\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Sends email\">\n    <configurations>\n        <configuration key=\"to\">root@localhost</configuration>\n        <configuration key=\"subject\">Failure processing a mediapackage</configuration>\n    </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/encode-woh/",
            "text": "Encode Workflow Operation Handler\n\n\n\n\nParallel FFmpeg encoding\n\n\n\n\nDescription\n\n\nThe encode workflow operation can be used to encode media files to different formats using \nFFmpeg\n.\n\n\nIts functionality is similar to the \ncompose workflow operation\n but can utilize the parallel encoding\ncapabilities of FFmpeg. This has the advantage that the source file needs to be read only once for several encodings,\nreducing the encoding time quite a lot. Additionally, this will let FFmpeg make better use of multiple CPU cores.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresenter/work\n\n\nWhich media should be encoded\n\n\n\n\n\n\ntarget-flavor\n\n\npresenter/delivery\n\n\nSpecifies the flavor of the new media\n\n\n\n\n\n\nsource-tags\n\n\nsometag\n\n\nTags of media to encode\n\n\n\n\n\n\ntarget-tags\n\n\nsometag\n\n\nSpecifies the tags of the new media\n\n\n\n\n\n\nencoding-profile\n\n\nwebm-hd\n\n\nSpecifies the encoding profile to use\n\n\n\n\n\n\n\n\nAs explained in the \"Encoding Profile\" section, every media file created by an encode operation has its own named\nsuffix. The suffix name is defined in the encode profile definition. It will be added as a tag to the corresponding\ntrack in the media package. This is different from the \ntarget-tags\n workflow operation parameter, which will cause the\nspecified tag list to be added to every media file created by the operation.\n\n\nFor instance, let us take the example operation and encoding profile defined in this documentation. After a successful\nrun of the operation, the media package will contain four new tracks: the first one containing the new tags\n\nengage-download\n, \nengage-streaming\n and \nlow-quality\n; the second one containing the new tags \nengage-download\n,\n\nengage-streaming\n and \nmedium-quality\n; etc.\n\n\nOperation Example\n\n\n<operation\n  id=\"encode\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"encoding media files\">\n    <configurations>\n    <configuration key=\"source-flavor\">*/trimmed</configuration>\n    <configuration key=\"target-flavor\">*/delivery</configuration>\n    <configuration key=\"target-tags\">engage-download,engage-streaming</configuration>\n    <configuration key=\"encoding-profile\">parallel.http</configuration>\n  </configurations>\n</operation>\n\n\n\nEncoding Profile Example\n\n\nUnlike a regular compose operation, this operation can generate more than one output file and, therefore, more than one\nmedia package track elements. In order to distinguish these tracks, the encoding profile syntax for this operation\nallows different named suffix parameters in the form of \n<profile_name>.suffix.<suffix_name> = <suffix_value>\n.\n\n\nBecause file names are irrelevant for the workflow operations, each suffix name is added as a tag to the corresponding\nmedia package element. For instance, if a media file with a filename of \nmyfile.ext\n is processed with the encoding\nprofile in the example below, the first output file will be \nmyfile-low.mp4\n and the resulting media package element\nwill contain a tag with the value \nlow-quality\n; the second output file will be \nmyfile-medium.mp4\n and the resulting\nmedia package element will contain a tag with the value \nmedium-quality\n; and so on.\n\n\n# Distribution format definition for low quality presenter download\nprofile.parallel.http.name = parallel video encoding\nprofile.parallel.http.input = visual\nprofile.parallel.http.output = visual\nprofile.parallel.http.suffix.low-quality = -low.mp4\nprofile.parallel.http.suffix.medium-quality = -medium.mp4\nprofile.parallel.http.suffix.high-quality = -high.mp4\nprofile.parallel.http.suffix.hd-quality = -hd.mp4\nprofile.parallel.http.ffmpeg.command = -i #{in.video.path} \\\n  -c:v libx264 -filter:v yadif,scale=-2:288 -preset slower -crf 28 -r 25 -profile:v baseline -tune film -movflags faststart \\\n  -c:a aac -ar 22050 -ac 1 -ab 32k #{out.dir}/#{out.name}#{out.suffix.low-quality} \\\n  -c:v libx264 -filter:v yadif,scale=-2:360 -preset slower -crf 25 -r 25 -profile:v baseline -tune film -movflags faststart \\\n  -c:a aac -ar 22050 -ac 1 -ab 48k #{out.dir}/#{out.name}#{out.suffix.medium-quality} \\\n  -c:v libx264 -filter:v yadif,scale=-2:576 -preset medium -crf 23 -r 25 -pix_fmt yuv420p -tune film  -movflags faststart \\\n  -c:a aac -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.high-quality} \\\n  -c:v libx264 -filter:v yadif,scale=-2:720 -preset medium -crf 23 -r 25 -pix_fmt yuv420p -tune film  -movflags faststart \\\n  -c:a aac -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.hd-quality}",
            "title": "Encode"
        },
        {
            "location": "/workflowoperationhandlers/encode-woh/#encode-workflow-operation-handler",
            "text": "Parallel FFmpeg encoding",
            "title": "Encode Workflow Operation Handler"
        },
        {
            "location": "/workflowoperationhandlers/encode-woh/#description",
            "text": "The encode workflow operation can be used to encode media files to different formats using  FFmpeg .  Its functionality is similar to the  compose workflow operation  but can utilize the parallel encoding\ncapabilities of FFmpeg. This has the advantage that the source file needs to be read only once for several encodings,\nreducing the encoding time quite a lot. Additionally, this will let FFmpeg make better use of multiple CPU cores.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/encode-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presenter/work  Which media should be encoded    target-flavor  presenter/delivery  Specifies the flavor of the new media    source-tags  sometag  Tags of media to encode    target-tags  sometag  Specifies the tags of the new media    encoding-profile  webm-hd  Specifies the encoding profile to use     As explained in the \"Encoding Profile\" section, every media file created by an encode operation has its own named\nsuffix. The suffix name is defined in the encode profile definition. It will be added as a tag to the corresponding\ntrack in the media package. This is different from the  target-tags  workflow operation parameter, which will cause the\nspecified tag list to be added to every media file created by the operation.  For instance, let us take the example operation and encoding profile defined in this documentation. After a successful\nrun of the operation, the media package will contain four new tracks: the first one containing the new tags engage-download ,  engage-streaming  and  low-quality ; the second one containing the new tags  engage-download , engage-streaming  and  medium-quality ; etc.",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/encode-woh/#operation-example",
            "text": "<operation\n  id=\"encode\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"encoding media files\">\n    <configurations>\n    <configuration key=\"source-flavor\">*/trimmed</configuration>\n    <configuration key=\"target-flavor\">*/delivery</configuration>\n    <configuration key=\"target-tags\">engage-download,engage-streaming</configuration>\n    <configuration key=\"encoding-profile\">parallel.http</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/encode-woh/#encoding-profile-example",
            "text": "Unlike a regular compose operation, this operation can generate more than one output file and, therefore, more than one\nmedia package track elements. In order to distinguish these tracks, the encoding profile syntax for this operation\nallows different named suffix parameters in the form of  <profile_name>.suffix.<suffix_name> = <suffix_value> .  Because file names are irrelevant for the workflow operations, each suffix name is added as a tag to the corresponding\nmedia package element. For instance, if a media file with a filename of  myfile.ext  is processed with the encoding\nprofile in the example below, the first output file will be  myfile-low.mp4  and the resulting media package element\nwill contain a tag with the value  low-quality ; the second output file will be  myfile-medium.mp4  and the resulting\nmedia package element will contain a tag with the value  medium-quality ; and so on.  # Distribution format definition for low quality presenter download\nprofile.parallel.http.name = parallel video encoding\nprofile.parallel.http.input = visual\nprofile.parallel.http.output = visual\nprofile.parallel.http.suffix.low-quality = -low.mp4\nprofile.parallel.http.suffix.medium-quality = -medium.mp4\nprofile.parallel.http.suffix.high-quality = -high.mp4\nprofile.parallel.http.suffix.hd-quality = -hd.mp4\nprofile.parallel.http.ffmpeg.command = -i #{in.video.path} \\\n  -c:v libx264 -filter:v yadif,scale=-2:288 -preset slower -crf 28 -r 25 -profile:v baseline -tune film -movflags faststart \\\n  -c:a aac -ar 22050 -ac 1 -ab 32k #{out.dir}/#{out.name}#{out.suffix.low-quality} \\\n  -c:v libx264 -filter:v yadif,scale=-2:360 -preset slower -crf 25 -r 25 -profile:v baseline -tune film -movflags faststart \\\n  -c:a aac -ar 22050 -ac 1 -ab 48k #{out.dir}/#{out.name}#{out.suffix.medium-quality} \\\n  -c:v libx264 -filter:v yadif,scale=-2:576 -preset medium -crf 23 -r 25 -pix_fmt yuv420p -tune film  -movflags faststart \\\n  -c:a aac -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.high-quality} \\\n  -c:v libx264 -filter:v yadif,scale=-2:720 -preset medium -crf 23 -r 25 -pix_fmt yuv420p -tune film  -movflags faststart \\\n  -c:a aac -ar 44100 -ab 96k #{out.dir}/#{out.name}#{out.suffix.hd-quality}",
            "title": "Encoding Profile Example"
        },
        {
            "location": "/workflowoperationhandlers/export-wf-properties-woh/",
            "text": "ExportWfPropertiesWorkflowOperationHandler\n\n\nDescription\n\n\nThe ExportWfPropertiesWorkflowOperation can be used to export workflow properties to a Java properties file. Those\nproperties can later be imported using the \nImportWfPropertiesWorkflowOperation\n.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntarget-flavor*\n\n\nprocessing/defaults\n\n\nThe flavor to apply to the exported workflow properties\n\n\n\n\n\n\ntarget-tags\n\n\narchive\n\n\nThe tags to apply to the exported workflow properties\n\n\n\n\n\n\nkeys\n\n\nvariableName1, variableName2\n\n\nThe workflow property keys that need to be persisted. If the option is not specified, all defined properties should be persisted.\n\n\n\n\n\n\n\n\n* mandatory configuration key\n\n\nOperation Example\n\n\n<operation\n  id=\"export-wf-properties\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Export workflow settings to Java properties file\">\n  <configurations>\n    <configuration key=\"target-flavor\">processing/defaults</configuration>\n    <configuration key=\"target-tags\">archive</configuration>\n  </configurations>\n</operation>",
            "title": "Export Workflow Properties"
        },
        {
            "location": "/workflowoperationhandlers/export-wf-properties-woh/#exportwfpropertiesworkflowoperationhandler",
            "text": "",
            "title": "ExportWfPropertiesWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/export-wf-properties-woh/#description",
            "text": "The ExportWfPropertiesWorkflowOperation can be used to export workflow properties to a Java properties file. Those\nproperties can later be imported using the  ImportWfPropertiesWorkflowOperation .",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/export-wf-properties-woh/#parameter-table",
            "text": "Configuration Key  Example  Description      target-flavor*  processing/defaults  The flavor to apply to the exported workflow properties    target-tags  archive  The tags to apply to the exported workflow properties    keys  variableName1, variableName2  The workflow property keys that need to be persisted. If the option is not specified, all defined properties should be persisted.     * mandatory configuration key",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/export-wf-properties-woh/#operation-example",
            "text": "<operation\n  id=\"export-wf-properties\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Export workflow settings to Java properties file\">\n  <configurations>\n    <configuration key=\"target-flavor\">processing/defaults</configuration>\n    <configuration key=\"target-tags\">archive</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/extracttext-woh/",
            "text": "ExtractTextWorkflowOperation\n\n\nDescription\n\n\nThe ExtractTextWorkflowOperation will try to extract test from a video using Tesseract OCR.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresentation/work\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\nsource-tags\n\n\ntext\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\ntarget-tags\n\n\nengage\n\n\nSpecifies the tags for the produces media.\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n      id=\"extract-text\"\n      fail-on-error=\"false\"\n      exception-handler-workflow=\"error\"\n      description=\"Extracting text from presentation segments\">\n      <configurations>\n            <configuration key=\"source-flavor\">presentation/trimmed</configuration>\n            <configuration key=\"source-tags\"></configuration>\n            <configuration key=\"target-tags\">engage,archive</configuration>\n      </configurations>\n</operation>",
            "title": "Extract Text"
        },
        {
            "location": "/workflowoperationhandlers/extracttext-woh/#extracttextworkflowoperation",
            "text": "",
            "title": "ExtractTextWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/extracttext-woh/#description",
            "text": "The ExtractTextWorkflowOperation will try to extract test from a video using Tesseract OCR.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/extracttext-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presentation/work  Specifies which media should be processed.    source-tags  text  Specifies which media should be processed.    target-tags  engage  Specifies the tags for the produces media.",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/extracttext-woh/#operation-example",
            "text": "<operation\n      id=\"extract-text\"\n      fail-on-error=\"false\"\n      exception-handler-workflow=\"error\"\n      description=\"Extracting text from presentation segments\">\n      <configurations>\n            <configuration key=\"source-flavor\">presentation/trimmed</configuration>\n            <configuration key=\"source-tags\"></configuration>\n            <configuration key=\"target-tags\">engage,archive</configuration>\n      </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/httpnotify-woh/",
            "text": "HttpNotificationWorkflowOperation\n\n\nDescription\n\n\nOpencast can through this operation notify any HTTP endpoint about the process of the workflow.\n\n\nParameter Table\n\n\nA parameter that is always posted is the workflow instance identifier in the parameter named \nworkflowInstanceId\n containing the current workflow\u2019s identifier.\n\n\n\n\n\n\n\n\nKey\n\n\nRequired\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nurl\n\n\ntrue\n\n\nThe target url to notify\n\n\nhttp://test.ch\n\n\n\n\n\n\nsubject\n\n\nfalse\n\n\nThe name of the event to notify from. The following events are planned: importing_started, imported, prepared, processing_started, published\n\n\nimporting_started\n\n\n\n\n\n\nmessage\n\n\nfalse\n\n\nData supporting the notification. Think of this as the body of an e-mail\n\n\ninternal::25\n\n\n\n\n\n\nmethod\n\n\nfalse\n\n\nSupported methods are \"put\", \"post\". If no method is specified, \"post\" is used by default\n\n\npost\n\n\n\n\n\n\nmax-retry\n\n\nfalse\n\n\nThe maximal number of notification attempts. The default value is 5\n\n\n5\n\n\n\n\n\n\ntimeout\n\n\nfalse\n\n\nThe timeout in seconds for the notification request: The default value is 10\n\n\n10\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"http-notify\"\n  fail-on-error=\"false\"\n  exception-handler-workflow=\"error\"\n  description=\"Notify test\">\n  <configurations>\n    <configuration key=\"url\">http://www.test.ch</configuration>\n    <configuration key=\"subject\">importing-started</configuration>\n    <configuration key=\u201cmessage\u201d>internal::25</configuration>\n    <configuration key=\u201cmethod\u201d>put</configuration>\n    <configuration key=\"max-retry\">3</configuration>\n    <configuration key=\"timeout\">5</configuration>\n  </configurations>\n</operation>",
            "title": "HTTP Notify"
        },
        {
            "location": "/workflowoperationhandlers/httpnotify-woh/#httpnotificationworkflowoperation",
            "text": "",
            "title": "HttpNotificationWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/httpnotify-woh/#description",
            "text": "Opencast can through this operation notify any HTTP endpoint about the process of the workflow.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/httpnotify-woh/#parameter-table",
            "text": "A parameter that is always posted is the workflow instance identifier in the parameter named  workflowInstanceId  containing the current workflow\u2019s identifier.     Key  Required  Description  Example      url  true  The target url to notify  http://test.ch    subject  false  The name of the event to notify from. The following events are planned: importing_started, imported, prepared, processing_started, published  importing_started    message  false  Data supporting the notification. Think of this as the body of an e-mail  internal::25    method  false  Supported methods are \"put\", \"post\". If no method is specified, \"post\" is used by default  post    max-retry  false  The maximal number of notification attempts. The default value is 5  5    timeout  false  The timeout in seconds for the notification request: The default value is 10  10",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/httpnotify-woh/#operation-example",
            "text": "<operation\n  id=\"http-notify\"\n  fail-on-error=\"false\"\n  exception-handler-workflow=\"error\"\n  description=\"Notify test\">\n  <configurations>\n    <configuration key=\"url\">http://www.test.ch</configuration>\n    <configuration key=\"subject\">importing-started</configuration>\n    <configuration key=\u201cmessage\u201d>internal::25</configuration>\n    <configuration key=\u201cmethod\u201d>put</configuration>\n    <configuration key=\"max-retry\">3</configuration>\n    <configuration key=\"timeout\">5</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/",
            "text": "ImageWorkflowOperation\n\n\nDescription\n\n\nThe ImageWorkflowOperation will extract still images from a video using FFmpeg and a list of given encoding profiles.\nBoth absolute and relative positions can be used.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresenter/source\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\nsource-flavors\n\n\npresenter/source, presentation/source\n\n\nSpecifies a list of media which should be processed. In case a flavor has been specified in \nsource-flavor\n, it will be added to this list.\n\n\n\n\n\n\nsource-tags\n\n\nengage\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\ntarget-flavor\n\n\npresenter/work\n\n\nSpecifies the flavor the new files will get.\n\n\n\n\n\n\ntarget-tags\n\n\nengage\n\n\nSpecifies the tags the new files will get.\n\n\n\n\n\n\nencoding-profile\n\n\nsearch-cover.http\n\n\nComma-separated list of encoding profiles to use.\n\n\n\n\n\n\ntime\n\n\n1\n\n\nComma-separated list of time (in seconds or relative to source track duration) where the image should be taken.\n\n\n\n\n\n\ntarget-base-name-format-second\n\n\nthumbnail_%.0f%s\n\n\nUsed to control the target filenames for images extracted at absolute times. Mainly helpful when integrating third-party applications that prefer to use filename to distinguish individual images\n\n\n\n\n\n\ntarget-base-name-format-percent\n\n\nthumbnail_%.3f%s\n\n\nUsed to control the target filenames for images extracted at relative times. Mainly helpful when integrating third-party applications that prefer to use filename to distinguish individual images\n\n\n\n\n\n\nend-margin\n\n\n500\n\n\nSafety margin at the end of the track. Sometimes, image extraction is critical at the end of the file. Using \nend-margin\n ensures, that no images are being extracted near the end of the video file to avoid problems with defective inputs.\n(Default: 100)\n\n\n\n\n\n\n\n\nNotes:\n\n\n\n\nAbsolute and relative position may be mixed up in the configuration key \ntime\n\n\n\n\nOperation Example\n\n\nBasic\n\n\nExtract one image at position 1 second using the encoding profile \nsearch-cover.http\n.\n\n\n<operation\n      id=\"image\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encoding presenter (camera) to search result preview image\">\n      <configurations>\n            <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n            <configuration key=\"source-tags\"></configuration>\n            <configuration key=\"target-flavor\">presenter/search+preview</configuration>\n            <configuration key=\"target-tags\">engage</configuration>\n            <configuration key=\"encoding-profile\">search-cover.http</configuration>\n            <configuration key=\"time\">1</configuration>\n      </configurations>\n</operation>\n\n\n\nAdvanced\n\n\nIn this example, we extract images at three relative positions (\n1%, 50%, 100%\n) from the presenter/trimmed track. For each position, we extract three images using three different encoding profiles (\nexample.encoding.profile.*\n). \nThis operation therefore generates nine images in total. The target filenames will be formed based on the \ntarget-base-name-format-*\n configuration keys (prefix) and the configuration of the encoding profiles (file extension and possibly suffix).\n\n\n<operation id=\"image\"\n           description=\"Extract set of thumbnails\"\n           fail-on-error=\"true\"\n           exception-handler-workflow=\"ng-partial-error\">\n  <configurations>\n    <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n    <configuration key=\"target-flavor\">presenter/thumbnails</configuration>\n    <configuration key=\"target-base-name-format-second\">thumbnail_%.3f%s</configuration>\n    <configuration key=\"target-base-name-format-percent\">thumbnail_%.0f%s</configuration>\n    <configuration key=\"encoding-profile\"> example.encoding.profile.small, example.encoding.profile.medium, example.encoding.profile.large</configuration>\n    <configuration key=\"time\">1%, 50%, 100%</configuration>\n    <configuration key=\"end-margin\">1000</configuration>\n  </configurations>\n</operation>",
            "title": "Image"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/#imageworkflowoperation",
            "text": "",
            "title": "ImageWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/#description",
            "text": "The ImageWorkflowOperation will extract still images from a video using FFmpeg and a list of given encoding profiles.\nBoth absolute and relative positions can be used.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presenter/source  Specifies which media should be processed.    source-flavors  presenter/source, presentation/source  Specifies a list of media which should be processed. In case a flavor has been specified in  source-flavor , it will be added to this list.    source-tags  engage  Specifies which media should be processed.    target-flavor  presenter/work  Specifies the flavor the new files will get.    target-tags  engage  Specifies the tags the new files will get.    encoding-profile  search-cover.http  Comma-separated list of encoding profiles to use.    time  1  Comma-separated list of time (in seconds or relative to source track duration) where the image should be taken.    target-base-name-format-second  thumbnail_%.0f%s  Used to control the target filenames for images extracted at absolute times. Mainly helpful when integrating third-party applications that prefer to use filename to distinguish individual images    target-base-name-format-percent  thumbnail_%.3f%s  Used to control the target filenames for images extracted at relative times. Mainly helpful when integrating third-party applications that prefer to use filename to distinguish individual images    end-margin  500  Safety margin at the end of the track. Sometimes, image extraction is critical at the end of the file. Using  end-margin  ensures, that no images are being extracted near the end of the video file to avoid problems with defective inputs. (Default: 100)     Notes:   Absolute and relative position may be mixed up in the configuration key  time",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/#operation-example",
            "text": "",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/#basic",
            "text": "Extract one image at position 1 second using the encoding profile  search-cover.http .  <operation\n      id=\"image\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Encoding presenter (camera) to search result preview image\">\n      <configurations>\n            <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n            <configuration key=\"source-tags\"></configuration>\n            <configuration key=\"target-flavor\">presenter/search+preview</configuration>\n            <configuration key=\"target-tags\">engage</configuration>\n            <configuration key=\"encoding-profile\">search-cover.http</configuration>\n            <configuration key=\"time\">1</configuration>\n      </configurations>\n</operation>",
            "title": "Basic"
        },
        {
            "location": "/workflowoperationhandlers/image-woh/#advanced",
            "text": "In this example, we extract images at three relative positions ( 1%, 50%, 100% ) from the presenter/trimmed track. For each position, we extract three images using three different encoding profiles ( example.encoding.profile.* ). \nThis operation therefore generates nine images in total. The target filenames will be formed based on the  target-base-name-format-*  configuration keys (prefix) and the configuration of the encoding profiles (file extension and possibly suffix).  <operation id=\"image\"\n           description=\"Extract set of thumbnails\"\n           fail-on-error=\"true\"\n           exception-handler-workflow=\"ng-partial-error\">\n  <configurations>\n    <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n    <configuration key=\"target-flavor\">presenter/thumbnails</configuration>\n    <configuration key=\"target-base-name-format-second\">thumbnail_%.3f%s</configuration>\n    <configuration key=\"target-base-name-format-percent\">thumbnail_%.0f%s</configuration>\n    <configuration key=\"encoding-profile\"> example.encoding.profile.small, example.encoding.profile.medium, example.encoding.profile.large</configuration>\n    <configuration key=\"time\">1%, 50%, 100%</configuration>\n    <configuration key=\"end-margin\">1000</configuration>\n  </configurations>\n</operation>",
            "title": "Advanced"
        },
        {
            "location": "/workflowoperationhandlers/imagetovideo-woh/",
            "text": "ImageToVideo Workflow Operation Handler\n\n\nDescription\n\n\nThe ImageToVideo Workflow Operation Handler allows to create a video track from a source image.\n\n\nParameters table\n\n\nTags and flavors can be used in combination. But combined they should match one image.\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-tag\n*\n\n\nintro/source\n\n\nThe \"tag\" of the image to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavor\n*\n\n\nintro\n\n\nThe \"flavor\" of the image to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\ntarget-tags\n\n\ncomposite,rss,atom,archive\n\n\nThe tags to apply to the output video track\n\n\nEMPTY\n\n\n\n\n\n\ntarget-flavor\n\n\nintro/work\n\n\nThe flavor to apply to the output video track\n\n\nEMPTY\n\n\n\n\n\n\nduration\n*\n\n\n5\n\n\nThe length of the output video in seconds.\n\n\nEMPTY\n\n\n\n\n\n\nprofile\n*\n\n\nimage-movie\n\n\nDefine the encoding-profile to use to create the output video. See example of profile below.\n\n\nEMPTY\n\n\n\n\n\n\n\n\n* \nmandatory\n\n\nOperation example\n\n\n<operation\n  id=\"image-to-video\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Composite\">\n  <configurations>\n    <configuration key=\"source-tag\">presentation/trimmed</configuration>\n    <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n    <configuration key=\"target-tags\">comp</configuration>\n    <configuration key=\"target-flavor\">intro/work</configuration>\n    <configuration key=\"duration\">10</configuration>\n<configuration key=\"profile\">image-movie</configuration>\n  </configurations>\n</operation>\n\n\n\nEncoding profile example\n\n\n# Image to video\nprofile.image-movie.name = image to video\nprofile.image-movie.input = image\nprofile.image-movie.output = visual\nprofile.image-movie.suffix = -image-video.mp4\nprofile.image-movie.mimetype = video/mp4\nprofile.image-movie.ffmpeg.command = -loop 1 -i #{in.video.path} -c:v libx264 -r 25 -t #{time} -pix_fmt yuv420p #{out.dir}/#{out.name}#{out.suffix}",
            "title": "Image to Video"
        },
        {
            "location": "/workflowoperationhandlers/imagetovideo-woh/#imagetovideo-workflow-operation-handler",
            "text": "",
            "title": "ImageToVideo Workflow Operation Handler"
        },
        {
            "location": "/workflowoperationhandlers/imagetovideo-woh/#description",
            "text": "The ImageToVideo Workflow Operation Handler allows to create a video track from a source image.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/imagetovideo-woh/#parameters-table",
            "text": "Tags and flavors can be used in combination. But combined they should match one image.     configuration keys  example  description  default value      source-tag *  intro/source  The \"tag\" of the image to use as a source input  EMPTY    source-flavor *  intro  The \"flavor\" of the image to use as a source input  EMPTY    target-tags  composite,rss,atom,archive  The tags to apply to the output video track  EMPTY    target-flavor  intro/work  The flavor to apply to the output video track  EMPTY    duration *  5  The length of the output video in seconds.  EMPTY    profile *  image-movie  Define the encoding-profile to use to create the output video. See example of profile below.  EMPTY     *  mandatory",
            "title": "Parameters table"
        },
        {
            "location": "/workflowoperationhandlers/imagetovideo-woh/#operation-example",
            "text": "<operation\n  id=\"image-to-video\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Composite\">\n  <configurations>\n    <configuration key=\"source-tag\">presentation/trimmed</configuration>\n    <configuration key=\"source-flavor\">presenter/trimmed</configuration>\n    <configuration key=\"target-tags\">comp</configuration>\n    <configuration key=\"target-flavor\">intro/work</configuration>\n    <configuration key=\"duration\">10</configuration>\n<configuration key=\"profile\">image-movie</configuration>\n  </configurations>\n</operation>",
            "title": "Operation example"
        },
        {
            "location": "/workflowoperationhandlers/imagetovideo-woh/#encoding-profile-example",
            "text": "# Image to video\nprofile.image-movie.name = image to video\nprofile.image-movie.input = image\nprofile.image-movie.output = visual\nprofile.image-movie.suffix = -image-video.mp4\nprofile.image-movie.mimetype = video/mp4\nprofile.image-movie.ffmpeg.command = -loop 1 -i #{in.video.path} -c:v libx264 -r 25 -t #{time} -pix_fmt yuv420p #{out.dir}/#{out.name}#{out.suffix}",
            "title": "Encoding profile example"
        },
        {
            "location": "/workflowoperationhandlers/import-wf-properties-woh/",
            "text": "ImportWfPropertiesWorkflowOperationHandler\n\n\nDescription\n\n\nThe ImportWfPropertiesWorkflowOperationHandler loads workflow properties from a Java properties file and sets\nthe corresponding workflow instance variables so that the properties can be use to control workflow execution.\n\n\nIn case that no properties are found in \nsource-flavor\n, the workflow operation will just skip.\n\n\nNote that the \nExportWfPropertiesWorkflowOperationHandler\n can be used to export workflow properties to a Java properties file.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor*\n\n\nprocessing/defaults\n\n\nFlavor of the attachment that contains the serialized workflow instance properties\n\n\n\n\n\n\nkeys\n\n\nvariableName1, variableName2\n\n\nThe workflow property keys to retrieve (comma separated list). If the option has not been specified, all keys will be retrieved\n\n\n\n\n\n\n\n\n* mandatory configuration key\n\n\nOperation Example\n\n\n<operation\n  id=\"import-wf-properties\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Load processing settings\">\n  <configurations>\n    <configuration key=\"source-flavor\">processing/defaults</configuration>\n  </configurations>\n</operation>",
            "title": "Import Workflow Properties"
        },
        {
            "location": "/workflowoperationhandlers/import-wf-properties-woh/#importwfpropertiesworkflowoperationhandler",
            "text": "",
            "title": "ImportWfPropertiesWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/import-wf-properties-woh/#description",
            "text": "The ImportWfPropertiesWorkflowOperationHandler loads workflow properties from a Java properties file and sets\nthe corresponding workflow instance variables so that the properties can be use to control workflow execution.  In case that no properties are found in  source-flavor , the workflow operation will just skip.  Note that the  ExportWfPropertiesWorkflowOperationHandler  can be used to export workflow properties to a Java properties file.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/import-wf-properties-woh/#parameter-table",
            "text": "Configuration Key  Example  Description      source-flavor*  processing/defaults  Flavor of the attachment that contains the serialized workflow instance properties    keys  variableName1, variableName2  The workflow property keys to retrieve (comma separated list). If the option has not been specified, all keys will be retrieved     * mandatory configuration key",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/import-wf-properties-woh/#operation-example",
            "text": "<operation\n  id=\"import-wf-properties\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Load processing settings\">\n  <configurations>\n    <configuration key=\"source-flavor\">processing/defaults</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/incident-woh/",
            "text": "IncidentCreatorWorkflowOperationHandler\n\n\nDescription\n\n\nThe IncidentCreatorWorkflowOperationHandler creates an incident on a dummy job used for integration testing.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\ncode\n\n\n2\n\n\nThe code number of the incident to produce.\n\n\n1\n\n\n\n\n\n\nseverity\n\n\nWARNING\n\n\nThe severity. See Incident.Severity enum.\n\n\nINFO\n\n\n\n\n\n\ndetails\n\n\n\"tagged,+rss\" / \"-rss,+tagged\"\n\n\nSome details: title=content;title=content;...\n\n\nEMPTY\n\n\n\n\n\n\nparams\n\n\n\"presentation/tagged\"\n\n\nSome params: key=value;key=value;...\n\n\nEMPTY\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"incident\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Provoke a job incident\">\n  <configurations>\n    <configuration key=\"code\">3</configuration>\n    <configuration key=\"severity\">INFO</configuration>\n    <configuration key=\"details\">exception=content;id=325</configuration>\n    <configuration key=\"params\">track=track-1;profile=full</configuration>\n  </configurations>\n</operation>",
            "title": "Incident"
        },
        {
            "location": "/workflowoperationhandlers/incident-woh/#incidentcreatorworkflowoperationhandler",
            "text": "",
            "title": "IncidentCreatorWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/incident-woh/#description",
            "text": "The IncidentCreatorWorkflowOperationHandler creates an incident on a dummy job used for integration testing.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/incident-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      code  2  The code number of the incident to produce.  1    severity  WARNING  The severity. See Incident.Severity enum.  INFO    details  \"tagged,+rss\" / \"-rss,+tagged\"  Some details: title=content;title=content;...  EMPTY    params  \"presentation/tagged\"  Some params: key=value;key=value;...  EMPTY",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/incident-woh/#operation-example",
            "text": "<operation\n  id=\"incident\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Provoke a job incident\">\n  <configurations>\n    <configuration key=\"code\">3</configuration>\n    <configuration key=\"severity\">INFO</configuration>\n    <configuration key=\"details\">exception=content;id=325</configuration>\n    <configuration key=\"params\">track=track-1;profile=full</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/ingestdownload-woh/",
            "text": "IngestDownloadWorkflowOperationHandler\n\n\nDescription\n\n\nWith the IngestDownloadWorkflowOperationHandler it's possible to initially download external URI's from mediapackage\nelements and store them to the working file repository. The external element URI's are then rewritten to the stored\nworking file repository URI.\n\n\nIn case of having external element URI's showing to a different Opencast working file repository, it's also possible to\ndelete them after downloading it by activating the \"delete-external\" option.\n\n\nThis operation is originally implemented to get rid of remaining files on ingest working file repositories.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\ndelete-external\n\n\n\"true\"\n\n\nWhether to try to delete external working file repository URIs.\n\n\nFALSE\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"ingest-download\"\n  fail-on-error=\"false\"\n  description=\"Downloads external artifacts to the working file repository\">\n  <configurations>\n    <configuration key=\"delete-external\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Ingest-Download"
        },
        {
            "location": "/workflowoperationhandlers/ingestdownload-woh/#ingestdownloadworkflowoperationhandler",
            "text": "",
            "title": "IngestDownloadWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/ingestdownload-woh/#description",
            "text": "With the IngestDownloadWorkflowOperationHandler it's possible to initially download external URI's from mediapackage\nelements and store them to the working file repository. The external element URI's are then rewritten to the stored\nworking file repository URI.  In case of having external element URI's showing to a different Opencast working file repository, it's also possible to\ndelete them after downloading it by activating the \"delete-external\" option.  This operation is originally implemented to get rid of remaining files on ingest working file repositories.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/ingestdownload-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      delete-external  \"true\"  Whether to try to delete external working file repository URIs.  FALSE",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/ingestdownload-woh/#operation-example",
            "text": "<operation\n  id=\"ingest-download\"\n  fail-on-error=\"false\"\n  description=\"Downloads external artifacts to the working file repository\">\n  <configurations>\n    <configuration key=\"delete-external\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/inspect-woh/",
            "text": "InspectWorkflowOperation\n\n\nDescription\n\n\nThe InspectWorkflowOperation is used to inspect all tracks of a media package. It tries to verify if they are valid media tracks.\n\n\nOperation Example\n\n\n<operation\n    id=\"inspect\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Inspecting the media package\">\n</operation>",
            "title": "Inspect"
        },
        {
            "location": "/workflowoperationhandlers/inspect-woh/#inspectworkflowoperation",
            "text": "",
            "title": "InspectWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/inspect-woh/#description",
            "text": "The InspectWorkflowOperation is used to inspect all tracks of a media package. It tries to verify if they are valid media tracks.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/inspect-woh/#operation-example",
            "text": "<operation\n    id=\"inspect\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Inspecting the media package\">\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/",
            "text": "NormalizeAudioWorkflowOperationHandler\n\n\nDescription\n\n\nThe NormalizeAudioWorkflowOperationHandler normalizes the first audio stream of a video or audio track through SoX (http://sox.sourceforge.net/), it creates a new track with a reference to the original track which can be flavored and tagged.\nThis workflow operation handler can be used with audio and/or video files, at least one audio stream must be available otherwise nothing happens. Here are the internal steps done by the different inputs:\n\n\nUsed with Audio only file (forceTranscode is deactivated):\n\n\n\n\nCheck if necessary RMS Lev dB value is already in the track's metadata. If not run audio analyzation.\n\n\nRun audio normalization with original audio file.\n\n\nReplace the normalized audio file with the original.\n\n\nWrite analyzed audio metadata to the track's mediapackage.\n\n\nDelete all used temporary files\n\n\n\n\nUsed with Audio only file and forceTranscode activated:\n\n\n\n\nCheck if necessary RMS Lev dB value is already in the track's metadata. If not run audio analyzation.\n\n\n(forceTranscode step) Encode audio to FLAC. (Must be used when given audio file format is not supported by SoX)\n\n\nRun audio normalization with original audio file or encoded FLAC audio file.\n\n\n(forceTranscode step) Mux normalized audio file back to the original audio container by replacing it with the original audio stream.\n\n\nWrite analyzed audio metadata to the track's mediapackage.\n\n\nDelete all used temporary files\n\n\n\n\nUsed with Video file:\n\n\n\n\nExtract audio file encoded as FLAC audio and save it temporary in a collection\n\n\nCheck if necessary RMS Lev dB value is already in the track's metadata. If not run audio analyzation.\n\n\nRun audio normalization with extracted audio file.\n\n\nMux normalized audio file back to the original video container by replacing it with original audio stream.\n\n\nWrite analyzed audio metadata to the track's mediapackage.\n\n\nDelete all used temporary files\n\n\n\n\nExample result track:\n\n\n<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<track ref=\"track:track-2\" type=\"presenter/normalized\" id=\"70626874-17d2-480d-9d30-c10f0824961c\">\n    <mimetype>audio/x-flv</mimetype>\n    <tags>\n        <tag>norm</tag>\n    </tags>\n    <url>http://localhost:8080/files/mediapackage/8a510168-9102-425f-81e9-0943774dd229/70626874-17d2-480d-9d30-c10f0824961c/demo_slide_video_6min_buss.flv</url>\n    <checksum type=\"md5\">4e30d7d4305b0793f301816e796471db</checksum>\n    <duration>414407</duration>\n    <audio id=\"audio-1\">\n        <device/>\n        <encoder type=\"MPEG Audio\"/>\n        <bitdepth>16</bitdepth>\n        <channels>2</channels>\n        <bitrate>64000.0</bitrate>\n        <peakleveldb>-4.03</peakleveldb> <!-- NEW -->\n        <rmsleveldb>-30.54</rmsleveldb> <!-- NEW -->\n        <rmspeakdb>-10.85</rmspeakdb> <!-- NEW -->\n    </audio>\n</track>\n\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-flavors\n\n\n\"presentation/work,presenter/work\"\n\n\nThe \"flavors\" of the track to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavor\n\n\n\"presentation/work\"\n\n\nThe \"flavor\" of the track to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\nsource-tags\n\n\n\"engage,atom,rss\"\n\n\nThe \"tag\" of the track to use as a source input\n\n\nEMPTY\n\n\n\n\n\n\ntarget-flavor\n\n\n\"presentation/normalized\"\n\n\nThe flavor to apply to the normalized file\n\n\nEMPTY\n\n\n\n\n\n\ntarget-tags\n\n\n\"norm\"\n\n\nThe tags to apply to the normalized file\n\n\nEMPTY\n\n\n\n\n\n\ntarget-decibel\n*\n\n\n-30.4\n\n\nThe target RMS Level Decibel\n\n\nEMPTY\n\n\n\n\n\n\nforce-transcode\n\n\n\"true\" or \"false\"\n\n\nWhether to force transcoding the audio stream (This is needed when trying to strip an audio stream from an audio only video container, because SoX can not handle video formats, so it must be encoded to an audio format)\n\n\nFALSE\n\n\n\n\n\n\n\n\n* \nrequired keys\n\n\nOperation Example\n\n\n<operation\n  id=\"normalize-audio\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Normalize audio stream\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"target-flavor\">*/normalized</configuration>\n    <configuration key=\"target-tags\">norm</configuration>\n    <configuration key=\"target-decibel\">-30</configuration>\n    <configuration key=\"force-transcode\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Normalize Audio"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#normalizeaudioworkflowoperationhandler",
            "text": "",
            "title": "NormalizeAudioWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#description",
            "text": "The NormalizeAudioWorkflowOperationHandler normalizes the first audio stream of a video or audio track through SoX (http://sox.sourceforge.net/), it creates a new track with a reference to the original track which can be flavored and tagged.\nThis workflow operation handler can be used with audio and/or video files, at least one audio stream must be available otherwise nothing happens. Here are the internal steps done by the different inputs:",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#used-with-audio-only-file-forcetranscode-is-deactivated",
            "text": "Check if necessary RMS Lev dB value is already in the track's metadata. If not run audio analyzation.  Run audio normalization with original audio file.  Replace the normalized audio file with the original.  Write analyzed audio metadata to the track's mediapackage.  Delete all used temporary files",
            "title": "Used with Audio only file (forceTranscode is deactivated):"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#used-with-audio-only-file-and-forcetranscode-activated",
            "text": "Check if necessary RMS Lev dB value is already in the track's metadata. If not run audio analyzation.  (forceTranscode step) Encode audio to FLAC. (Must be used when given audio file format is not supported by SoX)  Run audio normalization with original audio file or encoded FLAC audio file.  (forceTranscode step) Mux normalized audio file back to the original audio container by replacing it with the original audio stream.  Write analyzed audio metadata to the track's mediapackage.  Delete all used temporary files",
            "title": "Used with Audio only file and forceTranscode activated:"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#used-with-video-file",
            "text": "Extract audio file encoded as FLAC audio and save it temporary in a collection  Check if necessary RMS Lev dB value is already in the track's metadata. If not run audio analyzation.  Run audio normalization with extracted audio file.  Mux normalized audio file back to the original video container by replacing it with original audio stream.  Write analyzed audio metadata to the track's mediapackage.  Delete all used temporary files   Example result track:  <?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>\n<track ref=\"track:track-2\" type=\"presenter/normalized\" id=\"70626874-17d2-480d-9d30-c10f0824961c\">\n    <mimetype>audio/x-flv</mimetype>\n    <tags>\n        <tag>norm</tag>\n    </tags>\n    <url>http://localhost:8080/files/mediapackage/8a510168-9102-425f-81e9-0943774dd229/70626874-17d2-480d-9d30-c10f0824961c/demo_slide_video_6min_buss.flv</url>\n    <checksum type=\"md5\">4e30d7d4305b0793f301816e796471db</checksum>\n    <duration>414407</duration>\n    <audio id=\"audio-1\">\n        <device/>\n        <encoder type=\"MPEG Audio\"/>\n        <bitdepth>16</bitdepth>\n        <channels>2</channels>\n        <bitrate>64000.0</bitrate>\n        <peakleveldb>-4.03</peakleveldb> <!-- NEW -->\n        <rmsleveldb>-30.54</rmsleveldb> <!-- NEW -->\n        <rmspeakdb>-10.85</rmspeakdb> <!-- NEW -->\n    </audio>\n</track>",
            "title": "Used with Video file:"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      source-flavors  \"presentation/work,presenter/work\"  The \"flavors\" of the track to use as a source input  EMPTY    source-flavor  \"presentation/work\"  The \"flavor\" of the track to use as a source input  EMPTY    source-tags  \"engage,atom,rss\"  The \"tag\" of the track to use as a source input  EMPTY    target-flavor  \"presentation/normalized\"  The flavor to apply to the normalized file  EMPTY    target-tags  \"norm\"  The tags to apply to the normalized file  EMPTY    target-decibel *  -30.4  The target RMS Level Decibel  EMPTY    force-transcode  \"true\" or \"false\"  Whether to force transcoding the audio stream (This is needed when trying to strip an audio stream from an audio only video container, because SoX can not handle video formats, so it must be encoded to an audio format)  FALSE     *  required keys",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/normalizeaudio-woh/#operation-example",
            "text": "<operation\n  id=\"normalize-audio\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Normalize audio stream\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/work</configuration>\n    <configuration key=\"target-flavor\">*/normalized</configuration>\n    <configuration key=\"target-tags\">norm</configuration>\n    <configuration key=\"target-decibel\">-30</configuration>\n    <configuration key=\"force-transcode\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/",
            "text": "PartialImportWorkflowOperation\n\n\nDescription\n\n\nThe PartialImportWorkflowOperation processes a set of audio and video files according to a SMIL document describing their relations.\nIts primary use is to post-process audio and video files ingested by capture agents using /ingest/addPartialTrack of the ingest endpoint.\n\n\nPrerequisite\n\n\nWhen using the PartialImportWorkflowOperation you must active the accurate frame count setting in the \norg.opencastproject.inspection.ffmpeg.MediaInspectionServiceImpl.cfg\n configuration file:\n\n\naccurate_frame_count=true\n\n\n\nThis will be fixed by the ticket: https://opencast.jira.com/browse/MH-11264\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\ntype\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-presenter-flavor\n\n\nMediaPackageElementFlavor\n\n\nThe flavor of tracks for the presenter video\n\n\n\n\n\n\n\n\nsource-presentation-flavor\n\n\nMediaPackageElementFlavor\n\n\nThe flavor of tracks for the presentation video\n\n\n\n\n\n\n\n\nsource-smil-flavor\n*\n\n\nMediaPackageElementFlavor\n\n\nThe flavor of the SMIL file describing how to build the targets.\nWhen using /ingest/addPartialTrack, the ingest service will create the SMIL file and add it to the media package as flavor \nsmil/source+partial\n\n\n\n\n\n\n\n\ntarget-presenter-flavor\n*\n\n\nMediaPackageElementFlavor\n\n\nThe flavor to be used for the target presentation track.\nBoth the type and subtype must not be \n*\n\n\n\n\n\n\n\n\ntarget-presentation-flavor\n*\n\n\nMediaPackageElementFlavor\n\n\nThe flavor to be used for the target presentation track.\nBoth the type nor subtype must not be \n*\n\n\n\n\n\n\n\n\nconcat-encoding-profile\n*\n\n\nString\n\n\nEncoding profile used for concatenating audio or video files\n\n\n\n\n\n\n\n\ntrim-encoding-profile\n*\n\n\nString\n\n\nEncoding profile using for trimming tracks\n\n\n\n\n\n\n\n\nforce-encoding\n\n\nBoolean\n\n\nIf set to \ntrue\n, all generated target files will be encoded using the encoding profile \nforce-encoding-profile\n\n\nfalse\n\n\n\n\n\n\nforce-encoding-profile\n*\n\n\nString\n\n\nEncoding profile to be used when \nforce-encoding\n is set to \ntrue\n or a given target track has a file extension not included in \nrequired-extensions\n\n\n\n\n\n\n\n\nrequired-extensions\n\n\nString , { \",\" , String }\n\n\nComma-separated list of file extension names (case insensitive). All generated target files whose file extensions are not in this list will be encoded using the encoding profile \nforce-encoding-profile\n\n\n\"mp4\"\n\n\n\n\n\n\nenforce-divisible-by-two\n\n\nBoolean\n\n\nIf set, all video targets will have widths and heights divisible by two. This might be necessary depending since some encoder fail when encountering uneven widths or heights.\n\n\nfalse\n\n\n\n\n\n\n\n\n* \nrequired keys\n\n\nNote that it is allowed to set the configuration keys 'target-presenter-flavor' and 'target-presentation-flavor' to the same value.\n\n\nOperation Example\n\n\nWhat exactly the PartialImportWorkflowOperation does is best described by example. In our example, a capture agent records three sources:\n\n\n\n\nPresenter camera (video only)\n\n\nPresenter microphone (audio only)\n\n\nPresentation (video only)\n\n\n\n\nWhile the capture agent internally triggers the recording for all sources at the same time, the actual recording of the individual sources might not necessarily start at the exact same time, e.g. due to latency of the recording devices.\n Also, while recording, a watch dog in our example capture agent recognizes that for whatever reason, the recording of the sources had stopped and restarted again several times - resulting in multiple audio and/or video files per source.\n\n\nHere is a graphics showing how this example could look like:\n\n\n\n\nSo we have three tracks, but seven files:\n\n\n\n\nPresenter camera: 2 video-only files\n\n\nPresenter microphone: 2 audio-only files\n\n\nPresentation: 3 video-only files\n\n\n\n\nWe call that individual fragments of a track \npartial tracks\n.\n\n\nOur example capture agent can now use the addPartialTrack ingest facility to specify for each of the ingested files, at which time the content fits into the overall recording.\nThe ingest service will automatically create the SMIL file describing how the files relate to each other and add it to the media package as flavor \nsmil/source+partial\n.\n\n\nIn our example, this SMIL file would like something like:\n\n\n  <?xml version=\"1.1\" encoding=\"UTF-8\"?>\n  <smil xmlns=\"http://www.w3.org/ns/SMIL\" version=\"3.0\">\n    <head/>\n    <body>\n      <par dur=\"93861ms\">\n        <seq>\n          <video begin=\"412ms\" dur=\"13440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <video begin=\"15324ms\" dur=\"73440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <audio begin=\"0ms\" dur=\"40861ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n          <audio begin=\"43400ms\" dur=\"13861ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n        </seq>\n        <seq>\n          <video begin=\"948ms\" dur=\"33440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n          <video begin=\"35643ms\" dur=\"15430ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n          <video begin=\"45448ms\" dur=\"25440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n        </seq>\n      </par>\n    </body>\n  </smil>\n\n\n\nWhat we finally want, however, is a single presenter and a single presentation track that can be processed by Opencast workflow operations.\nTo achieve this, the PartialImportWorkflowOperation is used to post-process the files as described in the SMIL file:\n\n\n <operation id=\"partial-import\"\n           description=\"Post-processing raw audio and video files from capture agent\"\n           fail-on-error=\"true\"\n           exception-handler-workflow=\"ng-partial-error\">\n  <configurations>\n    <configuration key=\"source-presenter-flavor\">presenter/source</configuration>\n    <configuration key=\"source-presentation-flavor\">presentation/source</configuration>\n    <configuration key=\"source-smil-flavor\">smil/source+partial</configuration>\n    <configuration key=\"target-presenter-flavor\">presenter/standard</configuration>\n    <configuration key=\"target-presentation-flavor\">presentation/standard</configuration>\n    <configuration key=\"concat-encoding-profile\">concat.work</configuration>\n    <configuration key=\"trim-encoding-profile\">trim.work</configuration>\n    <configuration key=\"force-encoding-profile\">editor.work</configuration>\n  </configurations>\n</operation>\n\n\n\nIn our example, the PartialImportWorkflowOperation will create the target flavors presenter/standard and presentation/standard as depicted below: \n\n\n\n\nThe green parts have been filled in by the PartialImportWorkflowOperation by either silence (audio) or pictures (video).\n\n\nTo achieve this, the PartialImportWorkflowOperation performs the following steps:\n\n\n\n\n\n\nExtend content at the beginning:\n\nIf the first partial track of a given source and type (audio/video) does not begin at position zero, content is added in front of it so that the corresponding target track will start at position zero. For audio, silence is added. In case of video, the first frame of the first partial track is added.\n\n\n\n\n\n\nFilling the gaps:\n\nAs you can see in our example, it is possible that content is missing within the actual tracks. Those gaps are filled by adding silence (in case of audio) or adding the last frame of the previous partial track (in case of video).\nIn this step, content is also added at the end of the track in case its duration is less than the overall duration of the recording.\n\n\n\n\n\n\nTrim the tracks:\n\nIt is possible that processing the ingested files according to the SMIL file would result in tracks that have a longer duration than the overall recording should. Therefore, all tracks are trimmed individually to the target duration.\n\n\n\n\n\n\nMux audio tracks:\n\nTo avoid the necessity to call further workflow operations just for audio muxing, the PartialImportWorkflowOperation can perform audio muxing itself. In our example, it would mux the audio and video track of the presenter into a single audio/video track.\n\n\n\n\n\n\nEnsure specific output formats:\n\nThere may be situations where you want to ensure that the output of this operations comes with a specific file format, e.g. \nMP4\n.\nThe configuration keys \nforce-encoding\n and \nrequired_extensions\n can be used to control the behavior of the PartialImportWorkflowOperation: In case the \nforce-encoding\n is set to \ntrue\n, the target tracks will be re-encoded using the \nforce-encoding-profile\n. The target tracks will also be re-encoded using that encoding profile in case its file extensions don't match the \nrequired_extensions\n.\n\n\n\n\n\n\nSMIL File Structure\n\n\nThe PartialImportWorkflowOperation expects a specific subset of SMIL that is described in this section.\nThe overall structure of the SMIL file is shown by example below:\n\n\n  <?xml version=\"1.1\" encoding=\"UTF-8\"?>\n  <smil xmlns=\"http://www.w3.org/ns/SMIL\" version=\"3.0\">\n    <head/>\n    <body>\n      <par dur=\"15000ms\">\n        <seq>\n          <video begin=\"400ms\" dur=\"13000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <video begin=\"15000ms\" dur=\"70000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <audio begin=\"0ms\" dur=\"400ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n          <audio begin=\"900ms\" dur=\"13000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n        </seq>\n        <seq>\n          <video begin=\"900ms\" dur=\"30000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n        </seq>\n      </par>\n    </body>\n  </smil>\n\n\n\nThe PartialImportWorkflowOperation can handle at most one \npar\n element that is used to describe to overall media duration using the attribute \ndur\n. The resulting tracks will be trimmed to this duration if necessary.\nIn the example above, the overall media duration is set to 15 seconds.\n\n\nThe \npar\n element has one or two sequence sub elements \nseq\n, each describing a track that is to be built from its sub elements - the partial tracks.\nEach sequence (\nseq\n) has at least one sub element. Sub elements can be either \nvideo\n elements, \naudio\n elements or both \nvideo\n and \naudio\n elements. Each of those sub elements requires the attributes \nbegin\n (position of partial track in milliseconds relative to start of overall media) and \ndur\n (duration of partial track in milliseconds)\nThe \naudio\n elements are used to indicate that the media file referred to is an audio-only media file, whereas \nvideo\n elements can refer to either video-only or audio-video media files.\nThe following combinations result in a defined behavior:\n\n\nSupported Combinations of Video and Audio Elements\n\n\n\n\n\n\n\n\nvideo\n\n\naudio\n\n\nresulting track\n\n\n\n\n\n\n\n\n\n\naudio/video track\n\n\nn/a\n\n\naudio/video track\n\n\n\n\n\n\nvideo-only track\n\n\nn/a\n\n\nvideo-only track\n\n\n\n\n\n\nvideo-only track\n\n\naudio-only track\n\n\naudio/video track\n\n\n\n\n\n\nn/a\n\n\naudio-only track\n\n\naudio-only track\n\n\n\n\n\n\n\n\nAll other combinations of \nvideo\n and \naudio\n elements result in unspecified behavior of the PartialImportWorkflowOperation.\n\n\nOrder of Video and Audio Elements\n\n\nWithin a sequence (\nseq\n), the \nvideo\n elements most occur in ascending order considering the values of their attributes \nbegin\n. The same holds for \naudio\n elements. Note the \nvideo\n and \naudio\n elements are processed individually, so the order of occurrences of \nvideo\n and \naudio\n elements are independent from each other.\n\n\nImportant:\n The PartialImportWorkflowOperation will not process \nvideo\n or \naudio\n elements correctly if the order of appearance in the SMIL file is not correct.\n\n\nOverlapping Partial Tracks\n\n\nThe behavior of overlapping partial tracks is unspecified, i.e. for a given element \ne\n (\nvideo\n or \naudio\n), the value of \nbegin\n for the subsequent element \n(e+1)\n of the same type (\nvideo\n or \naudio\n) within the same sequence must be equal or greater than \ne.begin + e.dur\n, i.e. make sure that the following invariant holds: \n(e+1).begin >= e.begin + e.dur\n\n\nEncoding Profiles\n\n\nThe PartialImportWorkflowOperation uses a number of encoding profiles to perform its processing. Some of the encoding profiles can be explicitly configured by the user, others are used implicitly in means of being hard-coded and are not supposed to be changed by the user.\n\n\nHard-coded Encoding Profiles\n\n\n\n\n\n\n\n\nencoding profile\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nimport.preview\n\n\nExtract the first frame of a given partial track\n\n\n\n\n\n\nimport.image-frame\n\n\nExtract the last frame of a given partial track. Note that this profile is used to extract the \nexactly\n last frame of a partial track - not just a frame close to the last one. To make this work for video files with headers that don't contain the exact frame count, set \naccurate_frame_count\n to \ntrue\n in  etc/org.opencastproject.inspection.ffmpeg.MediaInspectionServiceImpl.cfg\n\n\n\n\n\n\nimage-movie.work\n\n\nGenerate video partial tracks based on extracted images used to fill video gaps\n\n\n\n\n\n\nimport.silent\n\n\nGenerate silent audio tracks used to fill audio gaps\n\n\n\n\n\n\n\n\nConfigurable Encoding Profiles\n\n\n\n\n\n\n\n\nconfiguration key\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nconcat-encoding-profile\n\n\nUsed to concatenate partial tracks into tracks\n\n\n\n\n\n\ntrim-encoding-profile\n\n\nUsed to trim the resulting concatenated single tracks if necessary\n\n\n\n\n\n\nforce-encoding-profile\n\n\nUsed to re-encode target tracks in case the file extension of a given target track is not included in \nrequired-extensions\n or the configuration key \nforce-encoding\n is set to \ntrue",
            "title": "Partial Import"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#partialimportworkflowoperation",
            "text": "",
            "title": "PartialImportWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#description",
            "text": "The PartialImportWorkflowOperation processes a set of audio and video files according to a SMIL document describing their relations.\nIts primary use is to post-process audio and video files ingested by capture agents using /ingest/addPartialTrack of the ingest endpoint.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#prerequisite",
            "text": "When using the PartialImportWorkflowOperation you must active the accurate frame count setting in the  org.opencastproject.inspection.ffmpeg.MediaInspectionServiceImpl.cfg  configuration file:  accurate_frame_count=true  This will be fixed by the ticket: https://opencast.jira.com/browse/MH-11264",
            "title": "Prerequisite"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#parameter-table",
            "text": "configuration keys  type  description  default value      source-presenter-flavor  MediaPackageElementFlavor  The flavor of tracks for the presenter video     source-presentation-flavor  MediaPackageElementFlavor  The flavor of tracks for the presentation video     source-smil-flavor *  MediaPackageElementFlavor  The flavor of the SMIL file describing how to build the targets. When using /ingest/addPartialTrack, the ingest service will create the SMIL file and add it to the media package as flavor  smil/source+partial     target-presenter-flavor *  MediaPackageElementFlavor  The flavor to be used for the target presentation track. Both the type and subtype must not be  *     target-presentation-flavor *  MediaPackageElementFlavor  The flavor to be used for the target presentation track. Both the type nor subtype must not be  *     concat-encoding-profile *  String  Encoding profile used for concatenating audio or video files     trim-encoding-profile *  String  Encoding profile using for trimming tracks     force-encoding  Boolean  If set to  true , all generated target files will be encoded using the encoding profile  force-encoding-profile  false    force-encoding-profile *  String  Encoding profile to be used when  force-encoding  is set to  true  or a given target track has a file extension not included in  required-extensions     required-extensions  String , { \",\" , String }  Comma-separated list of file extension names (case insensitive). All generated target files whose file extensions are not in this list will be encoded using the encoding profile  force-encoding-profile  \"mp4\"    enforce-divisible-by-two  Boolean  If set, all video targets will have widths and heights divisible by two. This might be necessary depending since some encoder fail when encountering uneven widths or heights.  false     *  required keys  Note that it is allowed to set the configuration keys 'target-presenter-flavor' and 'target-presentation-flavor' to the same value.",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#operation-example",
            "text": "What exactly the PartialImportWorkflowOperation does is best described by example. In our example, a capture agent records three sources:   Presenter camera (video only)  Presenter microphone (audio only)  Presentation (video only)   While the capture agent internally triggers the recording for all sources at the same time, the actual recording of the individual sources might not necessarily start at the exact same time, e.g. due to latency of the recording devices.  Also, while recording, a watch dog in our example capture agent recognizes that for whatever reason, the recording of the sources had stopped and restarted again several times - resulting in multiple audio and/or video files per source.  Here is a graphics showing how this example could look like:   So we have three tracks, but seven files:   Presenter camera: 2 video-only files  Presenter microphone: 2 audio-only files  Presentation: 3 video-only files   We call that individual fragments of a track  partial tracks .  Our example capture agent can now use the addPartialTrack ingest facility to specify for each of the ingested files, at which time the content fits into the overall recording.\nThe ingest service will automatically create the SMIL file describing how the files relate to each other and add it to the media package as flavor  smil/source+partial .  In our example, this SMIL file would like something like:    <?xml version=\"1.1\" encoding=\"UTF-8\"?>\n  <smil xmlns=\"http://www.w3.org/ns/SMIL\" version=\"3.0\">\n    <head/>\n    <body>\n      <par dur=\"93861ms\">\n        <seq>\n          <video begin=\"412ms\" dur=\"13440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <video begin=\"15324ms\" dur=\"73440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <audio begin=\"0ms\" dur=\"40861ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n          <audio begin=\"43400ms\" dur=\"13861ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n        </seq>\n        <seq>\n          <video begin=\"948ms\" dur=\"33440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n          <video begin=\"35643ms\" dur=\"15430ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n          <video begin=\"45448ms\" dur=\"25440ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n        </seq>\n      </par>\n    </body>\n  </smil>  What we finally want, however, is a single presenter and a single presentation track that can be processed by Opencast workflow operations.\nTo achieve this, the PartialImportWorkflowOperation is used to post-process the files as described in the SMIL file:   <operation id=\"partial-import\"\n           description=\"Post-processing raw audio and video files from capture agent\"\n           fail-on-error=\"true\"\n           exception-handler-workflow=\"ng-partial-error\">\n  <configurations>\n    <configuration key=\"source-presenter-flavor\">presenter/source</configuration>\n    <configuration key=\"source-presentation-flavor\">presentation/source</configuration>\n    <configuration key=\"source-smil-flavor\">smil/source+partial</configuration>\n    <configuration key=\"target-presenter-flavor\">presenter/standard</configuration>\n    <configuration key=\"target-presentation-flavor\">presentation/standard</configuration>\n    <configuration key=\"concat-encoding-profile\">concat.work</configuration>\n    <configuration key=\"trim-encoding-profile\">trim.work</configuration>\n    <configuration key=\"force-encoding-profile\">editor.work</configuration>\n  </configurations>\n</operation>  In our example, the PartialImportWorkflowOperation will create the target flavors presenter/standard and presentation/standard as depicted below:    The green parts have been filled in by the PartialImportWorkflowOperation by either silence (audio) or pictures (video).  To achieve this, the PartialImportWorkflowOperation performs the following steps:    Extend content at the beginning: \nIf the first partial track of a given source and type (audio/video) does not begin at position zero, content is added in front of it so that the corresponding target track will start at position zero. For audio, silence is added. In case of video, the first frame of the first partial track is added.    Filling the gaps: \nAs you can see in our example, it is possible that content is missing within the actual tracks. Those gaps are filled by adding silence (in case of audio) or adding the last frame of the previous partial track (in case of video).\nIn this step, content is also added at the end of the track in case its duration is less than the overall duration of the recording.    Trim the tracks: \nIt is possible that processing the ingested files according to the SMIL file would result in tracks that have a longer duration than the overall recording should. Therefore, all tracks are trimmed individually to the target duration.    Mux audio tracks: \nTo avoid the necessity to call further workflow operations just for audio muxing, the PartialImportWorkflowOperation can perform audio muxing itself. In our example, it would mux the audio and video track of the presenter into a single audio/video track.    Ensure specific output formats: \nThere may be situations where you want to ensure that the output of this operations comes with a specific file format, e.g.  MP4 .\nThe configuration keys  force-encoding  and  required_extensions  can be used to control the behavior of the PartialImportWorkflowOperation: In case the  force-encoding  is set to  true , the target tracks will be re-encoded using the  force-encoding-profile . The target tracks will also be re-encoded using that encoding profile in case its file extensions don't match the  required_extensions .",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#smil-file-structure",
            "text": "The PartialImportWorkflowOperation expects a specific subset of SMIL that is described in this section.\nThe overall structure of the SMIL file is shown by example below:    <?xml version=\"1.1\" encoding=\"UTF-8\"?>\n  <smil xmlns=\"http://www.w3.org/ns/SMIL\" version=\"3.0\">\n    <head/>\n    <body>\n      <par dur=\"15000ms\">\n        <seq>\n          <video begin=\"400ms\" dur=\"13000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <video begin=\"15000ms\" dur=\"70000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/5133d85c-5813-4b54-8a43-0cce9ddc1c4a/video_file.mov\"/>\n          <audio begin=\"0ms\" dur=\"400ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n          <audio begin=\"900ms\" dur=\"13000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/72a42596-e1d0-47a5-b9c8-60180b466954/audio_file.mov\"/>\n        </seq>\n        <seq>\n          <video begin=\"900ms\" dur=\"30000ms\" src=\"/files/mediapackage/7b56bf47-8065-4244-96a0-412a759ccc3f/bf5ea647-b99b-4ec3-a10c-29445fb01eca/video_file.mov\"/>\n        </seq>\n      </par>\n    </body>\n  </smil>  The PartialImportWorkflowOperation can handle at most one  par  element that is used to describe to overall media duration using the attribute  dur . The resulting tracks will be trimmed to this duration if necessary.\nIn the example above, the overall media duration is set to 15 seconds.  The  par  element has one or two sequence sub elements  seq , each describing a track that is to be built from its sub elements - the partial tracks.\nEach sequence ( seq ) has at least one sub element. Sub elements can be either  video  elements,  audio  elements or both  video  and  audio  elements. Each of those sub elements requires the attributes  begin  (position of partial track in milliseconds relative to start of overall media) and  dur  (duration of partial track in milliseconds)\nThe  audio  elements are used to indicate that the media file referred to is an audio-only media file, whereas  video  elements can refer to either video-only or audio-video media files.\nThe following combinations result in a defined behavior:",
            "title": "SMIL File Structure"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#supported-combinations-of-video-and-audio-elements",
            "text": "video  audio  resulting track      audio/video track  n/a  audio/video track    video-only track  n/a  video-only track    video-only track  audio-only track  audio/video track    n/a  audio-only track  audio-only track     All other combinations of  video  and  audio  elements result in unspecified behavior of the PartialImportWorkflowOperation.",
            "title": "Supported Combinations of Video and Audio Elements"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#order-of-video-and-audio-elements",
            "text": "Within a sequence ( seq ), the  video  elements most occur in ascending order considering the values of their attributes  begin . The same holds for  audio  elements. Note the  video  and  audio  elements are processed individually, so the order of occurrences of  video  and  audio  elements are independent from each other.  Important:  The PartialImportWorkflowOperation will not process  video  or  audio  elements correctly if the order of appearance in the SMIL file is not correct.",
            "title": "Order of Video and Audio Elements"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#overlapping-partial-tracks",
            "text": "The behavior of overlapping partial tracks is unspecified, i.e. for a given element  e  ( video  or  audio ), the value of  begin  for the subsequent element  (e+1)  of the same type ( video  or  audio ) within the same sequence must be equal or greater than  e.begin + e.dur , i.e. make sure that the following invariant holds:  (e+1).begin >= e.begin + e.dur",
            "title": "Overlapping Partial Tracks"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#encoding-profiles",
            "text": "The PartialImportWorkflowOperation uses a number of encoding profiles to perform its processing. Some of the encoding profiles can be explicitly configured by the user, others are used implicitly in means of being hard-coded and are not supposed to be changed by the user.",
            "title": "Encoding Profiles"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#hard-coded-encoding-profiles",
            "text": "encoding profile  description      import.preview  Extract the first frame of a given partial track    import.image-frame  Extract the last frame of a given partial track. Note that this profile is used to extract the  exactly  last frame of a partial track - not just a frame close to the last one. To make this work for video files with headers that don't contain the exact frame count, set  accurate_frame_count  to  true  in  etc/org.opencastproject.inspection.ffmpeg.MediaInspectionServiceImpl.cfg    image-movie.work  Generate video partial tracks based on extracted images used to fill video gaps    import.silent  Generate silent audio tracks used to fill audio gaps",
            "title": "Hard-coded Encoding Profiles"
        },
        {
            "location": "/workflowoperationhandlers/partial-import-woh/#configurable-encoding-profiles",
            "text": "configuration key  description      concat-encoding-profile  Used to concatenate partial tracks into tracks    trim-encoding-profile  Used to trim the resulting concatenated single tracks if necessary    force-encoding-profile  Used to re-encode target tracks in case the file extension of a given target track is not included in  required-extensions  or the configuration key  force-encoding  is set to  true",
            "title": "Configurable Encoding Profiles"
        },
        {
            "location": "/workflowoperationhandlers/postmediapackage-woh/",
            "text": "PostMediapackageWorkflowHandler\n\n\nDescription\n\n\nThis Workflow Operation Handler can be used to send a POST request containing an XML/JSON representation of the Mediapackage processed by the workflow to an external webservice. The service supports HTTP Basic and Digest Authentication.\n\n\nOptions\n\n\n<!--\n    This operation will send a POST request containing the Mediapackage to an\n    external webservice.\n-->\n<operation\n    id=\"post-mediapackage\"\n    fail-on-error=\"false\"\n    exception-handler-workflow=\"error\"\n    description=\"Sending MediaPackage to Lernfunk3\">\n    <configurations>\n        <!-- target url -->\n        <configuration key=\"url\">http://example.com:5000/</configuration>\n        <!-- export format: xml or json -->\n        <configuration key=\"format\">xml</configuration>\n        <!--\n            Disable this on a productive system. If enabled, request bodies\n            etc. will be written to log. If disabled, only errors will be\n            logged.\n        -->\n        <configuration key=\"debug\">no</configuration>\n        <!-- Type of Mediapackage to send (possible values: workflow, search; default: search) -->\n        <configuration key=\"mediapackage.type\">search</configuration>\n        <!-- enable authentication (simple/digest will be detected automatically) -->\n        <configuration key=\"auth.enabled\">yes</configuration>\n        <!-- username for authentication -->\n        <configuration key=\"auth.username\">exportuser</configuration>\n        <!-- password for authentication -->\n        <configuration key=\"auth.password\">secret</configuration>\n        <!-- fields with keys beginning with + will be added to the message body -->\n        <configuration key=\"+source_system\">video.example.com</configuration>\n    </configurations>\n</operation>",
            "title": "Post Media Package"
        },
        {
            "location": "/workflowoperationhandlers/postmediapackage-woh/#postmediapackageworkflowhandler",
            "text": "",
            "title": "PostMediapackageWorkflowHandler"
        },
        {
            "location": "/workflowoperationhandlers/postmediapackage-woh/#description",
            "text": "This Workflow Operation Handler can be used to send a POST request containing an XML/JSON representation of the Mediapackage processed by the workflow to an external webservice. The service supports HTTP Basic and Digest Authentication.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/postmediapackage-woh/#options",
            "text": "<!--\n    This operation will send a POST request containing the Mediapackage to an\n    external webservice.\n-->\n<operation\n    id=\"post-mediapackage\"\n    fail-on-error=\"false\"\n    exception-handler-workflow=\"error\"\n    description=\"Sending MediaPackage to Lernfunk3\">\n    <configurations>\n        <!-- target url -->\n        <configuration key=\"url\">http://example.com:5000/</configuration>\n        <!-- export format: xml or json -->\n        <configuration key=\"format\">xml</configuration>\n        <!--\n            Disable this on a productive system. If enabled, request bodies\n            etc. will be written to log. If disabled, only errors will be\n            logged.\n        -->\n        <configuration key=\"debug\">no</configuration>\n        <!-- Type of Mediapackage to send (possible values: workflow, search; default: search) -->\n        <configuration key=\"mediapackage.type\">search</configuration>\n        <!-- enable authentication (simple/digest will be detected automatically) -->\n        <configuration key=\"auth.enabled\">yes</configuration>\n        <!-- username for authentication -->\n        <configuration key=\"auth.username\">exportuser</configuration>\n        <!-- password for authentication -->\n        <configuration key=\"auth.password\">secret</configuration>\n        <!-- fields with keys beginning with + will be added to the message body -->\n        <configuration key=\"+source_system\">video.example.com</configuration>\n    </configurations>\n</operation>",
            "title": "Options"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/",
            "text": "PrepareAVWorkflowOperation\n\n\nDescription\n\n\nThe PrepareAVWorkflowOperation works is like this: \n\n\nIf there are two tracks with the same flavor, and one of them contains a video stream only, while the other contains an audio stream only, the implementation will call the composer's \"mux\" method, with the result that the audio will be muxed with the video, using the video's movie container. \n\n\nIf it there is one track with a certain flavor, the \"encode\" method is called which will rewrite (vs. encode) the file using the same container and codec (-vcodec copy, -a codec copy), while the container format is determined by ffmpeg via the file's extension. The reason for doing this is that many media files are in a poor state with regard to their compatibility (most often, the stream's codec contains differing information from the container), so we are basically asking ffmepg to rewrite the whole thing, which will in many cases eliminate problems that would otherwhise occur later in the pipeline (encoding to flash, mjpeg etc.). \n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresenter/source\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\ntarget-flavor\n\n\npresenter/work\n\n\nSpecifies the flavor the new files will get.\n\n\n\n\n\n\nmux-encoding-profile\n\n\nmux-av.work\n\n\nThe encoding profile to use for media that needs to be muxed (default is 'mux-av.work')\n\n\n\n\n\n\naudio-video-encoding-profile\n\n\nav.work\n\n\nThe encoding profile to use for media that is audio-video already and needs to be re-encodend (default is av.work)\n\n\n\n\n\n\nvideo-encoding-profile\n\n\nvideo-only.work\n\n\nThe encoding profile to use for media that is only video and needs to be re-encodend (default is video-only.work)\n\n\n\n\n\n\naudio-encoding-profile\n\n\naudio-only.work\n\n\nThe encoding profile to use for media that is only audio and needs to be re-encodend (default is audio-only.work)\n\n\n\n\n\n\nrewrite\n\n\ntrue\n\n\nShould files be rewritten\n\n\n\n\n\n\naudio-muxing-source-flavors\n\n\npresentation/source,presentation/*,*/*\n\n\nIf there is no matching flavor to mux, search for a track with audio that can be muxed by going from left to right through this comma-separated list of source flavors\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"prepare-av\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Preparing presenter audio and video work versions\">\n  <configurations>\n    <configuration key=\"source-flavor\">presenter/source</configuration>\n    <configuration key=\"target-flavor\">presenter/work</configuration>\n    <configuration key=\"rewrite\">false</configuration>\n    <configuration key=\"audio-muxing-source-flavors\">*/?,*/*</configuration>\n  </configurations>\n</operation>\n\n\n\nAudio Muxing\n\n\nThe PrepareAVWorkflowOperation can be used for audio muxing in case a matching source video track has no audio. Audio muxing is performed as described below:\n\n\nIn case the \nsource-flavor\n matches to exactly two tracks whereas one track is a video-only track and the other is an audio-only track, those tracks will be merged into a single audio-video track.\n\n\nIf there is no such matching flavor to mux, additional audio muxing facilities can be controlled by the use of the configuration key \naudio-muxing-source-flavors\n. That configuration key contains a comma-separated list of flavors that defines the search order of how to find an audio track.\n\n\nThe following two wildcard characters can be used in flavors in that list:\n\n\n\n\n'*' will match to any type or subtype\n\n\n'?' will match to the type or subtype of the matching \nsource-flavor\n\n\n\n\nNote: In case that a flavor used with \naudio-muxing-source-flavors\n matches to multiple tracks within the media package resulting in a list of matching tracks, the search order within that list is undefined, i.e. PrepareAVWorkflowOperation will just pick any of those tracks that has audio.\n\n\nExample\n\n\n[...]\n<configuration key=\"source-flavor\">presenter/*</configuration>\n<configuration key=\"audio-muxing-source-flavors\">presenter-audio/?, presentation/?,presentation/*,?/audio,*/*</configuration>\n[...]\n\n\n\nLet's assume that exactly one video-only track of flavor presenter/source in the media package and another track of flavor audio/track that has audio.\n\n\nIn this example, the PrepareAVWorkflowOperation would perform the following steps:\n\n\n\n\nSearch tracks of flavor presenter-audio/source (presenter-audio/?)\n\n\nSearch tracks of flavor presentation/source (presentation/?)\n\n\nSearch tracks of flavor presentation/*\n\n\nSearch tracks of flavor presenter/audio (?/audio)\n\n\nSearch tracks of flavor */*",
            "title": "Prepare A/V"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/#prepareavworkflowoperation",
            "text": "",
            "title": "PrepareAVWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/#description",
            "text": "The PrepareAVWorkflowOperation works is like this:   If there are two tracks with the same flavor, and one of them contains a video stream only, while the other contains an audio stream only, the implementation will call the composer's \"mux\" method, with the result that the audio will be muxed with the video, using the video's movie container.   If it there is one track with a certain flavor, the \"encode\" method is called which will rewrite (vs. encode) the file using the same container and codec (-vcodec copy, -a codec copy), while the container format is determined by ffmpeg via the file's extension. The reason for doing this is that many media files are in a poor state with regard to their compatibility (most often, the stream's codec contains differing information from the container), so we are basically asking ffmepg to rewrite the whole thing, which will in many cases eliminate problems that would otherwhise occur later in the pipeline (encoding to flash, mjpeg etc.).",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presenter/source  Specifies which media should be processed.    target-flavor  presenter/work  Specifies the flavor the new files will get.    mux-encoding-profile  mux-av.work  The encoding profile to use for media that needs to be muxed (default is 'mux-av.work')    audio-video-encoding-profile  av.work  The encoding profile to use for media that is audio-video already and needs to be re-encodend (default is av.work)    video-encoding-profile  video-only.work  The encoding profile to use for media that is only video and needs to be re-encodend (default is video-only.work)    audio-encoding-profile  audio-only.work  The encoding profile to use for media that is only audio and needs to be re-encodend (default is audio-only.work)    rewrite  true  Should files be rewritten    audio-muxing-source-flavors  presentation/source,presentation/*,*/*  If there is no matching flavor to mux, search for a track with audio that can be muxed by going from left to right through this comma-separated list of source flavors",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/#operation-example",
            "text": "<operation\n  id=\"prepare-av\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Preparing presenter audio and video work versions\">\n  <configurations>\n    <configuration key=\"source-flavor\">presenter/source</configuration>\n    <configuration key=\"target-flavor\">presenter/work</configuration>\n    <configuration key=\"rewrite\">false</configuration>\n    <configuration key=\"audio-muxing-source-flavors\">*/?,*/*</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/#audio-muxing",
            "text": "The PrepareAVWorkflowOperation can be used for audio muxing in case a matching source video track has no audio. Audio muxing is performed as described below:  In case the  source-flavor  matches to exactly two tracks whereas one track is a video-only track and the other is an audio-only track, those tracks will be merged into a single audio-video track.  If there is no such matching flavor to mux, additional audio muxing facilities can be controlled by the use of the configuration key  audio-muxing-source-flavors . That configuration key contains a comma-separated list of flavors that defines the search order of how to find an audio track.  The following two wildcard characters can be used in flavors in that list:   '*' will match to any type or subtype  '?' will match to the type or subtype of the matching  source-flavor   Note: In case that a flavor used with  audio-muxing-source-flavors  matches to multiple tracks within the media package resulting in a list of matching tracks, the search order within that list is undefined, i.e. PrepareAVWorkflowOperation will just pick any of those tracks that has audio.",
            "title": "Audio Muxing"
        },
        {
            "location": "/workflowoperationhandlers/prepareav-woh/#example",
            "text": "[...]\n<configuration key=\"source-flavor\">presenter/*</configuration>\n<configuration key=\"audio-muxing-source-flavors\">presenter-audio/?, presentation/?,presentation/*,?/audio,*/*</configuration>\n[...]  Let's assume that exactly one video-only track of flavor presenter/source in the media package and another track of flavor audio/track that has audio.  In this example, the PrepareAVWorkflowOperation would perform the following steps:   Search tracks of flavor presenter-audio/source (presenter-audio/?)  Search tracks of flavor presentation/source (presentation/?)  Search tracks of flavor presentation/*  Search tracks of flavor presenter/audio (?/audio)  Search tracks of flavor */*",
            "title": "Example"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/",
            "text": "ConfigurablePublishWorkflowOperationHandler\n\n\nDescription\n\n\nThe ConfigurablePublishWorkflowOperationHandler will distribute the given elements and create a publication element for it. In default it will retract all publications before publishing the new.\n\n\nParameter Table\n\n\nThese are the keys that are configured through the workflow definition (The files located in /opt/matterhorn/etc/workflows used to process files). At least one mediapackage element must match the supplied source-flavors or source-tags or else the operation won't know what to publish. The channel-id and url-pattern are also mandatory.\n\n\n\n\n\n\n\n\nConfiguration Key\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\nchannel-id\n\n\nIs the id of the channel that this publication will be published to.\n\n\ninternal\n\n\n\n\n\n\nmimetype\n\n\nThe Mimetype (file type) of the published element. If missing it will use the last distributed element.\n\n\ntext/html\n\n\n\n\n\n\nsource-flavors\n\n\nThe flavors of the mediapackage elements to publish.\n\n\n*/trimmed\n\n\n\n\n\n\nsource-tags\n\n\nThe tags of the mediapackage elements to publish.\n\n\nengage-download\n\n\n\n\n\n\nurl-pattern\n\n\nThe pattern to insert the variables into to create the uri for the published element.\n\n\nhttp://api.opencast.org/api/events/${event_id}\n\n\n\n\n\n\nwith-published-elements\n\n\nUse the current contents of the mediapackage instead of publishing elements to a channel\n\n\ntrue\n\n\n\n\n\n\nstrategy\n\n\nStrategy if there is allready published material default is retract\n\n\nfail\n\n\n\n\n\n\nmode\n\n\nControl how elements are distributed: single, mixed or bulk (default: bulk)\n\n\nmixed\n\n\n\n\n\n\n\n\nMode\n\n\nThe configuration key \nmode\n can be used to control how media package elements are being distributed:\n\n\n\n\n\n\n\n\nMode\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nsingle\n\n\nFor each media package element, a job is created\n\n\n\n\n\n\nmixed\n\n\nOne job for all media package elements that are not tracks and one job per track\n\n\n\n\n\n\nbulk\n\n\nOne job for all media package elements\n\n\n\n\n\n\n\n\nThis allows you to choose a lot of jobs and parallelism (\nsingle\n), just one job and no parallelism (\nbulk\n)\nor something in between (\nmixed\n). The best choice depends on your setup.\n\n\nUrl Pattern Variables\n\n\nThese are the variables that are available when you define the url-pattern configuration above. They will be replaced with the value during the running of the workflow operation.\n\n\n\n\n\n\n\n\nVariable\n\n\nDescription\n\n\nExample\n\n\n\n\n\n\n\n\n\n\n${element_uri}\n\n\nSubstitutes the URI of the last mediapackage element if there is more than one, for example if it is a track this will be the URI that matches the internal location of the file.\n\n\nhttp://adminnode.com/files/mediapackage/18633e04-1a3f-4bbb-a72a-99c15deba1b9/cec1f067-9470-4f44-9d5b-9dc0f24df04c/short.mp4\n\n\n\n\n\n\n${event_id}\n\n\nSubstitutes the event's (also known as the mediapackage) id.\n\n\n18633e04-1a3f-4bbb-a72a-99c15deba1b9\n\n\n\n\n\n\n${player_path}\n\n\nSubstitutes the player path for the current organization that is running the workflow.\n\n\n/engage/theodul/ui/core.html?id=\n\n\n\n\n\n\n${publication_id}\n\n\nThe id of this publication.\n\n\n54f6c12d-8e68-4ec8-badf-cd045b33d01e\n\n\n\n\n\n\n${series_id}\n\n\nThe id of the series if available, empty if not.\n\n\n36f3c5d8-ad4d-4dab-beb1-1400ffab4a69\n\n\n\n\n\n\n\n\nOperation Examples\n\n\nPublishing to the Internal Channel\n\n\n<operation\n    id=\"publish-engage\"\n    exception-handler-workflow=\"ng-partial-error\"\n    description=\"Publish to internal channel\">\n    <configurations>\n        <configuration key=\"source-tags\">engage,atom,rss</configuration>\n        <configuration key=\"channel-id\">internal</configuration>\n        <configuration key=\"url-pattern\">http://localhost:8080/admin-ng/index.html#/events/events/${event_id}/tools/playback</configuration>\n    </configurations>\n</operation>\n\n\n\nPublishing as External API\n\n\n<operation\n    id=\"publish-configure\"\n    exception-handler-workflow=\"ng-partial-error\"\n    description=\"Publish to external api publication channel\">\n    <configurations>\n        <configuration key=\"channel-id\">api</configuration>\n        <configuration key=\"mimetype\">application/json</configuration>\n        <configuration key=\"source-tags\">engage-download,engage-streaming</configuration>\n        <configuration key=\"url-pattern\">http://api.opencast.org/api/events/${event_id}</configuration>\n        <configuration key=\"with-published-elements\">true</configuration>\n    </configurations>\n</operation>",
            "title": "Publish Configure"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#configurablepublishworkflowoperationhandler",
            "text": "",
            "title": "ConfigurablePublishWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#description",
            "text": "The ConfigurablePublishWorkflowOperationHandler will distribute the given elements and create a publication element for it. In default it will retract all publications before publishing the new.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#parameter-table",
            "text": "These are the keys that are configured through the workflow definition (The files located in /opt/matterhorn/etc/workflows used to process files). At least one mediapackage element must match the supplied source-flavors or source-tags or else the operation won't know what to publish. The channel-id and url-pattern are also mandatory.     Configuration Key  Description  Example      channel-id  Is the id of the channel that this publication will be published to.  internal    mimetype  The Mimetype (file type) of the published element. If missing it will use the last distributed element.  text/html    source-flavors  The flavors of the mediapackage elements to publish.  */trimmed    source-tags  The tags of the mediapackage elements to publish.  engage-download    url-pattern  The pattern to insert the variables into to create the uri for the published element.  http://api.opencast.org/api/events/${event_id}    with-published-elements  Use the current contents of the mediapackage instead of publishing elements to a channel  true    strategy  Strategy if there is allready published material default is retract  fail    mode  Control how elements are distributed: single, mixed or bulk (default: bulk)  mixed",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#mode",
            "text": "The configuration key  mode  can be used to control how media package elements are being distributed:     Mode  Description      single  For each media package element, a job is created    mixed  One job for all media package elements that are not tracks and one job per track    bulk  One job for all media package elements     This allows you to choose a lot of jobs and parallelism ( single ), just one job and no parallelism ( bulk )\nor something in between ( mixed ). The best choice depends on your setup.",
            "title": "Mode"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#url-pattern-variables",
            "text": "These are the variables that are available when you define the url-pattern configuration above. They will be replaced with the value during the running of the workflow operation.     Variable  Description  Example      ${element_uri}  Substitutes the URI of the last mediapackage element if there is more than one, for example if it is a track this will be the URI that matches the internal location of the file.  http://adminnode.com/files/mediapackage/18633e04-1a3f-4bbb-a72a-99c15deba1b9/cec1f067-9470-4f44-9d5b-9dc0f24df04c/short.mp4    ${event_id}  Substitutes the event's (also known as the mediapackage) id.  18633e04-1a3f-4bbb-a72a-99c15deba1b9    ${player_path}  Substitutes the player path for the current organization that is running the workflow.  /engage/theodul/ui/core.html?id=    ${publication_id}  The id of this publication.  54f6c12d-8e68-4ec8-badf-cd045b33d01e    ${series_id}  The id of the series if available, empty if not.  36f3c5d8-ad4d-4dab-beb1-1400ffab4a69",
            "title": "Url Pattern Variables"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#operation-examples",
            "text": "",
            "title": "Operation Examples"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#publishing-to-the-internal-channel",
            "text": "<operation\n    id=\"publish-engage\"\n    exception-handler-workflow=\"ng-partial-error\"\n    description=\"Publish to internal channel\">\n    <configurations>\n        <configuration key=\"source-tags\">engage,atom,rss</configuration>\n        <configuration key=\"channel-id\">internal</configuration>\n        <configuration key=\"url-pattern\">http://localhost:8080/admin-ng/index.html#/events/events/${event_id}/tools/playback</configuration>\n    </configurations>\n</operation>",
            "title": "Publishing to the Internal Channel"
        },
        {
            "location": "/workflowoperationhandlers/publishconfigure-woh/#publishing-as-external-api",
            "text": "<operation\n    id=\"publish-configure\"\n    exception-handler-workflow=\"ng-partial-error\"\n    description=\"Publish to external api publication channel\">\n    <configurations>\n        <configuration key=\"channel-id\">api</configuration>\n        <configuration key=\"mimetype\">application/json</configuration>\n        <configuration key=\"source-tags\">engage-download,engage-streaming</configuration>\n        <configuration key=\"url-pattern\">http://api.opencast.org/api/events/${event_id}</configuration>\n        <configuration key=\"with-published-elements\">true</configuration>\n    </configurations>\n</operation>",
            "title": "Publishing as External API"
        },
        {
            "location": "/workflowoperationhandlers/publishengage-woh/",
            "text": "PublishEngageWorkflowOperation\n\n\nDescription\n\n\nThe PublishEngageWorkflowOperation will bring your media to the engage distribution channels (streaming, progressive download, \u2026)\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\ncheck-availability\n\n\nCheck if the media if rechable\n\n\n\n\n\n\ndownload-source-flavors\n\n\nSpecifies which media should be published for download\n\n\n\n\n\n\ndownload-source-tags\n\n\nSpecifies which media should be published for download\n\n\n\n\n\n\ndownload-target-subflavors\n\n\nSubflavor to use for distributed material\n\n\n\n\n\n\ndownload-target-tags\n\n\nModify tags of published media\n\n\n\n\n\n\nstrategy\n\n\nIf there is no key, published media would be retracted before publishing\n\n\n\n\n\n\n\n\nmerge\n\n\n\n\n\n\n\n\nmerges new publication with existing publication\n\n\n\n\n\n\nstreaming-source-flavors\n\n\nSpecifies which media should be published to the streaming server\n\n\n\n\n\n\nstreaming-source-tags\n\n\nSpecifies which media should be published to the streaming server\n\n\n\n\n\n\nstreaming-tagret-tags\n\n\nModify tags of published media\n\n\n\n\n\n\nstreaming-target-szbflavors\n\n\nSubflavor to use for distributed material\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n    id=\"publish-engage\"\n    max-attempts=\"2\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Distribute and publish to engage player\">\n    <configurations>\n        <configuration key=\"download-source-tags\">engage,atom,rss</configuration>\n        <configuration key=\"streaming-source-tags\">engage</configuration>\n        <configuration key=\"check-availability\">true</configuration>\n        <configuration key=\"strategy\">merge</configuration>\n    </configurations>\n</operation>",
            "title": "Publish Engage"
        },
        {
            "location": "/workflowoperationhandlers/publishengage-woh/#publishengageworkflowoperation",
            "text": "",
            "title": "PublishEngageWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/publishengage-woh/#description",
            "text": "The PublishEngageWorkflowOperation will bring your media to the engage distribution channels (streaming, progressive download, \u2026)",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/publishengage-woh/#parameter-table",
            "text": "configuration keys  description      check-availability  Check if the media if rechable    download-source-flavors  Specifies which media should be published for download    download-source-tags  Specifies which media should be published for download    download-target-subflavors  Subflavor to use for distributed material    download-target-tags  Modify tags of published media    strategy  If there is no key, published media would be retracted before publishing     merge     merges new publication with existing publication    streaming-source-flavors  Specifies which media should be published to the streaming server    streaming-source-tags  Specifies which media should be published to the streaming server    streaming-tagret-tags  Modify tags of published media    streaming-target-szbflavors  Subflavor to use for distributed material",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/publishengage-woh/#operation-example",
            "text": "<operation\n    id=\"publish-engage\"\n    max-attempts=\"2\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"error\"\n    description=\"Distribute and publish to engage player\">\n    <configurations>\n        <configuration key=\"download-source-tags\">engage,atom,rss</configuration>\n        <configuration key=\"streaming-source-tags\">engage</configuration>\n        <configuration key=\"check-availability\">true</configuration>\n        <configuration key=\"strategy\">merge</configuration>\n    </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/retractconfigure-woh/",
            "text": "ConfigurableRetractWorkflowOperationHandler\n\n\nDescription\n\n\nThe ConfigurableRetractWorkflowOperationHandler retracts the published elements from a configured publication.\n\n\nIf the elements have been added to the Publication using \"with-published-elements\", as in the case with the external api, they haven't actually been published so it is unnecessary to have a retract-configuration. Adding a retraction won't cause any errors, it will just skip those elements.\n\n\nThere is only one configuration key \"channel-id\". This is the channel to remove the published elements from. \n\n\nOperation Examples\n\n\nRetract from Internal Channel\n\n\n<!-- Remove the internal publication if the mediapackage is being deleted. -->\n<operation\n  id=\"retract-configure\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Retract from internal publication channel\">\n  <configurations>\n    <configuration key=\"channel-id\">internal</configuration>\n  </configurations>\n</operation>\n\n\n\nRetract from External API\n\n\n<operation\n  id=\"retract-configure\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Retract from external api publication channel\">\n  <configurations>\n    <configuration key=\"channel-id\">api</configuration>\n  </configurations>\n</operation>",
            "title": "Retract Configure"
        },
        {
            "location": "/workflowoperationhandlers/retractconfigure-woh/#configurableretractworkflowoperationhandler",
            "text": "",
            "title": "ConfigurableRetractWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/retractconfigure-woh/#description",
            "text": "The ConfigurableRetractWorkflowOperationHandler retracts the published elements from a configured publication.  If the elements have been added to the Publication using \"with-published-elements\", as in the case with the external api, they haven't actually been published so it is unnecessary to have a retract-configuration. Adding a retraction won't cause any errors, it will just skip those elements.  There is only one configuration key \"channel-id\". This is the channel to remove the published elements from.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/retractconfigure-woh/#operation-examples",
            "text": "",
            "title": "Operation Examples"
        },
        {
            "location": "/workflowoperationhandlers/retractconfigure-woh/#retract-from-internal-channel",
            "text": "<!-- Remove the internal publication if the mediapackage is being deleted. -->\n<operation\n  id=\"retract-configure\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Retract from internal publication channel\">\n  <configurations>\n    <configuration key=\"channel-id\">internal</configuration>\n  </configurations>\n</operation>",
            "title": "Retract from Internal Channel"
        },
        {
            "location": "/workflowoperationhandlers/retractconfigure-woh/#retract-from-external-api",
            "text": "<operation\n  id=\"retract-configure\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Retract from external api publication channel\">\n  <configurations>\n    <configuration key=\"channel-id\">api</configuration>\n  </configurations>\n</operation>",
            "title": "Retract from External API"
        },
        {
            "location": "/workflowoperationhandlers/segmentpreviews-woh/",
            "text": "SegmentpreviewsWorkflowOperation\n\n\nDescription\n\n\nThe SegmentpreviewsWorkflowOperation will extract still images from a video using FFmpeg, a given encoding profile and previous discovered segments.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresenter/source\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\ntarget-flavor\n\n\npresenter/work\n\n\nSpecifies the flavor the new files will get.\n\n\n\n\n\n\nsource-tags\n\n\nengage\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\ntarget-tags\n\n\nengage\n\n\nSpecifies the tags the new files will get.\n\n\n\n\n\n\nencoding-profile\n\n\nsearch-cover.http\n\n\nThe encoding profile to use.\n\n\n\n\n\n\nreference-flavor\n\n\npresentation/work\n\n\nFlavor of the segments to use.\n\n\n\n\n\n\nreference-tags\n\n\nengage\n\n\nTags of the segments to use.\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n      id=\"segmentpreviews\"\n      fail-on-error=\"false\"\n      exception-handler-workflow=\"error\"\n      description=\"Encoding presentation (screen) to segment preview image\">\n      <configurations>\n            <configuration key=\"source-flavor\">presentation/trimmed</configuration>\n            <configuration key=\"source-tags\"></configuration>\n            <configuration key=\"target-flavor\">presentation/segment+preview</configuration>\n            <configuration key=\"reference-flavor\">presentation/delivery</configuration>\n            <configuration key=\"reference-tags\">engage</configuration>\n            <configuration key=\"target-tags\">engage</configuration>\n            <configuration key=\"encoding-profile\">player-slides.http</configuration>\n      </configurations>\n</operation>",
            "title": "Segment Previews"
        },
        {
            "location": "/workflowoperationhandlers/segmentpreviews-woh/#segmentpreviewsworkflowoperation",
            "text": "",
            "title": "SegmentpreviewsWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/segmentpreviews-woh/#description",
            "text": "The SegmentpreviewsWorkflowOperation will extract still images from a video using FFmpeg, a given encoding profile and previous discovered segments.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/segmentpreviews-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presenter/source  Specifies which media should be processed.    target-flavor  presenter/work  Specifies the flavor the new files will get.    source-tags  engage  Specifies which media should be processed.    target-tags  engage  Specifies the tags the new files will get.    encoding-profile  search-cover.http  The encoding profile to use.    reference-flavor  presentation/work  Flavor of the segments to use.    reference-tags  engage  Tags of the segments to use.",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/segmentpreviews-woh/#operation-example",
            "text": "<operation\n      id=\"segmentpreviews\"\n      fail-on-error=\"false\"\n      exception-handler-workflow=\"error\"\n      description=\"Encoding presentation (screen) to segment preview image\">\n      <configurations>\n            <configuration key=\"source-flavor\">presentation/trimmed</configuration>\n            <configuration key=\"source-tags\"></configuration>\n            <configuration key=\"target-flavor\">presentation/segment+preview</configuration>\n            <configuration key=\"reference-flavor\">presentation/delivery</configuration>\n            <configuration key=\"reference-tags\">engage</configuration>\n            <configuration key=\"target-tags\">engage</configuration>\n            <configuration key=\"encoding-profile\">player-slides.http</configuration>\n      </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/segmentvideo-woh/",
            "text": "SegmentVideoWorkflowOperation\n\n\nDescription\n\n\nThe SegmentVideoWorkflowOperation will try to identify and mark different segments of a video. A new segment is created when a major change in the video occurs. This might be the case for example if the video is a screenrecording and the slides which were shown change.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\n\n\n\n\n\n\n\n\nsource-flavor\n\n\npresentation/trimmed\n\n\nSpecifies which media should be processed.\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n      id=\"segment-video\"\n      fail-on-error=\"false\"\n      exception-handler-workflow=\"error\"\n      description=\"Extracting segments from presentation\">\n      <configurations>\n            <configuration key=\"source-flavor\">presentation/trimmed</configuration>\n      </configurations>\n</operation>",
            "title": "Segment Video"
        },
        {
            "location": "/workflowoperationhandlers/segmentvideo-woh/#segmentvideoworkflowoperation",
            "text": "",
            "title": "SegmentVideoWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/segmentvideo-woh/#description",
            "text": "The SegmentVideoWorkflowOperation will try to identify and mark different segments of a video. A new segment is created when a major change in the video occurs. This might be the case for example if the video is a screenrecording and the slides which were shown change.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/segmentvideo-woh/#parameter-table",
            "text": "configuration keys  example  description      source-flavor  presentation/trimmed  Specifies which media should be processed.",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/segmentvideo-woh/#operation-example",
            "text": "<operation\n      id=\"segment-video\"\n      fail-on-error=\"false\"\n      exception-handler-workflow=\"error\"\n      description=\"Extracting segments from presentation\">\n      <configurations>\n            <configuration key=\"source-flavor\">presentation/trimmed</configuration>\n      </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/series-woh/",
            "text": "SeriesWorkflowOperationHandler\n\n\nDescription\n\n\nThe SeriesWorkflowOperation will apply a series to the mediapackage.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nseries\n\n\n\"0d06537e-09d3-420c-8314-a21e45c5d032\"\n\n\nThe optional series identifier. If empty the current series of the medipackage will be taken.\n\n\nEMPTY\n\n\n\n\n\n\nattach\n\n\n\"creativecommons/*,dublincore/*\"\n\n\nThe flavors of the series catalogs to attach to the mediapackage.\n\n\nEMPTY\n\n\n\n\n\n\napply-acl\n\n\n\"true\"|\"false\"\n\n\nWhether the ACL should be applied or not.\n\n\n\"false\"\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n      id=\"series\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Applying series to mediapackage\">\n      <configurations>\n        <configuration key=\"series\">0d06537e-09d3-420c-8314-a21e45c5d032</configuration>\n        <configuration key=\"attach\">*</configuration>\n        <configuration key=\"apply-acl\">true</configuration>\n      </configurations>\n</operation>",
            "title": "Series"
        },
        {
            "location": "/workflowoperationhandlers/series-woh/#seriesworkflowoperationhandler",
            "text": "",
            "title": "SeriesWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/series-woh/#description",
            "text": "The SeriesWorkflowOperation will apply a series to the mediapackage.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/series-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      series  \"0d06537e-09d3-420c-8314-a21e45c5d032\"  The optional series identifier. If empty the current series of the medipackage will be taken.  EMPTY    attach  \"creativecommons/*,dublincore/*\"  The flavors of the series catalogs to attach to the mediapackage.  EMPTY    apply-acl  \"true\"|\"false\"  Whether the ACL should be applied or not.  \"false\"",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/series-woh/#operation-example",
            "text": "<operation\n      id=\"series\"\n      fail-on-error=\"true\"\n      exception-handler-workflow=\"error\"\n      description=\"Applying series to mediapackage\">\n      <configurations>\n        <configuration key=\"series\">0d06537e-09d3-420c-8314-a21e45c5d032</configuration>\n        <configuration key=\"attach\">*</configuration>\n        <configuration key=\"apply-acl\">true</configuration>\n      </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/silence-woh/",
            "text": "SilenceDetectionWorkflowOperationHandler\n\n\nDescription\n\n\nThe \nsilence\n operation performs a silence detection on an audio-only input file. The operation needs the silence detection API and impl (or remote in a distributed system) modules to be installed to process the request.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-flavors\n\n\n\"*/audio\"\n\n\nThe input parameter source-flavors takes one flavor/sub-type or multiple input flavors with the *-operator followed by the sub-type\n\n\nEMPTY\n\n\n\n\n\n\nreference-tracks-flavour\n\n\n\"*/preview\"\n\n\nThe input parameter reference-tracks-flavour is the subtype of the media files that should be included in the provided SMIL file. The * should not be modified here. In most cases it is not important which reference-tracks-flavour is selected as long as all relevant flavors are available within this feature. \"preview\" is not a bad choice as all files available within the video editor UI are also available with this flavor, unlike \"source\" where not all flavors may be available, as some recorders record all streams to one file and the tracks are separated afterwards. The editor operation afterwards will anyway try to select the best available quality.\n\n\nEMPTY\n\n\n\n\n\n\nsmil-flavor-subtype\n\n\n\"smil\"\n\n\nThe output parameter is smil-flavor-subtype which provides the modificatory for the flavor subtype after this operation. The main flavor will be consistent and only the subtype will be replaced.\n\n\nEMPTY\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"silence\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Executing silence detection\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/audio</configuration>\n    <configuration key=\"smil-flavor-subtype\">smil</configuration>\n    <configuration key=\"reference-tracks-flavor\">*/preview</configuration>\n  </configurations>\n</operation>",
            "title": "Silence"
        },
        {
            "location": "/workflowoperationhandlers/silence-woh/#silencedetectionworkflowoperationhandler",
            "text": "",
            "title": "SilenceDetectionWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/silence-woh/#description",
            "text": "The  silence  operation performs a silence detection on an audio-only input file. The operation needs the silence detection API and impl (or remote in a distributed system) modules to be installed to process the request.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/silence-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      source-flavors  \"*/audio\"  The input parameter source-flavors takes one flavor/sub-type or multiple input flavors with the *-operator followed by the sub-type  EMPTY    reference-tracks-flavour  \"*/preview\"  The input parameter reference-tracks-flavour is the subtype of the media files that should be included in the provided SMIL file. The * should not be modified here. In most cases it is not important which reference-tracks-flavour is selected as long as all relevant flavors are available within this feature. \"preview\" is not a bad choice as all files available within the video editor UI are also available with this flavor, unlike \"source\" where not all flavors may be available, as some recorders record all streams to one file and the tracks are separated afterwards. The editor operation afterwards will anyway try to select the best available quality.  EMPTY    smil-flavor-subtype  \"smil\"  The output parameter is smil-flavor-subtype which provides the modificatory for the flavor subtype after this operation. The main flavor will be consistent and only the subtype will be replaced.  EMPTY",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/silence-woh/#operation-example",
            "text": "<operation\n  id=\"silence\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Executing silence detection\">\n  <configurations>\n    <configuration key=\"source-flavors\">*/audio</configuration>\n    <configuration key=\"smil-flavor-subtype\">smil</configuration>\n    <configuration key=\"reference-tracks-flavor\">*/preview</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/tag-woh/",
            "text": "TagWorkflowOperation\n\n\nDescription\n\n\nWith the TagWorkflowOperationHandler it's possible to select various media package elements and then modify their tag set and / or set their flavor.\n\n\nSo for example it's possible to pick up elements like the dublin core catalogs that have been added to the media package at the beginning of the workflow and tag them, so they can be picked up by operations later on.\n\n\nParameter Table\n\n\nTags and flavors can be used in combination.\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-tags\n\n\n\"engage,atom,rss,-publish\"\n\n\nTag any media package elements with one of these (comma separated) tags. If a source-tag starts with a '-', media package elements with this tag will be excluded.\n\n\nEMPTY\n\n\n\n\n\n\nsource-flavors\n\n\n\"presentation/trimmed\"\n\n\nTag any media package elements with one of these (comma separated) flavors.\n\n\nEMPTY\n\n\n\n\n\n\ntarget-tags\n\n\n\"tagged,+rss\" / \"-rss,+tagged\"\n\n\nApply these (comma separated) tags to any media package elements. If a target-tag starts with a '-', it will be removed from preexisting tags, if a target-tag starts with a '+', it will be added to preexisting tags. If there is no prefix, all preexisting tags are removed and replaced by the target-tags.\n\n\nEMPTY\n\n\n\n\n\n\ntarget-flavor\n\n\n\"presentation/tagged\"\n\n\nApply these flavor to any media package elements\n\n\nEMPTY\n\n\n\n\n\n\ncopy\n\n\n\"true\" or \"false\"\n\n\nIndicates if matching elements will be cloned before tagging is applied or whether tagging is applied to the original element. Set to \"true\" to create a copy first, \"false\" otherwise.\n\n\nFALSE\n\n\n\n\n\n\n\n\nTarget Tags Example\n\n\n\n\n\n\n\n\nTarget-Tags\n\n\nPreexisting Tags\n\n\nResulting Tags\n\n\n\n\n\n\n\n\n\n\nrss\n\n\nengage\n\n\nrss\n\n\n\n\n\n\n+rss\n\n\nengage\n\n\nengage,rss\n\n\n\n\n\n\n-rss\n\n\nengage,rss\n\n\nengage\n\n\n\n\n\n\ntagged,+rss\n\n\nengage\n\n\ntagged\n\n\n\n\n\n\n-rss,+tagged\n\n\nengage,rss\n\n\nengage,tagged\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"tag\"\n  max-attempts=\"2\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Tagging media package elements\">\n  <configurations>\n    <configuration key=\"source-tags\">engage,atom,-publish</configuration>\n    <configuration key=\"source-flavors\">presentation/trimmed</configuration>\n    <configuration key=\"target-tags\">-atom,+rss</configuration>\n    <configuration key=\"target-flavor\">presentation/tagged</configuration>\n    <configuration key=\"copy\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Tag"
        },
        {
            "location": "/workflowoperationhandlers/tag-woh/#tagworkflowoperation",
            "text": "",
            "title": "TagWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/tag-woh/#description",
            "text": "With the TagWorkflowOperationHandler it's possible to select various media package elements and then modify their tag set and / or set their flavor.  So for example it's possible to pick up elements like the dublin core catalogs that have been added to the media package at the beginning of the workflow and tag them, so they can be picked up by operations later on.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/tag-woh/#parameter-table",
            "text": "Tags and flavors can be used in combination.     configuration keys  example  description  default value      source-tags  \"engage,atom,rss,-publish\"  Tag any media package elements with one of these (comma separated) tags. If a source-tag starts with a '-', media package elements with this tag will be excluded.  EMPTY    source-flavors  \"presentation/trimmed\"  Tag any media package elements with one of these (comma separated) flavors.  EMPTY    target-tags  \"tagged,+rss\" / \"-rss,+tagged\"  Apply these (comma separated) tags to any media package elements. If a target-tag starts with a '-', it will be removed from preexisting tags, if a target-tag starts with a '+', it will be added to preexisting tags. If there is no prefix, all preexisting tags are removed and replaced by the target-tags.  EMPTY    target-flavor  \"presentation/tagged\"  Apply these flavor to any media package elements  EMPTY    copy  \"true\" or \"false\"  Indicates if matching elements will be cloned before tagging is applied or whether tagging is applied to the original element. Set to \"true\" to create a copy first, \"false\" otherwise.  FALSE",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/tag-woh/#target-tags-example",
            "text": "Target-Tags  Preexisting Tags  Resulting Tags      rss  engage  rss    +rss  engage  engage,rss    -rss  engage,rss  engage    tagged,+rss  engage  tagged    -rss,+tagged  engage,rss  engage,tagged",
            "title": "Target Tags Example"
        },
        {
            "location": "/workflowoperationhandlers/tag-woh/#operation-example",
            "text": "<operation\n  id=\"tag\"\n  max-attempts=\"2\"\n  fail-on-error=\"true\"\n  exception-handler-workflow=\"error\"\n  description=\"Tagging media package elements\">\n  <configurations>\n    <configuration key=\"source-tags\">engage,atom,-publish</configuration>\n    <configuration key=\"source-flavors\">presentation/trimmed</configuration>\n    <configuration key=\"target-tags\">-atom,+rss</configuration>\n    <configuration key=\"target-flavor\">presentation/tagged</configuration>\n    <configuration key=\"copy\">true</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/theme-woh/",
            "text": "ThemeWorkflowOperationHandler\n\n\nDescription\n\n\nThe ThemeWorkflowOperation loads workflow properties and adds elements to the media package if available. \nThis information can be used within workflow definitions to actually implement themes.\n\n\nBumpers\n\n\nThe property \ntheme_bumper_active\n indicates whether the theme defines a bumper video. If true, the bumper video\nis added to the media package with the flavor \nbumper-flavor\n and/or tag \nbumper-tag\n.\n\n\nTrailers\n\n\nThe property \ntheme_trailer_active\n indicates whether the theme defines a trailer video. If true, the trailer video\nis added to the media package with the flavor \ntrailer-flavor\n and/or tag \ntrailer-tag\n.\n\n\nTitle Slide\n\n\nThe property \ntheme_title_slide_active\n indicates whether the theme defines a title slide. Additionally, the\nproperty \ntheme_title_slide_uploaded\n indicates whether the image needed as background for the generation\nof the title slide should be extracted from a video track or has been uploaded. In the later case,\nthe background image is added to the media package with the flavor \ntitle-slide-flavor\n and/or tag \ntitle-slide-tag\n.\n\n\nWorkflow Properties\n\n\nThe ThemeWorkflowOperation will set the following workflow properties:\n\n\n\n\n\n\n\n\nProperty Name\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\ntheme_bumper_active\n\n\ntrue if the theme has an active bumper video, false otherwise\n\n\n\n\n\n\ntheme_trailer_active\n\n\ntrue if the theme has an active trailer video, false otherwise\n\n\n\n\n\n\ntheme_title_slide_active\n\n\ntrue if the theme has an active title slide, false otherwise\n\n\n\n\n\n\ntheme_title_slide_uploaded\n\n\ntrue if the theme come with an uploaded title slide, false otherwise\n\n\n\n\n\n\n\n\nParameter Table\n\n\n\n\n\n\n\n\nConfiguration Keys\n\n\nExample\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\n*bumper-flavor\n\n\nbranding/bumper\n\n\nFlavor of the bumper video\n\n\n\n\n\n\n*bumper-tags\n\n\nbumper\n\n\nTag of of the bumper video\n\n\n\n\n\n\n*trailer-flavor\n\n\nbranding/trailer\n\n\nFlavor of the trailer video\n\n\n\n\n\n\n*trailer-tags\n\n\ntrailer\n\n\nTag of the trailer video\n\n\n\n\n\n\n*title-slide-flavor\n\n\nbranding/titleslide\n\n\nFlavor of the title slide image\n\n\n\n\n\n\n*title-slide-tag\n\n\ntitleslide\n\n\nTag of the title slide image\n\n\n\n\n\n\n\n\n* Mandatory configuration key\n\n\nOperation Example\n\n\n<operation\n  id=\"theme\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Apply the theme\">\n  <configurations>\n    <configuration key=\"bumper-flavor\">branding/bumper</configuration>\n    <configuration key=\"bumper-tags\">archive</configuration>\n    <configuration key=\"trailer-flavor\">branding/trailer</configuration>\n    <configuration key=\"trailer-tags\">archive</configuration>\n    <configuration key=\"title-slide-flavor\">branding/titleslide</configuration>\n    <configuration key=\"title-slide-tags\">archive</configuration>\n  </configurations>\n</operation>",
            "title": "Theme"
        },
        {
            "location": "/workflowoperationhandlers/theme-woh/#themeworkflowoperationhandler",
            "text": "",
            "title": "ThemeWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/theme-woh/#description",
            "text": "The ThemeWorkflowOperation loads workflow properties and adds elements to the media package if available. \nThis information can be used within workflow definitions to actually implement themes.  Bumpers  The property  theme_bumper_active  indicates whether the theme defines a bumper video. If true, the bumper video\nis added to the media package with the flavor  bumper-flavor  and/or tag  bumper-tag .  Trailers  The property  theme_trailer_active  indicates whether the theme defines a trailer video. If true, the trailer video\nis added to the media package with the flavor  trailer-flavor  and/or tag  trailer-tag .  Title Slide  The property  theme_title_slide_active  indicates whether the theme defines a title slide. Additionally, the\nproperty  theme_title_slide_uploaded  indicates whether the image needed as background for the generation\nof the title slide should be extracted from a video track or has been uploaded. In the later case,\nthe background image is added to the media package with the flavor  title-slide-flavor  and/or tag  title-slide-tag .",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/theme-woh/#workflow-properties",
            "text": "The ThemeWorkflowOperation will set the following workflow properties:     Property Name  Description      theme_bumper_active  true if the theme has an active bumper video, false otherwise    theme_trailer_active  true if the theme has an active trailer video, false otherwise    theme_title_slide_active  true if the theme has an active title slide, false otherwise    theme_title_slide_uploaded  true if the theme come with an uploaded title slide, false otherwise",
            "title": "Workflow Properties"
        },
        {
            "location": "/workflowoperationhandlers/theme-woh/#parameter-table",
            "text": "Configuration Keys  Example  Description      *bumper-flavor  branding/bumper  Flavor of the bumper video    *bumper-tags  bumper  Tag of of the bumper video    *trailer-flavor  branding/trailer  Flavor of the trailer video    *trailer-tags  trailer  Tag of the trailer video    *title-slide-flavor  branding/titleslide  Flavor of the title slide image    *title-slide-tag  titleslide  Tag of the title slide image     * Mandatory configuration key",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/theme-woh/#operation-example",
            "text": "<operation\n  id=\"theme\"\n  exception-handler-workflow=\"ng-partial-error\"\n  description=\"Apply the theme\">\n  <configurations>\n    <configuration key=\"bumper-flavor\">branding/bumper</configuration>\n    <configuration key=\"bumper-tags\">archive</configuration>\n    <configuration key=\"trailer-flavor\">branding/trailer</configuration>\n    <configuration key=\"trailer-tags\">archive</configuration>\n    <configuration key=\"title-slide-flavor\">branding/titleslide</configuration>\n    <configuration key=\"title-slide-tags\">archive</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/waveform-woh/",
            "text": "WaveformWorkflowOperationHandler\n\n\nDescription\n\n\nThe waveform operation creates an image showing the temporal audio activity within the recording. This is be done with a probably well known waveform (see example image).\n\n\nThe operation does not need an additional module, as it is not very work intensive to create such an image. The operation needs and audio-only file to create the image and it provides an PNG image.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nsource-flavors\n\n\n\"*/audio\"\n\n\nInput parameter is the source-flavor of the audio files for which a waveform should be created. The *-operator can be used if the waveform should be created for all flavors with a certain subtypes (like \"audio\" in our example).\n\n\nEMPTY\n\n\n\n\n\n\ntarget-flavor\n\n\n\"*/waveform\"\n\n\nThe output-parameter is target-flavor which should use the *-operator if it was used in the source-flavor too.\n\n\nEMPTY\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n  id=\"waveform\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Generating waveform\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/audio</configuration>\n    <configuration key=\"target-flavor\">*/waveform</configuration>\n  </configurations>\n</operation>",
            "title": "Waveform"
        },
        {
            "location": "/workflowoperationhandlers/waveform-woh/#waveformworkflowoperationhandler",
            "text": "",
            "title": "WaveformWorkflowOperationHandler"
        },
        {
            "location": "/workflowoperationhandlers/waveform-woh/#description",
            "text": "The waveform operation creates an image showing the temporal audio activity within the recording. This is be done with a probably well known waveform (see example image). \nThe operation does not need an additional module, as it is not very work intensive to create such an image. The operation needs and audio-only file to create the image and it provides an PNG image.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/waveform-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      source-flavors  \"*/audio\"  Input parameter is the source-flavor of the audio files for which a waveform should be created. The *-operator can be used if the waveform should be created for all flavors with a certain subtypes (like \"audio\" in our example).  EMPTY    target-flavor  \"*/waveform\"  The output-parameter is target-flavor which should use the *-operator if it was used in the source-flavor too.  EMPTY",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/waveform-woh/#operation-example",
            "text": "<operation\n  id=\"waveform\"\n  if=\"${trimHold}\"\n  fail-on-error=\"false\"\n  description=\"Generating waveform\">\n  <configurations>\n    <configuration key=\"source-flavor\">*/audio</configuration>\n    <configuration key=\"target-flavor\">*/waveform</configuration>\n  </configurations>\n</operation>",
            "title": "Operation Example"
        },
        {
            "location": "/workflowoperationhandlers/zip-woh/",
            "text": "ZipWorkflowOperation\n\n\nDescription\n\n\nThe ZipWorkflowOperationHandler creates a zip archive including all elements of the current mediapackage that are specified in the operation configuration. It then adds the archive to the mediapackage as an attachment with the given flavor and tags and by default stores the zip file in the working file repository's \"zip\" collection.\n\n\nParameter Table\n\n\n\n\n\n\n\n\nconfiguration keys\n\n\nexample\n\n\ndescription\n\n\ndefault value\n\n\n\n\n\n\n\n\n\n\nzip-collection\n\n\nzips\n\n\nA comma separated list of flavors to preserve from deleting.\n\n\nzip\n\n\n\n\n\n\ninclude-flavors\n\n\n\"\n/source,dublincore/\n\"\n\n\nWhich elements to include in the archive. This configuration parameter accepts exact flavors like \"presenter/source\" as well as wildcard flavor definitions like \"*/source\".\n\n\n(all)\n\n\n\n\n\n\ntarget-flavor\n\n\n\"archive/zip\"\n\n\nThe flavor of the created attachment.\n\n\narchive/zip\n\n\n\n\n\n\ntarget-tags\n\n\n\"archive\"\n\n\nThe tags to apply to the attachment.\n\n\n-\n\n\n\n\n\n\ncompression\n\n\n\"true\"\n\n\nWhether to compress the archive content. Usually, for media content this doesn't reduce size of the archive by a lot but adds significant processing time by the compression.\n\n\nFALSE\n\n\n\n\n\n\n\n\nOperation Example\n\n\n<operation\n    id=\"zip\"\n    description=\"Creating zipped recording archive\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"cleanup\">\n    <configurations>\n      <configuration key=\"zip-collection\">failed.zips</configuration>\n      <configuration key=\"include-flavors\">*/source,dublincore/*</configuration>\n      <configuration key=\"target-flavor\">all/zip</configuration>\n      <configuration key=\"compression\">false</configuration>\n    </configurations>\n</operation>",
            "title": "Zip"
        },
        {
            "location": "/workflowoperationhandlers/zip-woh/#zipworkflowoperation",
            "text": "",
            "title": "ZipWorkflowOperation"
        },
        {
            "location": "/workflowoperationhandlers/zip-woh/#description",
            "text": "The ZipWorkflowOperationHandler creates a zip archive including all elements of the current mediapackage that are specified in the operation configuration. It then adds the archive to the mediapackage as an attachment with the given flavor and tags and by default stores the zip file in the working file repository's \"zip\" collection.",
            "title": "Description"
        },
        {
            "location": "/workflowoperationhandlers/zip-woh/#parameter-table",
            "text": "configuration keys  example  description  default value      zip-collection  zips  A comma separated list of flavors to preserve from deleting.  zip    include-flavors  \" /source,dublincore/ \"  Which elements to include in the archive. This configuration parameter accepts exact flavors like \"presenter/source\" as well as wildcard flavor definitions like \"*/source\".  (all)    target-flavor  \"archive/zip\"  The flavor of the created attachment.  archive/zip    target-tags  \"archive\"  The tags to apply to the attachment.  -    compression  \"true\"  Whether to compress the archive content. Usually, for media content this doesn't reduce size of the archive by a lot but adds significant processing time by the compression.  FALSE",
            "title": "Parameter Table"
        },
        {
            "location": "/workflowoperationhandlers/zip-woh/#operation-example",
            "text": "<operation\n    id=\"zip\"\n    description=\"Creating zipped recording archive\"\n    fail-on-error=\"true\"\n    exception-handler-workflow=\"cleanup\">\n    <configurations>\n      <configuration key=\"zip-collection\">failed.zips</configuration>\n      <configuration key=\"include-flavors\">*/source,dublincore/*</configuration>\n      <configuration key=\"target-flavor\">all/zip</configuration>\n      <configuration key=\"compression\">false</configuration>\n    </configurations>\n</operation>",
            "title": "Operation Example"
        }
    ]
}