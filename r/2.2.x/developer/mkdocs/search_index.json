{
    "docs": [
        {
            "location": "/",
            "text": "Opencast Development Guides\n\n\nThese guides will help you if you want to participate in Opencast development.\n\n\n\n\nDevelopment Process\n\n\nReviewing, Merging and Declining Pull Requests\n\n\nRelease Manager\n\n\n\n\n\n\nDevelopment Environment\n\n\nProposal Log\n\n\nLicenses and Legal Matters\n\n\nLocalization\n\n\nPackaging Guidelines\n\n\nModules\n\n\nAdmin UI\n\n\nStream Security\n\n\n\u2026\n\n\n\n\n\n\nProject Infrastructure\n\n\nNexus Maven Repository",
            "title": "Home"
        },
        {
            "location": "/#opencast-development-guides",
            "text": "These guides will help you if you want to participate in Opencast development.   Development Process  Reviewing, Merging and Declining Pull Requests  Release Manager    Development Environment  Proposal Log  Licenses and Legal Matters  Localization  Packaging Guidelines  Modules  Admin UI  Stream Security  \u2026    Project Infrastructure  Nexus Maven Repository",
            "title": "Opencast Development Guides"
        },
        {
            "location": "/development-process/",
            "text": "Development Process\n\n\nThis document defines rules and recommendations for Opencast development. In particular, it defines how patches can be\ncontributed, how they are merged and how releases are done.\n\n\nIf this document does not answer all of your questions, here is how you can get further help:\n\n\n\n\nAsk on the \nOpencast Development List\n\n\nChat with developers on \nIRC (#opencast on freenode)\n\n\nJoin our weekly technical meeting (see lists or IRC)\n\n\n\n\nContributing Code\n\n\nOpencast sources can be found on \nBitBucket\n. The easiest way to contribute\ncode to the project is by creating a pull request against the project's official repository. More details about the\nstructure of this repository are explained later in this guide.\n\n\nJira and BitBucket\n\n\n\n\n\n\nOpencast uses \nJira\n for tracking issues. Each pull request should be accompanied by a\n   ticket in Jira. The issue identifier should also be used in the title of the pull request and the commits. E.g.:\n   \nMH-12345, Fixing Something Somewhere\n. Creating a Jira ticket is usually the first step when fixing something.\n\n\n\n\n\n\nOpencast uses \nBitBucket\n for code hosting. Please\n   \nfork\n the official\n   repository on BitBucket to \ncreate pull\n   requests\n from your repository\n   which will show up on the project's list of open pull requests.\n\n\n\n\n\n\nAll open pull requests are listed on the \nOpencast Pull Request Filter\n. It might\n   take a couple of minutes for a new pull request to show up.\n\n\n\n\n\n\nBugfix vs Feature\n\n\nOpencast distinguishes between bug fix and feature pull requests.\n\n\n\n\n\n\nFeatures are \nonly\n allowed to be merged into \ndevelop\n, which will let them automatically become part of the next\n   major/minor release, given that the release branch for the next release has not been cut yet. If possible, please\n   name branches containing features according to the pattern \nf/MH-XXXXX-short-description\n, where MH-XXXXX is the\n   relevant Jira ticket.\n\n\n\n\n\n\nBug fixes can be merged both into \ndevelop\n and into release branches. If possible, please name branches containing\n   bug fixes according to the pattern \nt/MH-XXXXX-short-description\n, where MH-XXXXX is the relevant Jira ticket.\n\n\n\n\n\n\nReviews\n\n\nBefore a patch is merged, it needs to be reviewed by a committer. The reviewer makes sure that the patch merges\nwithout conflicts, that it works as expected and that it does not break anything else.\n\n\nIf the reviewer discovers any kind of issue, he should comment on the pull request in BitBucket, so that the author can\nfix the problem.\n\n\nFor more details about the review and merge process, have a look at \nReviewing, Merging and Declining Pull\nRequests\n.\n\n\nCoding Rules\n\n\nMaven will automatically check for coding style violations and interrupt the process if it founds any, displaying a\nmessage about it. Apart from that, here are some general rules:\n\n\nJava:\n\n\n\n\nIndentation is done with exactly two spaces\n\n\nNo line of code should be wider than 120 columns\n\n\nAvoid trailing spaces\n\n\nAvoid unnecessary code style changes\n\n\n\n\nGit Repository Branching Model\n\n\nWhile the Opencast repository and branching model is inspired by\n\nGitFlow\n, there have been some distinct changes to how release\nbranches are used and releases are tagged. The purpose of this is mainly to support multiple, simultaneous versions and\nmaintenance releases.\n\n\nSwift overview:\n\n\n\n\nThe \ndevelop\n branch represents the latest state of development. Features may be merged into this branch and into\n   this branch only. Release branches are branched off from \ndevelop\n. It is basically the preparation for the next big\n   release at all times.\n\n\nThe release branches are named \nr/<a>.<b>.x\n (e.g. \nr/1.6.x\n). They are the latest state of development for a\n   specific release. Only bug fixes and no features may be added to these branches. All beta versions, release\n   candidates and final releases are made from these branches. The branch lives on as long as there may be additional\n   maintenance releases for a given version.\n\n\nGit tags are created to indicate official releases. These may be:\n\n\nx.y.z-betaX\n marks a beta release. This is usually a version which may still have bugs but is good enough for\n  testing, so that further issues or bugs can be identified before an actual release.\n\n\nx.y.z-rcX\n marks a release candidate. This is a version that seems to be ready to be released as a final\n  version. It will become the final version if testing does not reveal any severe issues.\n\n\nx.y.z\n marks a final release.\n\n\n\n\n\n\n\n\nTo get a closer look at the branching model, let us consider a simple example with a single release:\n\n\ndevelop ---*----*----*------*------- ... -----------*-->\n            \\       /      /                       /\n    r/1.6.x  *-----*------*-------------*---------*----- ... ---*-->\n                           \\             \\         \\             \\\n                1.6.0-beta1 *   1.6.0-rc1 *   1.6.0 *       1.6.1 *\n\n\n\nAs described above, \ndevelop\n is the branch used for preparing the next version. At some point marked in the release\nschedule, the release branch is cut from \ndevelop\n. This action also marks the feature freeze for such Opencast version,\ni.e. the moment when no new features will be included in that specific version. This is because all the new features\nmust be merged only into the \ndevelop\n branch; therefore, the release branches (such as \nr/1.6.x\n in our example) can\nonly contain features that were merged before the branch was forked off. Any features merged after the creation of the\nrelease branch can only make it into the next release, but not into this one.\n\n\nAfter the release branch is cut, the development on the \ndevelop\n branch may continue as before. Features can (and\nshould) be merged without waiting for the next version to be released. Thus, the creation of a release branch also marks\nthe beginning of the development for the next version.\n\n\nIn contrast to that, only bug fixes can be merged in the release branch. At this point, the code contained in this\nbranch should be tested, so that bugs can be identified and fixed. The release manager can tag different beta versions\nduring the QA process (such as \n1.6.0-beta1\n) to mark the code evolution as bug fixes are merged. Once the branch status\nseems to be stable enough to be released, a release candidate (RC) is tagged and tested (\n1.6.0-rc1\n). New RCs can be\ntagged as long as new issues are found and fixed. When no severe issues are found, the final release is tagged.\n\n\nDuring the whole process the release manager will regularly merge back the release branch into \ndevelop\n so that bug\nfixes from the release branch will automatically become part of \ndevelop\n and the next Opencast version, without having\nto create an additional pull request. This is continued until the release branch for the next version is cut.\n\n\nThe releases themselves are not part of the release branch. Instead, the release manager branches off, makes the\nnecessary changes to the pom files (and possibly the UI) and creates a separate tagged commit.\n\n\nFinally, after a release is done, more bug fixes may be added to the release branch. The release manager should identify\nif there are enough commits to be put into a maintenance release.\n\n\nEven after an Opencast version has been released, more bugs may be found and fixes for them merged in the release\nbranch. When the release manager considers that the number or importance of such bug fixes is sufficient, he may decide\nto create a new maintenance release. The version \n1.6.1\n above is an example of that.\n\n\nThe branching structure for multiple versions does not look much more complicated:\n\n\ndevelop  -----*---------*----*------------------------*------>\n               \\       /    / \\                      /\n        r/1.5.x *-----*----*------------*--->       /\n                       \\        \\        \\         /\n                  1.5.0 *        \\  1.5.1 *       /\n                                  \\              /\n                           r/1.6.x *------------*----->\n                                                 \\\n                                            1.6.0 *\n\n\n\nAs you can see, the same principle, the same structure and the same rules apply. The only noteworthy thing is that,\nafter a new release branch is cut, the old release branch will not be merged back into \ndevelop\n. This means that when\na bug fix is relevant to several releases, a different pull request should be created for each of the release branches.\n\n\nRelease Process\n\n\nAs indicated above, the release cycle of a new Opencast version starts when a release branch is cut. The new features\nmerged into \ndevelop\n afterwards will be part of the next version, but not the one just cut.\n\n\nThis is why the position of release manager for the next Opencast version should be assigned at this point. The current\nrelease manager should therefore ask for volunteers in the mailing lists. For more details about the rights and\nresponsibilities of a release manager, please have a look at the \nRelease Manager Guide\n.\n\n\nPreparations\n\n\nThe first phase of the release consists of adding new features and defining the release schedule. It is the duty of the\nrelease manager to orchestrate this. This does not necessarily mean that release managers merge or review pull requests,\nbut that they talk to developers and ensure the merge process is driven forward.\n\n\nRelease Schedule\n\n\nReleases should happen twice a year, usually within a time span of 9.5 months between the cut of the previous release\nbranch and the final release. The release manager should create a release schedule as soon as possible, identifying when\nthe release branch is cut and when the final release will happen. Additionally, he should coordinate with the QA manager\nto identify phases for internal and public testing.\n\n\nUsually a release schedule will look like this:\n\n\nOctober 1st                     Cutting the release branch\nOctober 1st - 22nd              Internal QA phase\nOctober 22nd-November 5th       Public QA phase\nNovember 5th - 26th             Additional bug fixing phase\nNovember 26th - December 10th   Final QA phase (*)\nDecember 15th                   Release of Opencast x.y\n\n\n\n(*) marks the phase where the release is apparently ready to go and has no release blockers left. The additional time is\nto ensure that there is time to fix any serious bug found during this final phase.\n\n\nRelease Branch\n\n\nThe release branch is created from \ndevelop\n. The release branch is named \nr/A.B.x\n (e.g. \nr/2.1.x\n) to indicate that it\nis the origin of all releases with the major and minor version of \nA.B\n. The creation of the release branch marks the\nfeature freeze for a given version, as no more features can be merged into a release branch.\n\n\nTo ensure that all fixes that go into the release branch will become part of \ndevelop\n (and thus part of the next version\nof Opencast) with a minimum amount of work, the release manager will merge the release branch into \ndevelop\n on a\nregular basis. He may request assistance from certain developers in case of merge conflicts. This process continues until\nthe next release branch is cut.\n\n\nTags\n\n\nGit tags are used to mark explicit Opencast versions or releases. Here is how a release should look like in the history:\n\n\nr/A.B.x  ------------(A)---->\n                       \\\n           A.B.0-beta1 (B)\n\n\n\nTo create a version based on a given state of the release branch (commit A), the release manager will branch off from\nthis commit, make the necessary version changes to all \npom.xml\n files and to the UI and create a commit and a \nsigned\n\ngit tag on this commit. He would then push the commit and the tag (not the branch) to the community repository.\n\n\nFore more details about how to create release, have a look at the \nRelease Manager Guide\n.\n\n\nBeta Versions/Release Candidates\n\n\nA beta release (\nA.B.C-betaX\n) should be cut before the public QA phase. It indicates a specific version of Opencast for\nusers to test. It is expected to still have bugs. Beta releases should continue until all bugs with a severity of\n\nBlocker\n have been fixed.\n\n\nIf the code seems to be ready for a release, a \nrelease candidate\n (\nA.B.C-rcX\n) should be cut for final testing. The\ncommit from which a release candidate is created is expected to become the final release if no severe bugs are found.\n\n\nFinal Release\n\n\nOnce a release candidate seems to be stable during the QA phase (no issues left marked as \nBlocker\n), the release manager\nwill propose this release candidate to become the final release. If the proposal is approved (i.e. no serious bugs are\nfound before the proposal deadline is met), the final release is then created from the same commit the\nrelease candidate was cut from.\n\n\nMaintenance Releases\n\n\nAfter a final release, additional issues may show up. These issues may be fixed on the ongoing release branch and at\nsome point released as maintenance release.\n\n\nThere is usually no release schedule for maintenance releases. It is up to the release manager to decide when it is\nworthwhile to create a maintenance release with the fixes for bugs affecting a given release. He would then announce his\nintention to create such a release, cut a release candidate and, should no severe issues with this candidate show up, cut\nthe maintenance release.\n\n\nQuality Assurance\n\n\nAs any piece of software, Opencast may contain bugs. It is the duty of the whole community to identify these bugs,\nreport them and possibly fix them to improve Opencast as product.\n\n\nAdditionally, before releasing a new version of Opencast, the current release manager and quality assurance manager will\ncoordinate test phases dedicated to new releases in order to identify possible problems ahead of time. The whole\ncommunity will be requested to participate in this testing.\n\n\nReporting Bugs\n\n\nIf you identify any bugs, please report them! To do that, register yourself in the \nOpencast\nJira\n and create a new ticket. Please describe in detail how to reproduce the problem and\nespecially set the \nAffects Version\n and \"Fix Version\", where \nFix Version\n should be the next Opencast release.\n\n\nIf in doubt of any items in the ticket, please assign it for review to either the current release manager or to the\nquality assurance manager. They will check the issue fields and adjust \nfix version\n, \nseverity\n, etc. if necessary.\n\n\nSecurity Issues\n\n\nIf you discover a problem that has severe implications for system security, please do not publish these information on\nlist. Instead, send a report of the problem to \nsecurity@opencast.org\n. The message will be forwarded to the private\ncommitters list, where the issue will be discussed. Once a patch for the problem is ready, a security notice will be\nreleased along with it.\n\n\nUnit Tests\n\n\nAll Opencast modules should have built-in unit tests to check that they are actually doing what they are supposed to do\nand that code patches do not break the existing functionality. These tests are automatically run whenever the project is\nbuilt. If building repeatedly fails due to test failures, then something is most likely wrong. Please report this as a\nsevere bug.\n\n\nUser Tests\n\n\nBefore each major release, the release and quality assurance managers will ask the whole community to participate in\nthe execution of a set of manual tests. These tests are designed to check that important functionalities of Opencast\nwork as expected even if users are in slightly different environments or choose different methods to achieve a certain\ngoal.\n\n\nSuch a call for participation will usually be raised both on the lists, the technical and the adopters meeting.  If it\nis possible for you to participate, please do so. Identifying possible problems early will immensely benefit the release\nprocess.\n\n\nTest Server\n\n\nSome institutions provide public testing infrastructure for Opencast. Use them to try out the most recent development\nversion of Opencast. They are meant for testing. Do not fear to break them.  If you manage to do it, please contact the\nQA manager or send a notice to the list.\n\n\nRemember that they are usually not running a stable version of Opencast but the latest development release (beta version\nor release candidate) instead. If you discover any bugs on these systems, please take a minute to report them.",
            "title": "Development"
        },
        {
            "location": "/development-process/#development-process",
            "text": "This document defines rules and recommendations for Opencast development. In particular, it defines how patches can be\ncontributed, how they are merged and how releases are done.  If this document does not answer all of your questions, here is how you can get further help:   Ask on the  Opencast Development List  Chat with developers on  IRC (#opencast on freenode)  Join our weekly technical meeting (see lists or IRC)",
            "title": "Development Process"
        },
        {
            "location": "/development-process/#contributing-code",
            "text": "Opencast sources can be found on  BitBucket . The easiest way to contribute\ncode to the project is by creating a pull request against the project's official repository. More details about the\nstructure of this repository are explained later in this guide.",
            "title": "Contributing Code"
        },
        {
            "location": "/development-process/#jira-and-bitbucket",
            "text": "Opencast uses  Jira  for tracking issues. Each pull request should be accompanied by a\n   ticket in Jira. The issue identifier should also be used in the title of the pull request and the commits. E.g.:\n    MH-12345, Fixing Something Somewhere . Creating a Jira ticket is usually the first step when fixing something.    Opencast uses  BitBucket  for code hosting. Please\n    fork  the official\n   repository on BitBucket to  create pull\n   requests  from your repository\n   which will show up on the project's list of open pull requests.    All open pull requests are listed on the  Opencast Pull Request Filter . It might\n   take a couple of minutes for a new pull request to show up.",
            "title": "Jira and BitBucket"
        },
        {
            "location": "/development-process/#bugfix-vs-feature",
            "text": "Opencast distinguishes between bug fix and feature pull requests.    Features are  only  allowed to be merged into  develop , which will let them automatically become part of the next\n   major/minor release, given that the release branch for the next release has not been cut yet. If possible, please\n   name branches containing features according to the pattern  f/MH-XXXXX-short-description , where MH-XXXXX is the\n   relevant Jira ticket.    Bug fixes can be merged both into  develop  and into release branches. If possible, please name branches containing\n   bug fixes according to the pattern  t/MH-XXXXX-short-description , where MH-XXXXX is the relevant Jira ticket.",
            "title": "Bugfix vs Feature"
        },
        {
            "location": "/development-process/#reviews",
            "text": "Before a patch is merged, it needs to be reviewed by a committer. The reviewer makes sure that the patch merges\nwithout conflicts, that it works as expected and that it does not break anything else.  If the reviewer discovers any kind of issue, he should comment on the pull request in BitBucket, so that the author can\nfix the problem.  For more details about the review and merge process, have a look at  Reviewing, Merging and Declining Pull\nRequests .",
            "title": "Reviews"
        },
        {
            "location": "/development-process/#coding-rules",
            "text": "Maven will automatically check for coding style violations and interrupt the process if it founds any, displaying a\nmessage about it. Apart from that, here are some general rules:  Java:   Indentation is done with exactly two spaces  No line of code should be wider than 120 columns  Avoid trailing spaces  Avoid unnecessary code style changes",
            "title": "Coding Rules"
        },
        {
            "location": "/development-process/#git-repository-branching-model",
            "text": "While the Opencast repository and branching model is inspired by GitFlow , there have been some distinct changes to how release\nbranches are used and releases are tagged. The purpose of this is mainly to support multiple, simultaneous versions and\nmaintenance releases.  Swift overview:   The  develop  branch represents the latest state of development. Features may be merged into this branch and into\n   this branch only. Release branches are branched off from  develop . It is basically the preparation for the next big\n   release at all times.  The release branches are named  r/<a>.<b>.x  (e.g.  r/1.6.x ). They are the latest state of development for a\n   specific release. Only bug fixes and no features may be added to these branches. All beta versions, release\n   candidates and final releases are made from these branches. The branch lives on as long as there may be additional\n   maintenance releases for a given version.  Git tags are created to indicate official releases. These may be:  x.y.z-betaX  marks a beta release. This is usually a version which may still have bugs but is good enough for\n  testing, so that further issues or bugs can be identified before an actual release.  x.y.z-rcX  marks a release candidate. This is a version that seems to be ready to be released as a final\n  version. It will become the final version if testing does not reveal any severe issues.  x.y.z  marks a final release.     To get a closer look at the branching model, let us consider a simple example with a single release:  develop ---*----*----*------*------- ... -----------*-->\n            \\       /      /                       /\n    r/1.6.x  *-----*------*-------------*---------*----- ... ---*-->\n                           \\             \\         \\             \\\n                1.6.0-beta1 *   1.6.0-rc1 *   1.6.0 *       1.6.1 *  As described above,  develop  is the branch used for preparing the next version. At some point marked in the release\nschedule, the release branch is cut from  develop . This action also marks the feature freeze for such Opencast version,\ni.e. the moment when no new features will be included in that specific version. This is because all the new features\nmust be merged only into the  develop  branch; therefore, the release branches (such as  r/1.6.x  in our example) can\nonly contain features that were merged before the branch was forked off. Any features merged after the creation of the\nrelease branch can only make it into the next release, but not into this one.  After the release branch is cut, the development on the  develop  branch may continue as before. Features can (and\nshould) be merged without waiting for the next version to be released. Thus, the creation of a release branch also marks\nthe beginning of the development for the next version.  In contrast to that, only bug fixes can be merged in the release branch. At this point, the code contained in this\nbranch should be tested, so that bugs can be identified and fixed. The release manager can tag different beta versions\nduring the QA process (such as  1.6.0-beta1 ) to mark the code evolution as bug fixes are merged. Once the branch status\nseems to be stable enough to be released, a release candidate (RC) is tagged and tested ( 1.6.0-rc1 ). New RCs can be\ntagged as long as new issues are found and fixed. When no severe issues are found, the final release is tagged.  During the whole process the release manager will regularly merge back the release branch into  develop  so that bug\nfixes from the release branch will automatically become part of  develop  and the next Opencast version, without having\nto create an additional pull request. This is continued until the release branch for the next version is cut.  The releases themselves are not part of the release branch. Instead, the release manager branches off, makes the\nnecessary changes to the pom files (and possibly the UI) and creates a separate tagged commit.  Finally, after a release is done, more bug fixes may be added to the release branch. The release manager should identify\nif there are enough commits to be put into a maintenance release.  Even after an Opencast version has been released, more bugs may be found and fixes for them merged in the release\nbranch. When the release manager considers that the number or importance of such bug fixes is sufficient, he may decide\nto create a new maintenance release. The version  1.6.1  above is an example of that.  The branching structure for multiple versions does not look much more complicated:  develop  -----*---------*----*------------------------*------>\n               \\       /    / \\                      /\n        r/1.5.x *-----*----*------------*--->       /\n                       \\        \\        \\         /\n                  1.5.0 *        \\  1.5.1 *       /\n                                  \\              /\n                           r/1.6.x *------------*----->\n                                                 \\\n                                            1.6.0 *  As you can see, the same principle, the same structure and the same rules apply. The only noteworthy thing is that,\nafter a new release branch is cut, the old release branch will not be merged back into  develop . This means that when\na bug fix is relevant to several releases, a different pull request should be created for each of the release branches.",
            "title": "Git Repository Branching Model"
        },
        {
            "location": "/development-process/#release-process",
            "text": "As indicated above, the release cycle of a new Opencast version starts when a release branch is cut. The new features\nmerged into  develop  afterwards will be part of the next version, but not the one just cut.  This is why the position of release manager for the next Opencast version should be assigned at this point. The current\nrelease manager should therefore ask for volunteers in the mailing lists. For more details about the rights and\nresponsibilities of a release manager, please have a look at the  Release Manager Guide .",
            "title": "Release Process"
        },
        {
            "location": "/development-process/#preparations",
            "text": "The first phase of the release consists of adding new features and defining the release schedule. It is the duty of the\nrelease manager to orchestrate this. This does not necessarily mean that release managers merge or review pull requests,\nbut that they talk to developers and ensure the merge process is driven forward.",
            "title": "Preparations"
        },
        {
            "location": "/development-process/#release-schedule",
            "text": "Releases should happen twice a year, usually within a time span of 9.5 months between the cut of the previous release\nbranch and the final release. The release manager should create a release schedule as soon as possible, identifying when\nthe release branch is cut and when the final release will happen. Additionally, he should coordinate with the QA manager\nto identify phases for internal and public testing.  Usually a release schedule will look like this:  October 1st                     Cutting the release branch\nOctober 1st - 22nd              Internal QA phase\nOctober 22nd-November 5th       Public QA phase\nNovember 5th - 26th             Additional bug fixing phase\nNovember 26th - December 10th   Final QA phase (*)\nDecember 15th                   Release of Opencast x.y  (*) marks the phase where the release is apparently ready to go and has no release blockers left. The additional time is\nto ensure that there is time to fix any serious bug found during this final phase.",
            "title": "Release Schedule"
        },
        {
            "location": "/development-process/#release-branch",
            "text": "The release branch is created from  develop . The release branch is named  r/A.B.x  (e.g.  r/2.1.x ) to indicate that it\nis the origin of all releases with the major and minor version of  A.B . The creation of the release branch marks the\nfeature freeze for a given version, as no more features can be merged into a release branch.  To ensure that all fixes that go into the release branch will become part of  develop  (and thus part of the next version\nof Opencast) with a minimum amount of work, the release manager will merge the release branch into  develop  on a\nregular basis. He may request assistance from certain developers in case of merge conflicts. This process continues until\nthe next release branch is cut.",
            "title": "Release Branch"
        },
        {
            "location": "/development-process/#tags",
            "text": "Git tags are used to mark explicit Opencast versions or releases. Here is how a release should look like in the history:  r/A.B.x  ------------(A)---->\n                       \\\n           A.B.0-beta1 (B)  To create a version based on a given state of the release branch (commit A), the release manager will branch off from\nthis commit, make the necessary version changes to all  pom.xml  files and to the UI and create a commit and a  signed \ngit tag on this commit. He would then push the commit and the tag (not the branch) to the community repository.  Fore more details about how to create release, have a look at the  Release Manager Guide .",
            "title": "Tags"
        },
        {
            "location": "/development-process/#beta-versionsrelease-candidates",
            "text": "A beta release ( A.B.C-betaX ) should be cut before the public QA phase. It indicates a specific version of Opencast for\nusers to test. It is expected to still have bugs. Beta releases should continue until all bugs with a severity of Blocker  have been fixed.  If the code seems to be ready for a release, a  release candidate  ( A.B.C-rcX ) should be cut for final testing. The\ncommit from which a release candidate is created is expected to become the final release if no severe bugs are found.",
            "title": "Beta Versions/Release Candidates"
        },
        {
            "location": "/development-process/#final-release",
            "text": "Once a release candidate seems to be stable during the QA phase (no issues left marked as  Blocker ), the release manager\nwill propose this release candidate to become the final release. If the proposal is approved (i.e. no serious bugs are\nfound before the proposal deadline is met), the final release is then created from the same commit the\nrelease candidate was cut from.",
            "title": "Final Release"
        },
        {
            "location": "/development-process/#maintenance-releases",
            "text": "After a final release, additional issues may show up. These issues may be fixed on the ongoing release branch and at\nsome point released as maintenance release.  There is usually no release schedule for maintenance releases. It is up to the release manager to decide when it is\nworthwhile to create a maintenance release with the fixes for bugs affecting a given release. He would then announce his\nintention to create such a release, cut a release candidate and, should no severe issues with this candidate show up, cut\nthe maintenance release.",
            "title": "Maintenance Releases"
        },
        {
            "location": "/development-process/#quality-assurance",
            "text": "As any piece of software, Opencast may contain bugs. It is the duty of the whole community to identify these bugs,\nreport them and possibly fix them to improve Opencast as product.  Additionally, before releasing a new version of Opencast, the current release manager and quality assurance manager will\ncoordinate test phases dedicated to new releases in order to identify possible problems ahead of time. The whole\ncommunity will be requested to participate in this testing.",
            "title": "Quality Assurance"
        },
        {
            "location": "/development-process/#reporting-bugs",
            "text": "If you identify any bugs, please report them! To do that, register yourself in the  Opencast\nJira  and create a new ticket. Please describe in detail how to reproduce the problem and\nespecially set the  Affects Version  and \"Fix Version\", where  Fix Version  should be the next Opencast release.  If in doubt of any items in the ticket, please assign it for review to either the current release manager or to the\nquality assurance manager. They will check the issue fields and adjust  fix version ,  severity , etc. if necessary.",
            "title": "Reporting Bugs"
        },
        {
            "location": "/development-process/#security-issues",
            "text": "If you discover a problem that has severe implications for system security, please do not publish these information on\nlist. Instead, send a report of the problem to  security@opencast.org . The message will be forwarded to the private\ncommitters list, where the issue will be discussed. Once a patch for the problem is ready, a security notice will be\nreleased along with it.",
            "title": "Security Issues"
        },
        {
            "location": "/development-process/#unit-tests",
            "text": "All Opencast modules should have built-in unit tests to check that they are actually doing what they are supposed to do\nand that code patches do not break the existing functionality. These tests are automatically run whenever the project is\nbuilt. If building repeatedly fails due to test failures, then something is most likely wrong. Please report this as a\nsevere bug.",
            "title": "Unit Tests"
        },
        {
            "location": "/development-process/#user-tests",
            "text": "Before each major release, the release and quality assurance managers will ask the whole community to participate in\nthe execution of a set of manual tests. These tests are designed to check that important functionalities of Opencast\nwork as expected even if users are in slightly different environments or choose different methods to achieve a certain\ngoal.  Such a call for participation will usually be raised both on the lists, the technical and the adopters meeting.  If it\nis possible for you to participate, please do so. Identifying possible problems early will immensely benefit the release\nprocess.",
            "title": "User Tests"
        },
        {
            "location": "/development-process/#test-server",
            "text": "Some institutions provide public testing infrastructure for Opencast. Use them to try out the most recent development\nversion of Opencast. They are meant for testing. Do not fear to break them.  If you manage to do it, please contact the\nQA manager or send a notice to the list.  Remember that they are usually not running a stable version of Opencast but the latest development release (beta version\nor release candidate) instead. If you discover any bugs on these systems, please take a minute to report them.",
            "title": "Test Server"
        },
        {
            "location": "/reviewing-and-merging/",
            "text": "Reviewing, Merging and Declining Pull Requests\n\n\nBefore a patch is merged into an official branch, it needs to be reviewed by a committer. During a\nreview, the reviewer is tries to make sure that the patch merges without conflicts, that it works as expected and that\nit does not break anything else.\n\n\nIf the reviewer discovers any kind of issue, he should leave a comment in the pull request view of BitBucket and let the\ncontributor fix the problem. Reviewer and contributor should work together to fix any problem with the pull requests\nbefore it is ready to go into the codebase.\n\n\nReviewing Rules\n\n\n\n\nReviews and merges need to be done by committers.\n\n\nReviewers should come from a different institution than the contributor.\n\n\nTo assign yourself as a reviewer, add a comment to the BitBucket pull request like \u201c\nI will //review// this\n\u201d. The\n   use of \n//review//\n will make the \npull request filter\n pick up the author of this\n   comment as reviewer.\n\n\nPull requests for bug fixes or documentation may be reviewed and merged out of order.\n\n\nFeature pull requests have to be merged in order unless their contributor or reviewer decide to temporarily skip it.\n   Such a decision has to be justified by the existence of unresolved issues in that particular pull request.\n\n\nThere is a so-called \u201cmerge ticket\u201d in Jira for \ndevelop\n and for each release branch. Committers must not merge code\n   into these branches unless they are the assignee of the corresponding ticket.\n\n\nBy default, the merge ticket for \ndevelop\n should be always assigned to the reviewer of the next feature pull request\n   to be merged.\n\n\nThe merge ticket for \ndevelop\n, can be temporarily taken by anyone for merging a bug fix after coordinating this with\n   the current assignee of the ticket\n\n\nNo features can be merged in the release branches, so the merge tickets corresponding to a release branch will be\n   unassigned by default. Reviewers merging bug fixes must assign the ticket to themselves before doing so, and then\n   leave it unassigned after finishing.\n\n\nThe release ticket should not be unassigned for longer than 72 hours in which case the release manager should assign\n   it to the reviewer of the next pull request in line.\n\n\nAfter taking up a review (or being assigned to one), a basic review has to be done within the following 14 days for a\n   bug fix or 21 days for a feature. A basic review means that either some issues should be pointed out or the pull\n   request should be approved.\n\n\nNo pull request shall be without a reviewer for more than 14 days. If no committer is willing to take up the review\n   on their own, the review will be assigned.\n\n\nAny committer may merge an arbitrary set of \napproved\n pull requests, even if he is not the official reviewer, given\n   that:\n\n\nThe committer sends an announcement to the development list 24 hours in advance, including a list of the pull\n  requests to be merged and no other committer objects to that.\n\n\nThe committer checks that all the patches are working (which basically means to review the patch set as a whole).\n\n\n\n\n\n\nA reviewer may decline a pull request if issues were pointed out but were neither fixed nor discussed for more than\n   14 days. It is generally suggested to try to contact the contributor before declining the pull request and to\n   additionally bring the problem up at the technical meeting.\n\n\n\n\nReviewing a Pull Request\n\n\nThere is no list of things you are required to do as reviewer of a pull request. Our primary goals in doing reviews for\nall pull requests are to ensure that:\n\n\n\n\nThere are no bugs in the pull request\n\n\nThe feature works as advertised\n\n\nIt does not break any other features\n\n\n\n\n\n\nThere are no obvious legal problems\n\n\nLicenses seem to be fine\n\n\nLicenses are added to the \nNOTICES\n file\n\n\n\n\n\n\nFeature documentation is in place\n\n\nAn upgrade path exists (usually relevant for database changes)\n\n\n\n\nThe exact review process heavily depends on the type, size and purpose of the pull request. For example, it does not\nmake sense to run the unit or integration tests for pull requests containing documentation only. Instead, reviewers\nshould run \nmkdocs\n to build the documentation.\n\n\nHere are some things a reviewer should usually do:\n\n\n\n\nCheck if code looks sensible (e.g. no nonsensical files, no obvious formatting errors, no large binary files, \u2026)\n\n\nPerform the merge locally to make sure there are no conflicts\n\n\nBuild Opencast with the \n-Dall\n flag (build all modules) and tests enabled (default). If you have some more time\n   (e.g. lunch break), clear your local Maven repository (usually \n~/.m2\n) before starting the build process\n\n\nLocally run Opencast to make sure it still works after the merge\n\n\nMake sure the issue has been fixed (as described in the pull request and/or the Jira ticket) or the feature does\n   what it is supposed to\n\n\nCheck and build the documentation",
            "title": "Reviewing, Merging and Declining Pull Requests"
        },
        {
            "location": "/reviewing-and-merging/#reviewing-merging-and-declining-pull-requests",
            "text": "Before a patch is merged into an official branch, it needs to be reviewed by a committer. During a\nreview, the reviewer is tries to make sure that the patch merges without conflicts, that it works as expected and that\nit does not break anything else.  If the reviewer discovers any kind of issue, he should leave a comment in the pull request view of BitBucket and let the\ncontributor fix the problem. Reviewer and contributor should work together to fix any problem with the pull requests\nbefore it is ready to go into the codebase.",
            "title": "Reviewing, Merging and Declining Pull Requests"
        },
        {
            "location": "/reviewing-and-merging/#reviewing-rules",
            "text": "Reviews and merges need to be done by committers.  Reviewers should come from a different institution than the contributor.  To assign yourself as a reviewer, add a comment to the BitBucket pull request like \u201c I will //review// this \u201d. The\n   use of  //review//  will make the  pull request filter  pick up the author of this\n   comment as reviewer.  Pull requests for bug fixes or documentation may be reviewed and merged out of order.  Feature pull requests have to be merged in order unless their contributor or reviewer decide to temporarily skip it.\n   Such a decision has to be justified by the existence of unresolved issues in that particular pull request.  There is a so-called \u201cmerge ticket\u201d in Jira for  develop  and for each release branch. Committers must not merge code\n   into these branches unless they are the assignee of the corresponding ticket.  By default, the merge ticket for  develop  should be always assigned to the reviewer of the next feature pull request\n   to be merged.  The merge ticket for  develop , can be temporarily taken by anyone for merging a bug fix after coordinating this with\n   the current assignee of the ticket  No features can be merged in the release branches, so the merge tickets corresponding to a release branch will be\n   unassigned by default. Reviewers merging bug fixes must assign the ticket to themselves before doing so, and then\n   leave it unassigned after finishing.  The release ticket should not be unassigned for longer than 72 hours in which case the release manager should assign\n   it to the reviewer of the next pull request in line.  After taking up a review (or being assigned to one), a basic review has to be done within the following 14 days for a\n   bug fix or 21 days for a feature. A basic review means that either some issues should be pointed out or the pull\n   request should be approved.  No pull request shall be without a reviewer for more than 14 days. If no committer is willing to take up the review\n   on their own, the review will be assigned.  Any committer may merge an arbitrary set of  approved  pull requests, even if he is not the official reviewer, given\n   that:  The committer sends an announcement to the development list 24 hours in advance, including a list of the pull\n  requests to be merged and no other committer objects to that.  The committer checks that all the patches are working (which basically means to review the patch set as a whole).    A reviewer may decline a pull request if issues were pointed out but were neither fixed nor discussed for more than\n   14 days. It is generally suggested to try to contact the contributor before declining the pull request and to\n   additionally bring the problem up at the technical meeting.",
            "title": "Reviewing Rules"
        },
        {
            "location": "/reviewing-and-merging/#reviewing-a-pull-request",
            "text": "There is no list of things you are required to do as reviewer of a pull request. Our primary goals in doing reviews for\nall pull requests are to ensure that:   There are no bugs in the pull request  The feature works as advertised  It does not break any other features    There are no obvious legal problems  Licenses seem to be fine  Licenses are added to the  NOTICES  file    Feature documentation is in place  An upgrade path exists (usually relevant for database changes)   The exact review process heavily depends on the type, size and purpose of the pull request. For example, it does not\nmake sense to run the unit or integration tests for pull requests containing documentation only. Instead, reviewers\nshould run  mkdocs  to build the documentation.  Here are some things a reviewer should usually do:   Check if code looks sensible (e.g. no nonsensical files, no obvious formatting errors, no large binary files, \u2026)  Perform the merge locally to make sure there are no conflicts  Build Opencast with the  -Dall  flag (build all modules) and tests enabled (default). If you have some more time\n   (e.g. lunch break), clear your local Maven repository (usually  ~/.m2 ) before starting the build process  Locally run Opencast to make sure it still works after the merge  Make sure the issue has been fixed (as described in the pull request and/or the Jira ticket) or the feature does\n   what it is supposed to  Check and build the documentation",
            "title": "Reviewing a Pull Request"
        },
        {
            "location": "/release-manager/",
            "text": "Release Manager Guide\n\n\nRole\n\n\nThe release manager is ultimately responsible for making sure that the development process is being followed during his\nor her release.\n\n\nThe release manager has the following duties:\n\n\n\n\nTo ensure that the release measures up to the quality expected by the community.\n\n\nTo ensure that the development process is followed and amended if required.\n\n\nTo ensure that the release is timely and does not languish in process.\n\n\nTo encourage committers to be involved in testing and fixing of bugs.\n\n\n\n\nIt is in the release manager's responsibility to force decisions around the release, help negotiate the acceptance or\nrejection of contributions and to provide regular updates about the release on list and during the weekly technical and\nmonthly adopter meetings. It is important to note that, while the release manager drives the release process, the\ncommitter body is in charge of both the work and the decision making, meaning that votes and successful proposals from\nthis body take precedence over a release managers decision.\n\n\nThe release manager does not have to be a committer. In case the release manager is not, a committer must agree to be\nthe proxy release manager for communication on the confidential committers list.\n\n\nA release manager can abandon the release at any time, giving up their duties and privileges of being the release\nmanager. The committer list must then either vote within 72 hours on a new release manager, or consider the release\nabandoned (the major, minor, and maintenance numbers remain unchanged).\n\n\nDuties\n\n\nSetting Release Schedule\n\n\nReleases should happen twice a year, usually within a time span of 9.5 months between the cut of the previous release\nbranch and the final release. The release manager should create a release schedule as soon as possible.\nFor more details about the release schedule, have a look at the \nDevelopment Process\n\n\nCreation of Release Branch\n\n\nAccording to the set release schedule, at one point a release branch should be cut, effectively marking a feature freeze\nfor a given release.\n\n\nOnce a release process has started, a branch should be created with the proposed version number of that release. This\nbranch is created off of \ndevelop\n and should be named \nr/X.Y.x\n (e.g. \nr/2.1.x\n for the Opencast 2.1 release branch).\nIn the following command, we assume that the release branch for 2.1 is to be created. For other versions, please adjust\nthe version number accordingly.\n\n\nCreate the Branch:\n\n\n\n\n\n\nGrab the merge ticket for \ndevelop\n. You are going to make changes there and it becomes ugly if someone else changes\n   something at the same time.\n\n\n\n\n\n\nCheck out \ndevelop\n and make sure it has the latest state (replace \n<remote>\n with your remote name for the community\n   repository):\n\n\ngit checkout develop\ngit pull <remote> develop\n\n\n\n\n\n\n\nCreate and push release branch:\n\n\ngit checkout -b r/2.1.x\ngit push <remote> r/2.1.x\n\n\n\n\n\n\n\nMake sure you did not modify any files. If you did, stash those changes.\n\n\n\n\n\n\nThat is it for the release branch. Now lets make sure we update the versions in \ndevelop\n in preparation for the next\n   release:\n\n\ngit checkout develop\nfor i in `find . -name pom.xml`; do \\\n  sed -i 's/<version>2.1-SNAPSHOT</<version>2.2-SNAPSHOT</' $i; done\n\n\n\n\n\n\n\nHave a look at the changes. Make sure no library version we use has the version \n2.1-SNAPSHOT\n and was accidentally\n   changed. Also make sure that nothing else was modified:\n\n\ngit diff\n\n\n\n\n\n\n\nCheck again for unwanted changes.\n\n\n\n\n\n\nIf everything looks fine, commit everything and push it to the community repository:\n\n\ngit commit -as\ngit push <remote> develop\n\n\n\n\n\n\n\nFinally change the \nfixVersion\n and \nsummary\n on the merge ticket for 2.1 and create a new one for develop.\n\n\n\n\n\n\nAt this point, the developer community should then be notified. Consider using the following as a template email:\n\n\nTo: matterhorn@opencast.org\nSubject: Release Branch for Opencast <VERSION> Cut\n\nHi everyone,\nit is my pleasure to announce that the <VERSION> release branch has now been\ncut, available as r/<VERSION>. Pull requests for bug fixes are to be made\nagainst this branch.\n\nRemember that the release schedule for this release:\n\n  <RELEASE_SCHEDULE>\n\nAs always, we hope to have a lot of people testing this version, especially\nduring the public QA phase.  Please report any bugs or issues you encounter.\n\n\n\nAdjust Pull Request Filter\n\n\nThe \nOpencast pull request filter\n links the versions currently in development. The\nmerge ticket identifier needs to be added to that filter. As release manager, please talk to the \nadministrator\n\n of that tool to ensure the ticket is added.\n\n\nRelease Documentation\n\n\nThe \nOpencast release documentation\n will be built automatically from available release tags.\nHowever, new branches need to be included.  As release manager, please talk to the \nadministrator\n\n of that\ntool to ensure the ticket is added.\n\n\nModeration of Peer Reviews\n\n\nApart from creating branches and tags, one of the most important things for release managers to do is to ensure that\npull requests for the release are going forward. This does not mean that the release manager has to do the reviews, but\nhe should talk to developers, remind them about outstanding reviews and help to resolve possible issues.\n\n\nMerging Release Branch Into Develop\n\n\nTo not have to merge bug fixes into several branches and create several pull requests, the release manager should merge\nthe release branch back into \ndevelop\n on a regular basis. It is encouraged to do that frequently, to not let the\nbranches diverge too much and to avoid possible merge conflicts.\n\n\nTo merge the release branch into \ndevelop\n. As example, we do that for 2.1. Please adjust the version accordingly:\n\n\n\n\n\n\nGrab the merge ticket for \ndevelop\n. You are not doing any changes to the release branch, so you will not need that\n   merge ticket. If someone else holds the merge ticket for a feature pull request, talk to that person that you will\n   temporarily steal the ticket.\n\n\n\n\n\n\nUpdate release branch:\n\n\ngit checkout r/2.1.x\ngit pull <remote> r/2.1.x\n\n\n\n\n\n\n\nUpdate \ndevelop\n:\n\n\ngit checkout develop\ngit pull <remote> develop\n\n\n\n\n\n\n\nMerge the release branch. Not that if large merge conflicts arise, you may ask for help from the people creating the\n   problematic patches:\n\n\ngit merge r/2.1.x\n\n\n\n\n\n\n\nPush updated branch into the community repository:\n\n\ngit push <remote> develop\n\n\n\n\n\n\n\nLeave a comment in the merge ticket and assign it back to the next pull request in line on \ndevelop\n.\n\n\n\n\n\n\nBeta Versions and Release Candidates\n\n\nFor testing purposes, the release manager should regularly create beta versions. Especially before the public QA phase,\na beta version should exist. Additionally, he should create a release candidate for testing before proposing that a\nrelease be cut.\n\n\nCreate a version/tag. Again, version 2.1 is used as example. Please adjust the version accordingly:\n\n\n\n\n\n\nSwitch to release branch you want to create the beta from:\n\n\ngit checkout r/2.1.x\n\n\n\n\n\n\n\nSwitch to a new branch to create the release (name does not really matter):\n\n\ngit checkout -b r/2.1.0-beta1\n\n\n\n\n\n\n\nMake version changes for release. You can use \nsed\n to make things easier. Please make sure, the changes are correct:\n\n\nfor i in `find . -name pom.xml`; do \\\n  sed -i 's/<version>2.1-SNAPSHOT</<version>2.1.0-beta1</' $i; done\n\n\n\n\n\n\n\nCommit changes and create release tag:\n\n\ngit commit -asS -m 'Opencast 2.1.0-beta1'\ngit tag -s 2.1.0-beta1\n\n\n\n\n\n\n\nSwitch back to release branch and push tags:\n\n\ngit checkout r/2.1.x\ngit push <remote> 2.1.0-beta1:2.1.0-beta1\n\n\n\n\n\n\n\nYou can remove the new branch afterwards:\n\n\ngit branch -D r/2.1.0-beta1\n\n\n\n\n\n\n\nFor a release candidate, instead of \nA.B.C-betaX\n the tag should be named \nA.B.C-rcX\n.\n\n\nAt this point the developer community should then be notified. Consider using the following email template:\n\n\nTo: matterhorn@opencast.org\nSubject: <VERSION> Available for testing!\n\nHi everyone,\nI am pleased to announce that Opencast <VERSION> is now available for\ntesting. Please download the source from BitBucket [1] or use git to check\nout the tag.\n\nIssue Count:\n\n  Blockers   <BLOCKER_COUNT>\n  Critical   <CRITICAL_ISSUE_COUNT>\n  Major      <MAJOR_ISSUE_COUNT>\n  Minor      <MINOR_ISSUE_COUNT>\n\nPlease test this release as thoroughly as\npossible.\n\n[1] https://bitbucket.org/opencast-community/matterhorn/downloads\n\n\n\nIf the version is a release candidate, you probably want to highlight that there are no \nBlockers\n left at the moment\nand \n#propose\n this to become the final release.\n\n\nReleasing\n\n\nOnce the proposal for a release candidate to become the final release has passed, the release manager should create the\nfinal release. In the following example, again, version 2.1 is used. Please adjust the version accordingly. We also\nassume the final release should be based on \n2.1.0-rc2\n.\n\n\n\n\n\n\nCheck which commit the release candidate was based on:\n\n\ngit merge-base 2.1.0-rc2 r/2.1.x\n  060dfc3e2328518ae402846577fc6e7ce3b650d7\n\n\n\n\n\n\n\nSwitch to commit you want to create the release from:\n\n\ngit checkout 060dfc3e2328518ae402846577fc6e7ce3b650d7\n\n\n\n\n\n\n\nSwitch to a new branch to create the release (name does not really matter):\n\n\ngit checkout -b r/2.1.0\n\n\n\n\n\n\n\nAdd release notes and commit them:\n\n\nvim docs/guides/admin/docs/release.notes.md\ngit commit docs/guides/admin/docs/release.notes.md -sS\n\n\n\n\n\n\n\nMerge release notes into release branch:\n\n\ngit checkout r/2.1.x\ngit merge r/2.1.0\ngit checkout r/2.1.0\n\n\n\n\n\n\n\nMake version changes for release. You can use \nsed\n to make things easier. Please make sure, the changes are correct:\n\n\nfor i in `find . -name pom.xml`; do \\\n  sed -i 's/<version>2.1-SNAPSHOT</<version>2.1.0</' $i; done\n\n\n\n\n\n\n\nCommit changes and create release tag:\n\n\ngit commit -asS -m 'Opencast 2.1.0'\ngit tag -s 2.1.0\n\n\n\n\n\n\n\nSwitch back to release branch, push release notes and tags:\n\n\ngit checkout r/2.1.x\ngit push <remote> 2.1.0:2.1.0\ngit push <remote> r/2.1.x\n\n\n\n\n\n\n\nYou can remove the new branch afterwards:\n\n\ngit branch -D r/2.1.0\n\n\n\n\n\n\n\nFinally, send a release notice to list. You may use the following template:\n\n\nTo: matterhorn@opencast.org\nSubject: Opencast <VERSION> Released\nHi all,\nit is my pleasure to announce that Opencast <VERSION> has been released and\ncan be downloaded from BitBucket [1] or checked out via git.\n\nThe documentation for this release can be found at [http://docs.opencast.org].\n\nIssue Count:\n\n  Blockers   0\n  Critical   <CRITICAL_ISSUE_COUNT>\n  Major      <MAJOR_ISSUE_COUNT>\n  Minor      <MINOR_ISSUE_COUNT>\n\nTo all committers and involved contributors, thank you for all your work.\nThis could not have happened without you and I am glad we were able to work\ntogether and get this release out.\n\n[1] https://bitbucket.org/opencast-community/matterhorn/downloads\n\n\n\nAppointment of Next Release Manager\n\n\nIdentification of a volunteer\n\n\nAfter the release branch is cut, all work on \ndevelop\n is effectively the preparation for the next release. At this\npoint, the release manager sends an inquiry to the users, developers and community list to identify a volunteer for the\njob of release manager for the next release.\n\n\nFor that, this email template may be used:\n\n\nTo: matterhorn@opencast.org\nSubject: Opencast <NEXT_RELEASE_VERSION> release manager wanted\n\nHi everyone,\nas release manager of Opencast <VERSION> release, it is my duty to announce\nthat the Opencast community is looking for a release manager of the upcoming\n<NEXT_RELEASE_VERSION> release between now and <INTENDED RELEASE DATE>\n(release date).\n\nNote that the release manager's duties do not contain a lot of technical\nwork. Instead, they focus on motivation, coordination, and ensuring that the\ndevelopment process [1] is being followed. The role of the release manager\nis described in more detail in the Opencast development documentation wiki\n[2].\n\nThe job does not have to be done by one person alone and it has proven good\npractice to have two people fill this job as co-release managers to help\nkeep up the process during vacation, sickness and in case of local\nemergencies.\n\nI am looking forward to your applications on list, please voice your\ninterest no later than <TWO WEEKS FROM NOW>.\n\n[1] http://docs.opencast.org/develop/developer/development/\n[2] http://docs.opencast.org/develop/developer/release-manager/\n\n\n\nInitiate the Vote\n\n\nIn the case where someone steps up and offers to fill in the role of a release manager for the upcoming release, a vote\nis held on the committers list to determine whether the candidate is deemed suitable for the position. Should there be\nmore than one candidate wanting to become the release manager for the next release, the candidate with the largest\nnumber of votes and no \u201c-1\u201d gets elected.\n\n\nThis email template may be used to initiate the vote:\n\n\nTo: committers@opencast.org\nSubject: [#proposal] Vote on Release Managers of Opencast <NEXT_RELEASE_VERSION>\n\nHi everyone,\nafter roughly two weeks of looking for candidates for the position of the\nrelease manager of the upcoming Opencast <NEXT_RELEASE_VERSION> release, I\nam happy to announce that the following Opencast members have volunteered\nfor the position and have expressed the intention of sharing the position as\nrelease managers:\n\n  <Name, Institition>\n  <Name, Institution>\n\nAs the release manager of Opencast <BRANCH_VERSION_FINAL> and in accordance\nwith the development process [1], I hereby open the vote on accepting the\napplications of <Name(s)>. The vote will be open for the coming 72h.\n\n[1] http://docs.opencast.org/develop/developer/development/\n\n\n\nAnnouncing Election Results\n\n\nOnce the vote has been held, the current release manager announces the elected release manager on list, and the newly\nelected release manager is expected to start work on the release shortly after.",
            "title": "Release Manager"
        },
        {
            "location": "/release-manager/#release-manager-guide",
            "text": "",
            "title": "Release Manager Guide"
        },
        {
            "location": "/release-manager/#role",
            "text": "The release manager is ultimately responsible for making sure that the development process is being followed during his\nor her release.  The release manager has the following duties:   To ensure that the release measures up to the quality expected by the community.  To ensure that the development process is followed and amended if required.  To ensure that the release is timely and does not languish in process.  To encourage committers to be involved in testing and fixing of bugs.   It is in the release manager's responsibility to force decisions around the release, help negotiate the acceptance or\nrejection of contributions and to provide regular updates about the release on list and during the weekly technical and\nmonthly adopter meetings. It is important to note that, while the release manager drives the release process, the\ncommitter body is in charge of both the work and the decision making, meaning that votes and successful proposals from\nthis body take precedence over a release managers decision.  The release manager does not have to be a committer. In case the release manager is not, a committer must agree to be\nthe proxy release manager for communication on the confidential committers list.  A release manager can abandon the release at any time, giving up their duties and privileges of being the release\nmanager. The committer list must then either vote within 72 hours on a new release manager, or consider the release\nabandoned (the major, minor, and maintenance numbers remain unchanged).",
            "title": "Role"
        },
        {
            "location": "/release-manager/#duties",
            "text": "",
            "title": "Duties"
        },
        {
            "location": "/release-manager/#setting-release-schedule",
            "text": "Releases should happen twice a year, usually within a time span of 9.5 months between the cut of the previous release\nbranch and the final release. The release manager should create a release schedule as soon as possible.\nFor more details about the release schedule, have a look at the  Development Process",
            "title": "Setting Release Schedule"
        },
        {
            "location": "/release-manager/#creation-of-release-branch",
            "text": "According to the set release schedule, at one point a release branch should be cut, effectively marking a feature freeze\nfor a given release.  Once a release process has started, a branch should be created with the proposed version number of that release. This\nbranch is created off of  develop  and should be named  r/X.Y.x  (e.g.  r/2.1.x  for the Opencast 2.1 release branch).\nIn the following command, we assume that the release branch for 2.1 is to be created. For other versions, please adjust\nthe version number accordingly.  Create the Branch:    Grab the merge ticket for  develop . You are going to make changes there and it becomes ugly if someone else changes\n   something at the same time.    Check out  develop  and make sure it has the latest state (replace  <remote>  with your remote name for the community\n   repository):  git checkout develop\ngit pull <remote> develop    Create and push release branch:  git checkout -b r/2.1.x\ngit push <remote> r/2.1.x    Make sure you did not modify any files. If you did, stash those changes.    That is it for the release branch. Now lets make sure we update the versions in  develop  in preparation for the next\n   release:  git checkout develop\nfor i in `find . -name pom.xml`; do \\\n  sed -i 's/<version>2.1-SNAPSHOT</<version>2.2-SNAPSHOT</' $i; done    Have a look at the changes. Make sure no library version we use has the version  2.1-SNAPSHOT  and was accidentally\n   changed. Also make sure that nothing else was modified:  git diff    Check again for unwanted changes.    If everything looks fine, commit everything and push it to the community repository:  git commit -as\ngit push <remote> develop    Finally change the  fixVersion  and  summary  on the merge ticket for 2.1 and create a new one for develop.    At this point, the developer community should then be notified. Consider using the following as a template email:  To: matterhorn@opencast.org\nSubject: Release Branch for Opencast <VERSION> Cut\n\nHi everyone,\nit is my pleasure to announce that the <VERSION> release branch has now been\ncut, available as r/<VERSION>. Pull requests for bug fixes are to be made\nagainst this branch.\n\nRemember that the release schedule for this release:\n\n  <RELEASE_SCHEDULE>\n\nAs always, we hope to have a lot of people testing this version, especially\nduring the public QA phase.  Please report any bugs or issues you encounter.",
            "title": "Creation of Release Branch"
        },
        {
            "location": "/release-manager/#adjust-pull-request-filter",
            "text": "The  Opencast pull request filter  links the versions currently in development. The\nmerge ticket identifier needs to be added to that filter. As release manager, please talk to the  administrator  of that tool to ensure the ticket is added.",
            "title": "Adjust Pull Request Filter"
        },
        {
            "location": "/release-manager/#release-documentation",
            "text": "The  Opencast release documentation  will be built automatically from available release tags.\nHowever, new branches need to be included.  As release manager, please talk to the  administrator  of that\ntool to ensure the ticket is added.",
            "title": "Release Documentation"
        },
        {
            "location": "/release-manager/#moderation-of-peer-reviews",
            "text": "Apart from creating branches and tags, one of the most important things for release managers to do is to ensure that\npull requests for the release are going forward. This does not mean that the release manager has to do the reviews, but\nhe should talk to developers, remind them about outstanding reviews and help to resolve possible issues.",
            "title": "Moderation of Peer Reviews"
        },
        {
            "location": "/release-manager/#merging-release-branch-into-develop",
            "text": "To not have to merge bug fixes into several branches and create several pull requests, the release manager should merge\nthe release branch back into  develop  on a regular basis. It is encouraged to do that frequently, to not let the\nbranches diverge too much and to avoid possible merge conflicts.  To merge the release branch into  develop . As example, we do that for 2.1. Please adjust the version accordingly:    Grab the merge ticket for  develop . You are not doing any changes to the release branch, so you will not need that\n   merge ticket. If someone else holds the merge ticket for a feature pull request, talk to that person that you will\n   temporarily steal the ticket.    Update release branch:  git checkout r/2.1.x\ngit pull <remote> r/2.1.x    Update  develop :  git checkout develop\ngit pull <remote> develop    Merge the release branch. Not that if large merge conflicts arise, you may ask for help from the people creating the\n   problematic patches:  git merge r/2.1.x    Push updated branch into the community repository:  git push <remote> develop    Leave a comment in the merge ticket and assign it back to the next pull request in line on  develop .",
            "title": "Merging Release Branch Into Develop"
        },
        {
            "location": "/release-manager/#beta-versions-and-release-candidates",
            "text": "For testing purposes, the release manager should regularly create beta versions. Especially before the public QA phase,\na beta version should exist. Additionally, he should create a release candidate for testing before proposing that a\nrelease be cut.  Create a version/tag. Again, version 2.1 is used as example. Please adjust the version accordingly:    Switch to release branch you want to create the beta from:  git checkout r/2.1.x    Switch to a new branch to create the release (name does not really matter):  git checkout -b r/2.1.0-beta1    Make version changes for release. You can use  sed  to make things easier. Please make sure, the changes are correct:  for i in `find . -name pom.xml`; do \\\n  sed -i 's/<version>2.1-SNAPSHOT</<version>2.1.0-beta1</' $i; done    Commit changes and create release tag:  git commit -asS -m 'Opencast 2.1.0-beta1'\ngit tag -s 2.1.0-beta1    Switch back to release branch and push tags:  git checkout r/2.1.x\ngit push <remote> 2.1.0-beta1:2.1.0-beta1    You can remove the new branch afterwards:  git branch -D r/2.1.0-beta1    For a release candidate, instead of  A.B.C-betaX  the tag should be named  A.B.C-rcX .  At this point the developer community should then be notified. Consider using the following email template:  To: matterhorn@opencast.org\nSubject: <VERSION> Available for testing!\n\nHi everyone,\nI am pleased to announce that Opencast <VERSION> is now available for\ntesting. Please download the source from BitBucket [1] or use git to check\nout the tag.\n\nIssue Count:\n\n  Blockers   <BLOCKER_COUNT>\n  Critical   <CRITICAL_ISSUE_COUNT>\n  Major      <MAJOR_ISSUE_COUNT>\n  Minor      <MINOR_ISSUE_COUNT>\n\nPlease test this release as thoroughly as\npossible.\n\n[1] https://bitbucket.org/opencast-community/matterhorn/downloads  If the version is a release candidate, you probably want to highlight that there are no  Blockers  left at the moment\nand  #propose  this to become the final release.",
            "title": "Beta Versions and Release Candidates"
        },
        {
            "location": "/release-manager/#releasing",
            "text": "Once the proposal for a release candidate to become the final release has passed, the release manager should create the\nfinal release. In the following example, again, version 2.1 is used. Please adjust the version accordingly. We also\nassume the final release should be based on  2.1.0-rc2 .    Check which commit the release candidate was based on:  git merge-base 2.1.0-rc2 r/2.1.x\n  060dfc3e2328518ae402846577fc6e7ce3b650d7    Switch to commit you want to create the release from:  git checkout 060dfc3e2328518ae402846577fc6e7ce3b650d7    Switch to a new branch to create the release (name does not really matter):  git checkout -b r/2.1.0    Add release notes and commit them:  vim docs/guides/admin/docs/release.notes.md\ngit commit docs/guides/admin/docs/release.notes.md -sS    Merge release notes into release branch:  git checkout r/2.1.x\ngit merge r/2.1.0\ngit checkout r/2.1.0    Make version changes for release. You can use  sed  to make things easier. Please make sure, the changes are correct:  for i in `find . -name pom.xml`; do \\\n  sed -i 's/<version>2.1-SNAPSHOT</<version>2.1.0</' $i; done    Commit changes and create release tag:  git commit -asS -m 'Opencast 2.1.0'\ngit tag -s 2.1.0    Switch back to release branch, push release notes and tags:  git checkout r/2.1.x\ngit push <remote> 2.1.0:2.1.0\ngit push <remote> r/2.1.x    You can remove the new branch afterwards:  git branch -D r/2.1.0    Finally, send a release notice to list. You may use the following template:  To: matterhorn@opencast.org\nSubject: Opencast <VERSION> Released\nHi all,\nit is my pleasure to announce that Opencast <VERSION> has been released and\ncan be downloaded from BitBucket [1] or checked out via git.\n\nThe documentation for this release can be found at [http://docs.opencast.org].\n\nIssue Count:\n\n  Blockers   0\n  Critical   <CRITICAL_ISSUE_COUNT>\n  Major      <MAJOR_ISSUE_COUNT>\n  Minor      <MINOR_ISSUE_COUNT>\n\nTo all committers and involved contributors, thank you for all your work.\nThis could not have happened without you and I am glad we were able to work\ntogether and get this release out.\n\n[1] https://bitbucket.org/opencast-community/matterhorn/downloads",
            "title": "Releasing"
        },
        {
            "location": "/release-manager/#appointment-of-next-release-manager",
            "text": "",
            "title": "Appointment of Next Release Manager"
        },
        {
            "location": "/release-manager/#identification-of-a-volunteer",
            "text": "After the release branch is cut, all work on  develop  is effectively the preparation for the next release. At this\npoint, the release manager sends an inquiry to the users, developers and community list to identify a volunteer for the\njob of release manager for the next release.  For that, this email template may be used:  To: matterhorn@opencast.org\nSubject: Opencast <NEXT_RELEASE_VERSION> release manager wanted\n\nHi everyone,\nas release manager of Opencast <VERSION> release, it is my duty to announce\nthat the Opencast community is looking for a release manager of the upcoming\n<NEXT_RELEASE_VERSION> release between now and <INTENDED RELEASE DATE>\n(release date).\n\nNote that the release manager's duties do not contain a lot of technical\nwork. Instead, they focus on motivation, coordination, and ensuring that the\ndevelopment process [1] is being followed. The role of the release manager\nis described in more detail in the Opencast development documentation wiki\n[2].\n\nThe job does not have to be done by one person alone and it has proven good\npractice to have two people fill this job as co-release managers to help\nkeep up the process during vacation, sickness and in case of local\nemergencies.\n\nI am looking forward to your applications on list, please voice your\ninterest no later than <TWO WEEKS FROM NOW>.\n\n[1] http://docs.opencast.org/develop/developer/development/\n[2] http://docs.opencast.org/develop/developer/release-manager/",
            "title": "Identification of a volunteer"
        },
        {
            "location": "/release-manager/#initiate-the-vote",
            "text": "In the case where someone steps up and offers to fill in the role of a release manager for the upcoming release, a vote\nis held on the committers list to determine whether the candidate is deemed suitable for the position. Should there be\nmore than one candidate wanting to become the release manager for the next release, the candidate with the largest\nnumber of votes and no \u201c-1\u201d gets elected.  This email template may be used to initiate the vote:  To: committers@opencast.org\nSubject: [#proposal] Vote on Release Managers of Opencast <NEXT_RELEASE_VERSION>\n\nHi everyone,\nafter roughly two weeks of looking for candidates for the position of the\nrelease manager of the upcoming Opencast <NEXT_RELEASE_VERSION> release, I\nam happy to announce that the following Opencast members have volunteered\nfor the position and have expressed the intention of sharing the position as\nrelease managers:\n\n  <Name, Institition>\n  <Name, Institution>\n\nAs the release manager of Opencast <BRANCH_VERSION_FINAL> and in accordance\nwith the development process [1], I hereby open the vote on accepting the\napplications of <Name(s)>. The vote will be open for the coming 72h.\n\n[1] http://docs.opencast.org/develop/developer/development/",
            "title": "Initiate the Vote"
        },
        {
            "location": "/release-manager/#announcing-election-results",
            "text": "Once the vote has been held, the current release manager announces the elected release manager on list, and the newly\nelected release manager is expected to start work on the release shortly after.",
            "title": "Announcing Election Results"
        },
        {
            "location": "/development-environment/",
            "text": "Development Environment\n\n\nBuilding single modules\n\n\nWhen working on a single Opencast module, it can be extremely helpful to watch the newly built version and include \nit automatically in the Opencast OSGi infrastructure. This can be done through the\n\nbundle:watch\n command in Karaf. The workflow would\nbe as follows:\n\n\n\n\nStart Opencast and use \nla -u\n in the Karaf console to list all installed bundles/modules. Note down the IDs of the\n   bundles you want to watch.\n\n\nUse \nbundle:watch IDs\n to watch the desired modules, e.g. \nbundle:watch 190 199\n\n\nMake your changes and rebuild the module (e.g. execute \nmvn clean install\n in the module folder).\n\n\nWatch how Karaf automatically redeploys the changed jars from your local Maven repository. You can verify that\n   everything went smoothly by checking the log with \nlog:tail\n.\n\n\n\n\nThe updated bundles are only available in the currently running Karaf instance. To create a Opencast version that has\nthis changes permanently, you have to run \nmvn clean install\n in the the assemblies directory again. Your current\ninstance will be deleted by the new assembly!\n\n\nIn several cases the bundle:watch can bring Karaf in an unstable condition, as dependencies between bundles will not\ncorrectly be restored, after the new bundle has been deployed.\n\n\nAttaching a Remote Debugger to Karaf\n\n\nTo debug a running Opencast system, you can attach a remote debugger in your IDE (Eclipse or NetBeans, i.e.). For that\nyou have to enable the remote debugging in Karaf OSGI server that runs Opencast.\n\n\nYou have to add \"debug\" as an additional paramenter to the Opencast start script:\n\n\nbin/start-opencast debug\n\n\n\nIf you want to enable debug permanently you can export the variable in the shell:\n\n\nexport DEFAULT_JAVA_DEBUG_OPTS='-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'\n\n\n\nYou can connect the remote debugger of your IDE on port \n5005\n.\n\n\nFor more information on remote debugging with Karaf you can visit \nthis\nsite.\n\n\nIt is not recommended to enable remote debugging on production systems!",
            "title": "Development Environment"
        },
        {
            "location": "/development-environment/#development-environment",
            "text": "",
            "title": "Development Environment"
        },
        {
            "location": "/development-environment/#building-single-modules",
            "text": "When working on a single Opencast module, it can be extremely helpful to watch the newly built version and include \nit automatically in the Opencast OSGi infrastructure. This can be done through the bundle:watch  command in Karaf. The workflow would\nbe as follows:   Start Opencast and use  la -u  in the Karaf console to list all installed bundles/modules. Note down the IDs of the\n   bundles you want to watch.  Use  bundle:watch IDs  to watch the desired modules, e.g.  bundle:watch 190 199  Make your changes and rebuild the module (e.g. execute  mvn clean install  in the module folder).  Watch how Karaf automatically redeploys the changed jars from your local Maven repository. You can verify that\n   everything went smoothly by checking the log with  log:tail .   The updated bundles are only available in the currently running Karaf instance. To create a Opencast version that has\nthis changes permanently, you have to run  mvn clean install  in the the assemblies directory again. Your current\ninstance will be deleted by the new assembly!  In several cases the bundle:watch can bring Karaf in an unstable condition, as dependencies between bundles will not\ncorrectly be restored, after the new bundle has been deployed.",
            "title": "Building single modules"
        },
        {
            "location": "/development-environment/#attaching-a-remote-debugger-to-karaf",
            "text": "To debug a running Opencast system, you can attach a remote debugger in your IDE (Eclipse or NetBeans, i.e.). For that\nyou have to enable the remote debugging in Karaf OSGI server that runs Opencast.  You have to add \"debug\" as an additional paramenter to the Opencast start script:  bin/start-opencast debug  If you want to enable debug permanently you can export the variable in the shell:  export DEFAULT_JAVA_DEBUG_OPTS='-Xdebug -Xnoagent -Djava.compiler=NONE -Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=5005'  You can connect the remote debugger of your IDE on port  5005 .  For more information on remote debugging with Karaf you can visit  this\nsite.  It is not recommended to enable remote debugging on production systems!",
            "title": "Attaching a Remote Debugger to Karaf"
        },
        {
            "location": "/license/",
            "text": "Licenses and Legal Matters\n\n\n\n\nThis is a guide from developers for developers and therefore not an official legal document. We try to be as accurate\nas possible but cannot guarantee that there are no mistakes. If in doubt, please send a question to the Opencast\ndeveloper mailing list, to the Opencast Board or to the Apereo Foundation, preferably in that order.\n\n\n\n\nWhich Licenses May I Use for Opencast?\n\n\nAll libraries that are used in Opencast need to be compatible with the Educational Community License version 2.0.\n\n\nIn short, if the license is on:\n\n\n\n\nthe Apereo or Apache Category-A list, it is fine to use the library.\n\n\nthe Apereo or Apache Category-B list, we may use it unmodified. Please avoid Category-B if possible.\n\n\nthe Apereo or Apache Category-X list, we cannot use it.\n\n\n\n\nEverything else needs to go to the Apereo foundation for approval.\n\n\nThese lists, along with a more detailed explanation, can be found on the \nApereo page about practices on third-party\nlicenses\n\n\nHere is the slightly longer section from the \u201eApereo Licensing & Intellectual Property Practices\u201c page:\n\n\nHow To Label Third Party Libraries\n\n\nThird party libraries that are used within an Opencast system in production need to be listed in the \nNOTICES\n file,\nwhich can be found in the root directory of our code repository. Libraries and tools that are only used for testing or\nbuilding the project, or are run via system call, do not need to be listed (e.g. maven, maven plugins, junit, ...).\n\n\nJavaScript Libraries\n\n\nFor JavaScript libraries, list the file or folder that is included and give a short statement about the copyright and\nlicense. This can usually be taken from the copyright header at the top of the library.\n\n\nExample:\n\n\nmodules/matterhorn-admin-ui-ng/src/main/webapp/lib/angular/*\n  AngularJS v1.3.6\n  (c) 2010-2014 Google, Inc. http://angularjs.org\n  License: MIT\n\n\n\nJava Libraries / Maven Dependencies\n\n\nJava dependencies are listed pre module. Maven provides some helpful tools to list dependencies and even report\nlibraries. Have a look at the output of \nmvn dependency:list\n and \nmvn dependency:tree\n or generate a full report for a\nmodule using:\n\n\nmvn -s settings.xml project-info-reports:dependencies\n\n\n\nThis will create a file \ntarget/site/dependencies.html\n containing a full report, including the library versions and\nlicenses.\n\n\nFinally, add the library and license to the \nNOTICES\n file in the form:\n\n\nrn-workflow-service-remote\n  GroupId       ArtifactId    License\n  commons-io    commons-io    The Apache Software License, Version 2.0",
            "title": "Licenses and Legal Matters"
        },
        {
            "location": "/license/#licenses-and-legal-matters",
            "text": "This is a guide from developers for developers and therefore not an official legal document. We try to be as accurate\nas possible but cannot guarantee that there are no mistakes. If in doubt, please send a question to the Opencast\ndeveloper mailing list, to the Opencast Board or to the Apereo Foundation, preferably in that order.",
            "title": "Licenses and Legal Matters"
        },
        {
            "location": "/license/#which-licenses-may-i-use-for-opencast",
            "text": "All libraries that are used in Opencast need to be compatible with the Educational Community License version 2.0.  In short, if the license is on:   the Apereo or Apache Category-A list, it is fine to use the library.  the Apereo or Apache Category-B list, we may use it unmodified. Please avoid Category-B if possible.  the Apereo or Apache Category-X list, we cannot use it.   Everything else needs to go to the Apereo foundation for approval.  These lists, along with a more detailed explanation, can be found on the  Apereo page about practices on third-party\nlicenses  Here is the slightly longer section from the \u201eApereo Licensing & Intellectual Property Practices\u201c page:",
            "title": "Which Licenses May I Use for Opencast?"
        },
        {
            "location": "/license/#how-to-label-third-party-libraries",
            "text": "Third party libraries that are used within an Opencast system in production need to be listed in the  NOTICES  file,\nwhich can be found in the root directory of our code repository. Libraries and tools that are only used for testing or\nbuilding the project, or are run via system call, do not need to be listed (e.g. maven, maven plugins, junit, ...).",
            "title": "How To Label Third Party Libraries"
        },
        {
            "location": "/license/#javascript-libraries",
            "text": "For JavaScript libraries, list the file or folder that is included and give a short statement about the copyright and\nlicense. This can usually be taken from the copyright header at the top of the library.  Example:  modules/matterhorn-admin-ui-ng/src/main/webapp/lib/angular/*\n  AngularJS v1.3.6\n  (c) 2010-2014 Google, Inc. http://angularjs.org\n  License: MIT",
            "title": "JavaScript Libraries"
        },
        {
            "location": "/license/#java-libraries-maven-dependencies",
            "text": "Java dependencies are listed pre module. Maven provides some helpful tools to list dependencies and even report\nlibraries. Have a look at the output of  mvn dependency:list  and  mvn dependency:tree  or generate a full report for a\nmodule using:  mvn -s settings.xml project-info-reports:dependencies  This will create a file  target/site/dependencies.html  containing a full report, including the library versions and\nlicenses.  Finally, add the library and license to the  NOTICES  file in the form:  rn-workflow-service-remote\n  GroupId       ArtifactId    License\n  commons-io    commons-io    The Apache Software License, Version 2.0",
            "title": "Java Libraries / Maven Dependencies"
        },
        {
            "location": "/localization/",
            "text": "Introduction\n\n\nThe Opencast project uses the\n\nCrowdin Localization Management Platform\n for translating\nOpencast into a variety of languages.\n\n\nThe English translation (en-US) acts as source language that is translated to other languages using Crowdin.\nWhile all translation files are located in the Opencast code repository, only the English translation should\nbe modified in the code repository - all other translation files are downloaded from Crowdin.\n\n\nImportant:\n \nAll translation files for languages other than English (en-US) are downloaded from Crowdin.\nModifications to the translation files in the Opencast code repository will be regularly overwritten and\ntherefore will be lost!\n\n\nNote that Crowdin managers take care of uploading the English sources (and possibly translations) to Crowdin and download the\nothers translations from Crowdin.\n\n\nCrowdin Managers\n\n\nCrowdin managers are persons with privileged access to Crowdin needed to upload new files to be translated to Crowdin.\nThe rest of document should help future Crowdin managers to get familiar with Crowdin quickly.\n\n\nVersioning\n\n\nCrowdin supports versions management by allowing the management of multiple branches. The relation of\nOpencast code repository branches to Crowdin branches follows the following convention:\n\n\nThe Opencast branch \nr/a.b.x\n corresponds to Crowdin branch \na.b.x\n.\n\n\nCrowdin does automatically detect equal strings across branches so there is no need to configure anything when\na new branch is created.\n\n\nWhen releasing a new version \na.b.c\n of Opencast, the following actions must be performed to keep the Opencast code\nrepository in sync with Crowdin:\n\n\n\n\nDownload the translations from Crowdin branch \na.b.x\n\n\nCommit the downloaded translations into the Opencast branch \nr/a.b.x\n\n\nRelease Opencast \na.b.c\n\n\nMerge Opencast branch \nr/a.b.x\n into Opencast branch \ndevelop\n\n\nUpload sources of Opencast branch \ndevelop\n to Crowdin branch \ndevelop\n\n\nUpload translations of Opencast branch \ndevelop\n to Crodwin branch \ndevelop\n\n\n\n\nWorking with Crowdin CLI\n\n\nThe Crowdin CLI command line tool is used to synchronize the source language files and\ntranslations between the Opencast code repository and the Crowdin project \nOpencast\n. \n\n\nThe Crowdin CLI configuration can be found in \n/.crowdin.yaml\n\n\nPlease perform the following steps to get the tool running on your local host:\n\n\n\n\nDownload the \nCrowdin CLI tool\n\n\nGet the API key for the project \nOpencast\n \n\nhere\n\n\nAdd the following line to the Crowdin configuration file found in the Opencast code repository just after\nthe first line:\napi_key: <secret key>\n\n\n\n\n\n\n\nNow you can use the Crowdin CLI command line tool to upload source language files and download translations.\n\n\nTo upload the sources from the Opencast code repository to Crowdin, use the following command:\n\n\njava -jar crowdin-cli.jar --config .crowdin.yaml upload sources -b <branch>\n\n\n\nIn case you need to upload the translations from the Opencast code repository branch \n<branch>\n, use the command:\n\n\njava -jar crowdin-cli.jar --config .crowdin.yaml upload translations -b <branch>\n\n\n\nNote that the branch \n<branch>\n will be automatically created if it is not yet existing.\n\n\nTo download the translations from Crowdin, use the following command:\n\n\njava -jar crowdin-cli.jar --config .crowdin.yaml download -b <branch>\n\n\n\nReferences\n\n\n\n\nCrowdin Opencast Project\n\n\nCrowdin CLI Documentation\n\n\nCrowdin Versions Management Documentation\n\n\nCrowdin Language Codes",
            "title": "Localization"
        },
        {
            "location": "/localization/#introduction",
            "text": "The Opencast project uses the Crowdin Localization Management Platform  for translating\nOpencast into a variety of languages.  The English translation (en-US) acts as source language that is translated to other languages using Crowdin.\nWhile all translation files are located in the Opencast code repository, only the English translation should\nbe modified in the code repository - all other translation files are downloaded from Crowdin.  Important:   All translation files for languages other than English (en-US) are downloaded from Crowdin.\nModifications to the translation files in the Opencast code repository will be regularly overwritten and\ntherefore will be lost!  Note that Crowdin managers take care of uploading the English sources (and possibly translations) to Crowdin and download the\nothers translations from Crowdin.",
            "title": "Introduction"
        },
        {
            "location": "/localization/#crowdin-managers",
            "text": "Crowdin managers are persons with privileged access to Crowdin needed to upload new files to be translated to Crowdin.\nThe rest of document should help future Crowdin managers to get familiar with Crowdin quickly.",
            "title": "Crowdin Managers"
        },
        {
            "location": "/localization/#versioning",
            "text": "Crowdin supports versions management by allowing the management of multiple branches. The relation of\nOpencast code repository branches to Crowdin branches follows the following convention:  The Opencast branch  r/a.b.x  corresponds to Crowdin branch  a.b.x .  Crowdin does automatically detect equal strings across branches so there is no need to configure anything when\na new branch is created.  When releasing a new version  a.b.c  of Opencast, the following actions must be performed to keep the Opencast code\nrepository in sync with Crowdin:   Download the translations from Crowdin branch  a.b.x  Commit the downloaded translations into the Opencast branch  r/a.b.x  Release Opencast  a.b.c  Merge Opencast branch  r/a.b.x  into Opencast branch  develop  Upload sources of Opencast branch  develop  to Crowdin branch  develop  Upload translations of Opencast branch  develop  to Crodwin branch  develop",
            "title": "Versioning"
        },
        {
            "location": "/localization/#working-with-crowdin-cli",
            "text": "The Crowdin CLI command line tool is used to synchronize the source language files and\ntranslations between the Opencast code repository and the Crowdin project  Opencast .   The Crowdin CLI configuration can be found in  /.crowdin.yaml  Please perform the following steps to get the tool running on your local host:   Download the  Crowdin CLI tool  Get the API key for the project  Opencast   here  Add the following line to the Crowdin configuration file found in the Opencast code repository just after\nthe first line: api_key: <secret key>    Now you can use the Crowdin CLI command line tool to upload source language files and download translations.  To upload the sources from the Opencast code repository to Crowdin, use the following command:  java -jar crowdin-cli.jar --config .crowdin.yaml upload sources -b <branch>  In case you need to upload the translations from the Opencast code repository branch  <branch> , use the command:  java -jar crowdin-cli.jar --config .crowdin.yaml upload translations -b <branch>  Note that the branch  <branch>  will be automatically created if it is not yet existing.  To download the translations from Crowdin, use the following command:  java -jar crowdin-cli.jar --config .crowdin.yaml download -b <branch>",
            "title": "Working with Crowdin CLI"
        },
        {
            "location": "/localization/#references",
            "text": "Crowdin Opencast Project  Crowdin CLI Documentation  Crowdin Versions Management Documentation  Crowdin Language Codes",
            "title": "References"
        },
        {
            "location": "/packaging/",
            "text": "Packaging Guidelines\n\n\nThis page is intended as a guideline for packagers. It may help to figure out where to place parts of Opencast.  The\nlocations, etc. proposed here should never overrule the official packaging guides for a specific operating system or\ndistribution.  If in doubt follow the guides for your distribution like for example the \nFedora Packaging\nGuidelines\n\n\nIntroduction\n\n\nIn a Unix file system there are different places for different types of data. Executables, for example, may be placed in\n\n/usr/bin\n, libraries in \n/usr/lib\n, etc. These places are defined by the operating system distributor and the\n\nFilesystem Hierarchy Standard\n. Latter is followed by almost every major\ndistributor, but not everything in there is clearly defined.\n\n\nEspecially software which is installed automatically\u2013for example software from RPM or DEB repositories\u2013should follow\nthese rules so conflicts are minimized and the user will have one place to look for one kind of data. For example if you\nare searching for a system-wide configuration file for any software on Linux every user will always look in \n/etc\n.\n\n\nIf you want to package Opencast use the following documentations to decide where to place files:\n\n\n\n\nDistribution guidelines like the \nFedora Packaging Guidelines\n\n\nFilesystem Hierarchy Standard\n\n\nThis Guide\n\n\n\n\nLocations To Use\n\n\nThe following locations should be used for Opencast and its related data:\n\n\n\n\n/usr/share/opencast\n:\n   Software and data not modified by Opencast. This includes felix, the Opencast modules and external libraries.\n\n\n/etc/opencast\n:\n   Opencast related configuration files (Felix and service configuration, workflows, encoding profiles, etc.)\n\n\n/var/log/opencast\n:\n   The Opencast logfiles. Consider to enable logrotate for this directory.\n\n\n/srv/opencast\n or \n/var/lib/opencast\n:\n   Opencast storage, including the recordings, the archive, the Solr indexes, etc. You may use one of these\n   directories or both. For more details have a look at the explanation below and the discussion in the comments.\n\n\n/tmp/opencast\n:\n   Temporary data which are not necessarily preserved between reboots. This includes the felix-cache and other temporary\n   data.\n\n\n/usr/sbin/opencast\n:\n   Opencast startscript\n\n\n/etc/init.d/opencast\n\n   SysV-Initscript (if necessary)\n\n\n\n\nReasoning for these Locations\n\n\n/usr/share/opencast \u2013 Opencast Software Components\n\n\nThe Filesystem Hierarchy Standard states that \u201c\nThe /usr/share hierarchy is for all read-only architecture independent\ndata files.\n\u201d and that \u201c\nAny program or package which contains or requires data that does not need to be modified should\nstore that data in /usr/share\n\u201d.  It is also used for this purpose by cups, emacs, cmake, pulseaudio, gimp, \u2026 It sould\nbe used for felix.jar and all the modules (lib directory)\n\n\n/etc/opencast \u2013 Opencast Configuration\n\n\nThe Filesystem Hierarchy Standard states that \u201c\nThe /etc hierarchy contains configuration files. A \"configuration file\"\nis a local file used to control the operation of a program; it must be static and cannot be an executable binary.\n\u201d\n\n\n/var/log/opencast/ \u2013 Opencast Logs\n\n\nThe Filesystem Hierarchy Standard states that \u201c\nThis directory contains miscellaneous log files. Most logs must be\nwritten to this directory or an appropriate subdirectory.\n\u201d\n\n\n/srv/opencast and/or /var/lib/opencast/ \u2013 Data modified by Opencast\n\n\nAbout this the Filesystem Hierarchy Standard says that \u201c\nThis hierarchy holds state information pertaining to an\napplication or the system. State information is data that programs modify while they run, \u2026\n\u201d also \u201c\n/var/lib/\n is\nthe location that must be used for all distribution packaging support\u2026\n\u201d\n\n\nWhy Not Use /opt For Packages\n\n\nWhile it is ok to place software in \n/opt\n if you install the manually as \n/opt\n is intended to be used for \u201c\nAdd-on\napplication software\n\u201d by the Filesystem Hierarchy Standard, it should never be used for automatic installations (RPMs\nDebian packages, \u2026).. The Fedora Packaging Guidelines for example are pretty clear about this:\n\n\n\u201c*No Files or Directories under /srv, /opt, or /usr/local [\u2026] In addition, no Fedora package can have any files or\ndirectories under /opt or /usr/local, as these directories are not permitted to be used by Distributions in the FHS.\n\n\nThe reason for this is that the FHS is handing control of the directory structure under /opt to the system administrator\nby stating that \u201c\nDistributions [\u2026] must not modify or delete software installed by the local system administrator \u2026\n\u201d.\n\n\nThat is something you cannot guarantee with automatic installations. For example if you use RPMs, the only way to do\nthis would be to mark every single file (binaries, modules, assets, \u2026) as configuration files which are not to be\nreplaced in case they are modified. It is quite obvious that this would be a a really bad idea leading to a number of\nfurther problems.\n\n\nNotice For System Operators\n\n\nThis guide is supposed to defines default locations for an Opencast system. It does not restrict your own system\nconfiguration.\n\n\nFor a Opencast system it is for example quite common to mount an external storage (NFS, \u2026) and use it as storage for\nOpencast. You do not have to mount it to \n/var/lib/opencast\n if you do not want to. Instead, mount it in /media or\nwherever you want\u2013it is your system afterall\u2013and either change the Opencast configuration to use the directory of your\ndirectly, or put appropriate symlinks in \n/var/lib/opencast\n. This is, however, system specific and should not be done\nfor packages.",
            "title": "Packaging"
        },
        {
            "location": "/packaging/#packaging-guidelines",
            "text": "This page is intended as a guideline for packagers. It may help to figure out where to place parts of Opencast.  The\nlocations, etc. proposed here should never overrule the official packaging guides for a specific operating system or\ndistribution.  If in doubt follow the guides for your distribution like for example the  Fedora Packaging\nGuidelines",
            "title": "Packaging Guidelines"
        },
        {
            "location": "/packaging/#introduction",
            "text": "In a Unix file system there are different places for different types of data. Executables, for example, may be placed in /usr/bin , libraries in  /usr/lib , etc. These places are defined by the operating system distributor and the Filesystem Hierarchy Standard . Latter is followed by almost every major\ndistributor, but not everything in there is clearly defined.  Especially software which is installed automatically\u2013for example software from RPM or DEB repositories\u2013should follow\nthese rules so conflicts are minimized and the user will have one place to look for one kind of data. For example if you\nare searching for a system-wide configuration file for any software on Linux every user will always look in  /etc .  If you want to package Opencast use the following documentations to decide where to place files:   Distribution guidelines like the  Fedora Packaging Guidelines  Filesystem Hierarchy Standard  This Guide",
            "title": "Introduction"
        },
        {
            "location": "/packaging/#locations-to-use",
            "text": "The following locations should be used for Opencast and its related data:   /usr/share/opencast :\n   Software and data not modified by Opencast. This includes felix, the Opencast modules and external libraries.  /etc/opencast :\n   Opencast related configuration files (Felix and service configuration, workflows, encoding profiles, etc.)  /var/log/opencast :\n   The Opencast logfiles. Consider to enable logrotate for this directory.  /srv/opencast  or  /var/lib/opencast :\n   Opencast storage, including the recordings, the archive, the Solr indexes, etc. You may use one of these\n   directories or both. For more details have a look at the explanation below and the discussion in the comments.  /tmp/opencast :\n   Temporary data which are not necessarily preserved between reboots. This includes the felix-cache and other temporary\n   data.  /usr/sbin/opencast :\n   Opencast startscript  /etc/init.d/opencast \n   SysV-Initscript (if necessary)",
            "title": "Locations To Use"
        },
        {
            "location": "/packaging/#reasoning-for-these-locations",
            "text": "",
            "title": "Reasoning for these Locations"
        },
        {
            "location": "/packaging/#usrshareopencast-opencast-software-components",
            "text": "The Filesystem Hierarchy Standard states that \u201c The /usr/share hierarchy is for all read-only architecture independent\ndata files. \u201d and that \u201c Any program or package which contains or requires data that does not need to be modified should\nstore that data in /usr/share \u201d.  It is also used for this purpose by cups, emacs, cmake, pulseaudio, gimp, \u2026 It sould\nbe used for felix.jar and all the modules (lib directory)",
            "title": "/usr/share/opencast \u2013 Opencast Software Components"
        },
        {
            "location": "/packaging/#etcopencast-opencast-configuration",
            "text": "The Filesystem Hierarchy Standard states that \u201c The /etc hierarchy contains configuration files. A \"configuration file\"\nis a local file used to control the operation of a program; it must be static and cannot be an executable binary. \u201d",
            "title": "/etc/opencast \u2013 Opencast Configuration"
        },
        {
            "location": "/packaging/#varlogopencast-opencast-logs",
            "text": "The Filesystem Hierarchy Standard states that \u201c This directory contains miscellaneous log files. Most logs must be\nwritten to this directory or an appropriate subdirectory. \u201d",
            "title": "/var/log/opencast/ \u2013 Opencast Logs"
        },
        {
            "location": "/packaging/#srvopencast-andor-varlibopencast-data-modified-by-opencast",
            "text": "About this the Filesystem Hierarchy Standard says that \u201c This hierarchy holds state information pertaining to an\napplication or the system. State information is data that programs modify while they run, \u2026 \u201d also \u201c /var/lib/  is\nthe location that must be used for all distribution packaging support\u2026 \u201d",
            "title": "/srv/opencast and/or /var/lib/opencast/ \u2013 Data modified by Opencast"
        },
        {
            "location": "/packaging/#why-not-use-opt-for-packages",
            "text": "While it is ok to place software in  /opt  if you install the manually as  /opt  is intended to be used for \u201c Add-on\napplication software \u201d by the Filesystem Hierarchy Standard, it should never be used for automatic installations (RPMs\nDebian packages, \u2026).. The Fedora Packaging Guidelines for example are pretty clear about this:  \u201c*No Files or Directories under /srv, /opt, or /usr/local [\u2026] In addition, no Fedora package can have any files or\ndirectories under /opt or /usr/local, as these directories are not permitted to be used by Distributions in the FHS.  The reason for this is that the FHS is handing control of the directory structure under /opt to the system administrator\nby stating that \u201c Distributions [\u2026] must not modify or delete software installed by the local system administrator \u2026 \u201d.  That is something you cannot guarantee with automatic installations. For example if you use RPMs, the only way to do\nthis would be to mark every single file (binaries, modules, assets, \u2026) as configuration files which are not to be\nreplaced in case they are modified. It is quite obvious that this would be a a really bad idea leading to a number of\nfurther problems.",
            "title": "Why Not Use /opt For Packages"
        },
        {
            "location": "/packaging/#notice-for-system-operators",
            "text": "This guide is supposed to defines default locations for an Opencast system. It does not restrict your own system\nconfiguration.  For a Opencast system it is for example quite common to mount an external storage (NFS, \u2026) and use it as storage for\nOpencast. You do not have to mount it to  /var/lib/opencast  if you do not want to. Instead, mount it in /media or\nwherever you want\u2013it is your system afterall\u2013and either change the Opencast configuration to use the directory of your\ndirectly, or put appropriate symlinks in  /var/lib/opencast . This is, however, system specific and should not be done\nfor packages.",
            "title": "Notice For System Operators"
        },
        {
            "location": "/proposal-log/",
            "text": "Opencast Proposals\n\n\nAll important decisions for Opencast have to be made on list. To do that committers may send proposals (marked with\n\n#proposal\n) to list on which other committers may then vote. Opencast uses lazy consensus meaning that no response\nsignals agreement. Apart from that committers may vote with:\n\n\n\n\n+1\n yes, agree - also willing to help bring about the proposed action\n\n\n+0\n yes, agree - not willing or able to help bring about the proposed action\n\n\n-0\n no, disagree - but will not oppose the action going forward\n\n\n-1\n veto, disagree - opposes the action going forward and must propose an alternate action to address the issue or a\n   justification for not addressing the issue\n\n\n\n\nA proposal is accepted when no veto (\n-1\n) is voted within a time spawn of 72 hours (not counting weekends) after being sent to list.\n\n\nPassed Proposals\n\n\nDocumentation Pull Request Merge Order\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, passed on Thu, 25 Feb 2016 20:52:00 UTC\n\n\nHi everyone, \nas discussed in this weeks technical meeting, I hereby #propose to \nallow out-of-order merges of documentation pull requests in the same way \nwe have this exception for bug-fixes.\n\nto be precise, I #propose to change the development process docs for \nreviewing and merging [1] in the following way:\n\n[old]\n\n - Pull requests for bug fixes (t/MH-XXXXX-...) may be reviewed and \n   merged out of order.\n\n[new]\n\n - Pull requests for bug fixes or documentation may be reviewed and \n   merged out of order.\n\nRegards, \nLars\n\n[1] https://docs.opencast.org/develop/developer/reviewing-and-merging/\n\n\n\nRemoving instances of print statements with a style rule #proposal\n\n\nProposed by Greg Logan \ngregorydlogan@gmail.com\n, passed on Wed, 12 Feb 2016 12:00:00 UTC\n\n\nHi folks,\n\nI noticed in a recently review that there are still System.out.println \nstatements in use in our codebase.  I was surprised, because thought we had\npreviously implemented a checkstyle rule which would have banned those \nstatements!  I hereby #propose that we implement the changes outlined in \nhttps://opencast.jira.com/browse/MH-11222, and remove these statements in \nfavour of logger statements.  I also propose that we add this rule to the \ncheckstyle ruleset so that we don't have to deal with this again going \nforward.  Proposal closes EOD 2016-02-03.\n\nG\n\n\n\nHow to release a new Opencast version\u2026\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, passed on Fri, 14 Aug 2015 12:54:51 UTC\n\n\nHi everyone,\nserving as co-release manager for two versions of Opencast, I noticed\nthat our current release process has some aspects of the release defined\nin a way that is more hindering than helpful and I want to #propose a\nslight change to these recommendations.\n\nI hereby #propose:\n\n1. Get rid of the `master` branch, make `develop` the main branch.\n2. Do not use the --no-ff flags for merges\n3. Do not create versions/tags in a release branch. Separate them.\n\n\nReasoning:\n\n1. The short explanation whould be: When did you explicitely checked\n   out `master` last time? People rarely do that. If I want a specific\n   version, I use the tag, if not I want the release branch or\n   `develop`.\n   If you think about it, then the whole reason for `master` in GitFlow\n   is to always provide the last stable version to users who just check\n   out the repository and do nothing else. The problem with Opencast is,\n   that we support multiple versions at the same time. If in a couple\n   of weeks 1.6.2 is being released, it is the latest stable. Is it? If\n   I check out `master`, however, I will still get 2.0 as we cannot\n   merge 1.6.x afterwards. While you can grasp the reasons behind this,\n   it is a bit confusing for users and it is much easier to just tell\n   them to use the tag to check out a specific version.\n   That it, if they do not use the tarballs from BitBucket anyway.\n\n2. First of all, most people seem to be using BitBucket for\n   auto-merging and it does not use --no-ff. So we are not really\n   consistent anyway. Being consistent and using  --no-ff would mean to\n   forbid the usage of the BitBucket merge.\n   Second, have a look at the confusing mess that are the current\n   branches (I tried to find something in the visualization a while ago\n   but gave up). It would be much cleaner to try using fast-forward\n   merges. So instead of using non-fast-forward commits I would argue\n   that we should instead try to use as many fast-forward commits as\n   possible.\n\n3. Once we decided to have the tags in our branches like this:\n\n      ---- A ---- B (tagged) ----- C ---- D -->\n\n   A is the commit containing the version that is decided to be\n   released. B is the tagged version. It is exactly the same code as A\n   except for the pom.xml versions that are modified. Finally C then\n   reverts B as the modified version should not be part of the release\n   branch, .... After C, the code is basically A again except for the\n   history (which we later need to merge which can be problematic). D\n   would then be the next \u201creal\u201d commit, meaning the next fix.\n\n   Much easier to handle would be the following structure:\n\n     ---- A ---- D -->\n           \\\n            B (tagged)\n\n   You do not have to revert that commit, you do not need to merge the\n   easily conflicting pom.xml changes and in the end, you would anyway\n   check out the tag using  git checkout <tag>  if you want that\n   specific version\n\n\nBranching structure:\n\nTo have a complete overview, this is what the new branching structure\nwould look like:\n\n\n  develop --*--*--*--*--*----*--------*--------*---->\n                   \\        /                 /\n            r/x.y.z *--*--*---*--*--*--*--*--*---->\n                           \\                  \\\n                            * x.y.z-beta1      * x.y.z-rc1\n\nRegards,\nLars\n\n\n\nMoving away from the 3rd party scripts\n\n\nProposed by Greg Logan \ngregorydlogan@gmail.com\n, passed by Fri, 24 Jul 2015 16:45:40 UTC\n\n\nHi folks,\n\nAs it stands right now we depend on the 3rd party tool script to\ninstall a great many of our 3rd party dependencies.  These are\nutilities like tesseract, ffmpeg, sox, etc.  This script is maintained\nby Matjaz, in his own time.  I'd like to take a moment to thank him\nfor a doing a great job on a particularly annoying aspect of\nsupporting our work!  I know it hasn't been easy, especially\nsupporting vast number of different OS versions!\n\nWith the release of 2.0 I noticed that our 3rd party tool script is\nbecoming both a little out of date, and difficult to maintain.  I took\na quick look around and it seems like *most* of our dependencies are\navailable from normal distribution repositories for Debian based\nsystems, and I'm told that there is a similar situation for Redhat\nbased systems.  I am unsure of how many of our users are running\nMatterhorn on Mac, but I would hope that our developers who are\nworking on Mac would be able to provide instructions and/or binaries\nfor those users.  The only dependency where there might be a universal\nsticking point is ffmpeg (due to patent concerns), however ffmpeg\nbuilds a full static binary with each release, so I assume we can\neither depend on this and/or cache them somewhere.\n\nWhat this means is that we can potentially remove the 3rd party script\nfrom our repository.  I hereby #propose we find a way to do that,\nwhich would remove the 3rd party script from the repository and\nreplace it with a number of new steps in the install documentation.\n\nG\n\n\n\nStatus of youtube in 2.0 and #proposal to change the default workflow\n\n\nProposed by R\u00fcdiger Rolf \nrrolf@Uni-Osnabrueck.DE\n, passed on Sat, 13 Jun 2015 14:15:55 UTC\n\n\nHi list!\n\nThere was some discussion in the DevOps meeting yesterday if the\nYoutube distribution would work or not. I offered to check this.\n\nThe good news first: IT WORKS!\nJust follow this manual and your Matterhorn - ups Opencast -  is ready\nto distribute to Youtube.\n\n  http://docs.opencast.org/r/2.0.x/admin/modules/youtubepublication/\n\nThe bad news: The default workflow definition does not really support\nthe publishing on Youtube, as only one video file could be published\nby the current WOH.\n\n  https://opencast.jira.com/browse/MH-10920\n\nThe reason is simple and the fix would be too. But there are some\noptions to fix this:\n\n1. Remove the option to distribute to Youtube from the default workflow\n   definition, as the complicated configuration would have to come\n   first anyway.\n2. Only let \"presenter\" or \"presentation\" be published to Youtube. We\n   would need a new youtube tag and add this to the compose operation\n   and the youtube operation.\n3. Introduce the composite operation to the workflow definition and\n   publish only the resulting single stream to Youtube.\n4. Upgrade the WOH to support publishing of multiple files.\n\nI would say that option 4 could be 2.1 goal, but not for 2.0.\n\nI would #propose to go for option 1, as nobody can use Youtube\nout-of-the-box anyway. And the admin could then setup  an appropriate\nYoutube workflow for their needs too.\n\nRegards\nR\u00fcdiger\n\n\n\nEpisode DublinCore Catalog\n\n\nProposed by Karen Dolan \nkdolan@dce.harvard.edu\n, Passed on Sat, 30 May 2015 12:39:05 UTC\n\n\nDear Opencast-ees,\n\nThe following proposal addresses MH-10821[1]. An issue that exposes a\nknow long time ambiguity regarding metadata and the ingest service.\nThe reason that its a proposal is that it normalizes the handling of\ninbound episode catalog metadata in the ingest service.\n\n\n1) A new configuration parameter, boolean, for the Ingest Service. The\n   config param identifies if episode metadata precedence is for\n   Ingestee (i.e. Opencast system) or the Ingester (i.e. Capture\n   Agent).\n\n   For example: at our site, the scheduling entity is the metadata\n   authority. All updates are made to the Scheduling endpoint. The\n   Capture Agent always has stale episode catalog metadata. At other\n   sites, updates are made on the Capture Agent directly. The\n   community default can be for priority to the Capture Agent.\n\n2) All Ingest endpoints perform the same consistent process to ensure\n   that an episode catalog will exist, manually or automatically\n   provided.\n\n3) The process performs the following...\n\n3.1. Gather data\n\n - Check if inbound media package contain a reference to an Episode\n   DublinCore catalog and if that catalog contains a title.\n - Check if the inbound media package contains a title attribute.\n - Check if the Workflow service has a reference to the mediapackage's\n   Episode Dublin Core catalog\n - Check if the Scheduler service retained a reference to the event's\n   Episode Dublin Core catalog\n\n3.2. Use config param to prioritize action on acquiring an Episode dc\n   catalog for the media package\n\n  If Capture Agent metadata takes precedence:\n     - Take the inbound Episode dc catalog, if it exists\n     - Take the Episode dc catalog from the workflow service, if it\n       exists\n     - Take the Episode dc  catalog from the scheduler service, if it\n       exists\n     - Create an Episode dc catalog from the title in the media\n       package,, if it exists\n     - Create an Episode dc catalog using a default title (i.e.\n       \"Recording-1234556XYZ\")\n\n If Opencast metadata takes precedence:\n     - Take the Episode dc catalog from the workflow service, if it\n       exists\n     - Take the Episode dc  catalog from the scheduler service, if it\n       exists\n     - Take the inbound Episode dc catalog if it exists\n     - Create an Episode dc catalog from the title in the media\n       package, if it exists\n     - Create an Episode dc catalog using a default title (i.e.\n       \"Recording-1234556XYZ\")\n\nI'll start a pull for the above, and appreciate any thoughts.\n\nRegards,\nKaren\n\n[1] https://opencast.jira.com/browse/MH-10821\n\n\n\nDropping Taglines\n\n\nProposed by  Greg Logan \ngregorydlogan@gmail.com\n, Passed on Fri, 29 May 2015 16:19:09 UTC\n\n\nHi folks,\n\nI hereby propose that we drop the practice of having taglines.  I\npropose this because we don't have a place in the new admin UI to put\nthem, nor have I ever heard any of the adopters make use of it.  I know\nwe don't use it as a committing group, which means that *no one* is\nusing them.\n\nG\n\n\n\nWiki Cleanup\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, Passed on Fri, 24 May 2015 11:36:49 UTC\n\n\nHi everyone,\nsince we partly switched to our new documentation [1] I would like to\nmake sure that the old and mostly outdated documentation goes away so\nthat no one stumbles upon that. When I had a look at the wikis we\ncurrently have I noticed that most of our 17(!) wikis have not been\ntouched in years and can probably go away.\n\nHere is a list of our wikis and what I #propose to do with/to them:\n\nKeep (maybe clean-up a bit):\n - Matterhorn Adopter Guides\n - Matterhorn Developer Wiki\n - Opencast Matterhorn D/A/CH\n - Opencast Matterhorn Espa\u00f1ol\n - LectureSight\n\nExport as PDF to archive the contents and then delete:\n - Matterhorn Release Docs - 1.0\n - Matterhorn Release Docs - 1.1\n - Matterhorn Release Docs - 1.2\n - Matterhorn Release Docs - 1.3\n - Matterhorn Release Docs - 1.4\n - Matterhorn Release Docs - 1.5\n - Matterhorn Release Docs - TRUNK\n\nKeep until 2.1 is out then export as PDF and delete:\n - Matterhorn Release Docs - 1.6\n\nJust delete:\n - Analytic video annotation\n - Infra\n - Matterhorn Documents\n - Opencast Community\n\n\nPlease let me know if you agree or disagree with this proposal.\n\nRegards,\nLars\n\n[1] http://documentation.opencast.org\n\n\n\nJira Clean-Up\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, Passed on Fri, 8 May 2015 11:52:16 UTC\n\n\nHi everyone,\nas discussed in the technical meeting, I hereby #propose:\n\n  The \u201cBlocker\u201d and \u201cRelease Blocker\u201d severity status are more or less\n  redundant. As part of cleaning up Jira, let us remove the \u201cRelease\n  Blocker\u201d severity in favor of \u201cBlocker\u201d.\n\nAs footnote, some statistics: Since the beginning of 2014, 70 Release\nBlockers have been files in Jira while mere *8* Blockers have been\nfiles.\n\nRegards,\nLars\n\n\n\nOpencast Documentation\n\n\nProposed by R\u00fcdiger Rolf \nrrolf@uni-osnabrueck.de\n, Passed on Sat, 02 May 2015 14:43:28 UTC\n\n\nHi all,\n\nTobias, Basil, Lars and I discussed status of the current migration of\nthe Opencast (Matterhorn) documentation to GIT. We still see some open\nissues that need clarification so we would like to propose the\nfollowing points:\n\n*1. Formating and Hosting of the Documentation *\n\nWe want to use https://readthedocs.org to or a similar service create\na more appealing HTML version from the Markdown of the documentation.\n\nThe documentation will be versioned there so that for older versions\nthe documentation is still available. By default the \"latest\" version\nis shown.  The versions of the documenation will be generated based on\nthe release branches.\n\n*2. Structure of the Documentation*\n\nWe see the documentation in*Git *separating into 3 sections:\n\n - /Administration Guide/: with information about the installation,\n   configuration, customization and integration. This will be the part\n   of information by an administrator to setup\n   Opencast.\n\n - /Developer Guide/: All information related to implementation\n   details of Opencast, so that this will be updated in a pull request\n   (API changes, module descriptions, architecture). The development\n   process documents should also go here as only committers usually\n   should change these.\n\n - /User Guide/: Documentation of the (new) Admin UI that was already\n   started by Entwine and the Engage UI (especially Theodul Player).\n   This guide should only describe options available on the UIs.\n\nWithin the *Wiki* we still see the need for 2 sections:\n\n - /Developer Wiki/: Proposals, working documents and meeting notes\n   will be kept here so that anybody can edit these. So information\n   not to close to any existing implementation that might still be in\n   a process of discussion can be found here.\n\n - /Adopters Wiki/: This can be the place where adopters share their\n   best practises, configurations, hardware recommendations,\n   third-party software documentation etc. Again anyone can contribute\n   to this wiki.\n\nThe difference between the Wiki and Git is in the first line that the\nGit documentation should become a quality assured ressource for\nOpencast users. The Git documentation should be reviewed within the\nrelease process and it will be part of the review process of a pull\nrequest, to make sure that the needed documentation changes have been\ncontributed too.\n\nThe Wikis on the other hand should be a more open platform where\neverybody can contribute and users might find cookbooks to enhance\ntheir system, or they can share ideas.\n\nSo now we would like to get your opinion on this proposal.\n\nThank you,\nR\u00fcdiger\n\n\n\nRequirement Specification\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, Passed on Thu, 16 Apr 2015 15:55:31 UTC\n\n\nOn list or IRC we often see that people do not really know the current\nrequirements for a specific version of Opencast Matterhorn. Of course\nthere are the pom.xml files specifying internal dependencies, but there\nis nothing for 3rd-party-tools, ...\n\nIt would be nice to add a file specifying these requirements in a\nformat that is easy to parse and can hence be used for automatic\nscripts to generate dependency lists, ...\n\nThat is why I hereby #propose to add a requirements.xml file that\nspecifies the requirements for Opencast Matterhorn:\n - Required tools including versions\n - Which modules require which tools\n - Which modules conflict with each other (negative requirement)\n\nThis is mainly what is not specified by the pom.xml files yet.\n\n\n\nJira Clean-Up (Tags VS Labels)\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, Passed on Thu, 19. Mar 2015 15:43:20 UTC\n\n\n\u2026then hereby I officially #propose removing the labels from Jira.\n\n\n\nFor more details, have a look at the mail thread at:\n\n\nhttps://groups.google.com/a/opencast.org/forum/#!topic/matterhorn/vIdWQkZmbdQ\n\n\n\nFFmpeg Update\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, Passed on Sat, 14 Mar 2015 22:12:18 UTC\n\n\nLooking at the FFmpeg project for the last two years, you will notice\nthat they developed a pretty stable release cycle with a release of a\nnew stable version approximately every three month.\n\nTo stop us from having to propose an update again and again, I hereby\npropose the following general rule for our support of FFmpeg:\n\n  A Matterhorn release will oficially support the latest stable\n  version of FFmpeg released at the time the release branch is cut and\n  all other FFmpeg versions with the same major version number released\n  afterwards.\n\nFor example, for Matterhorn 2 this would mean that we will officially\nsupport FFmpeg 2.5.4 and all later 2.x versions like 2.6 which has\nbeen released on the 7th of March or a possible 2.7 onece it is\nreleased. We would, however, not necessarily support an FFmpeg 3 as it\n*might* come with an interface change that *could* break compatibility.\n\nThat obviously does not mean that older versions of FFmpeg just stop\nworking. In fact, most parts of the default Matterhorn configuration\nshould at the moment still work with FFmpeg 1.x but we will not test or\nfix compatibility problems.\n\n\n\nProposal Log\n\n\nProposed by Lars Kiesow \nlkiesow@uos.de\n, Passed on Sat, 14 Mar 2015 16:35:08 UTC\n\n\nIt would be wonderful if we had a central place to look up the proposals\nthat have passed.\n\nThat is why I hereby propose that:\n\n - We create a proposal log in our new documentation containing all\n   proposals that have passed on list.\n\n - A proposal will become effective only after it is written down in\n   that log. That should usually be done by the person who sent out\n   that proposal.\n\nThis will, of course, not affect the existing decision making rules\n(proposal on list, marked with #proposal, lazy consensus after three\ndays, no -1, ...)",
            "title": "Proposal Log"
        },
        {
            "location": "/proposal-log/#opencast-proposals",
            "text": "All important decisions for Opencast have to be made on list. To do that committers may send proposals (marked with #proposal ) to list on which other committers may then vote. Opencast uses lazy consensus meaning that no response\nsignals agreement. Apart from that committers may vote with:   +1  yes, agree - also willing to help bring about the proposed action  +0  yes, agree - not willing or able to help bring about the proposed action  -0  no, disagree - but will not oppose the action going forward  -1  veto, disagree - opposes the action going forward and must propose an alternate action to address the issue or a\n   justification for not addressing the issue   A proposal is accepted when no veto ( -1 ) is voted within a time spawn of 72 hours (not counting weekends) after being sent to list.",
            "title": "Opencast Proposals"
        },
        {
            "location": "/proposal-log/#passed-proposals",
            "text": "",
            "title": "Passed Proposals"
        },
        {
            "location": "/proposal-log/#documentation-pull-request-merge-order",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , passed on Thu, 25 Feb 2016 20:52:00 UTC  Hi everyone, \nas discussed in this weeks technical meeting, I hereby #propose to \nallow out-of-order merges of documentation pull requests in the same way \nwe have this exception for bug-fixes.\n\nto be precise, I #propose to change the development process docs for \nreviewing and merging [1] in the following way:\n\n[old]\n\n - Pull requests for bug fixes (t/MH-XXXXX-...) may be reviewed and \n   merged out of order.\n\n[new]\n\n - Pull requests for bug fixes or documentation may be reviewed and \n   merged out of order.\n\nRegards, \nLars\n\n[1] https://docs.opencast.org/develop/developer/reviewing-and-merging/",
            "title": "Documentation Pull Request Merge Order"
        },
        {
            "location": "/proposal-log/#removing-instances-of-print-statements-with-a-style-rule-proposal",
            "text": "Proposed by Greg Logan  gregorydlogan@gmail.com , passed on Wed, 12 Feb 2016 12:00:00 UTC  Hi folks,\n\nI noticed in a recently review that there are still System.out.println \nstatements in use in our codebase.  I was surprised, because thought we had\npreviously implemented a checkstyle rule which would have banned those \nstatements!  I hereby #propose that we implement the changes outlined in \nhttps://opencast.jira.com/browse/MH-11222, and remove these statements in \nfavour of logger statements.  I also propose that we add this rule to the \ncheckstyle ruleset so that we don't have to deal with this again going \nforward.  Proposal closes EOD 2016-02-03.\n\nG",
            "title": "Removing instances of print statements with a style rule #proposal"
        },
        {
            "location": "/proposal-log/#how-to-release-a-new-opencast-version",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , passed on Fri, 14 Aug 2015 12:54:51 UTC  Hi everyone,\nserving as co-release manager for two versions of Opencast, I noticed\nthat our current release process has some aspects of the release defined\nin a way that is more hindering than helpful and I want to #propose a\nslight change to these recommendations.\n\nI hereby #propose:\n\n1. Get rid of the `master` branch, make `develop` the main branch.\n2. Do not use the --no-ff flags for merges\n3. Do not create versions/tags in a release branch. Separate them.\n\n\nReasoning:\n\n1. The short explanation whould be: When did you explicitely checked\n   out `master` last time? People rarely do that. If I want a specific\n   version, I use the tag, if not I want the release branch or\n   `develop`.\n   If you think about it, then the whole reason for `master` in GitFlow\n   is to always provide the last stable version to users who just check\n   out the repository and do nothing else. The problem with Opencast is,\n   that we support multiple versions at the same time. If in a couple\n   of weeks 1.6.2 is being released, it is the latest stable. Is it? If\n   I check out `master`, however, I will still get 2.0 as we cannot\n   merge 1.6.x afterwards. While you can grasp the reasons behind this,\n   it is a bit confusing for users and it is much easier to just tell\n   them to use the tag to check out a specific version.\n   That it, if they do not use the tarballs from BitBucket anyway.\n\n2. First of all, most people seem to be using BitBucket for\n   auto-merging and it does not use --no-ff. So we are not really\n   consistent anyway. Being consistent and using  --no-ff would mean to\n   forbid the usage of the BitBucket merge.\n   Second, have a look at the confusing mess that are the current\n   branches (I tried to find something in the visualization a while ago\n   but gave up). It would be much cleaner to try using fast-forward\n   merges. So instead of using non-fast-forward commits I would argue\n   that we should instead try to use as many fast-forward commits as\n   possible.\n\n3. Once we decided to have the tags in our branches like this:\n\n      ---- A ---- B (tagged) ----- C ---- D -->\n\n   A is the commit containing the version that is decided to be\n   released. B is the tagged version. It is exactly the same code as A\n   except for the pom.xml versions that are modified. Finally C then\n   reverts B as the modified version should not be part of the release\n   branch, .... After C, the code is basically A again except for the\n   history (which we later need to merge which can be problematic). D\n   would then be the next \u201creal\u201d commit, meaning the next fix.\n\n   Much easier to handle would be the following structure:\n\n     ---- A ---- D -->\n           \\\n            B (tagged)\n\n   You do not have to revert that commit, you do not need to merge the\n   easily conflicting pom.xml changes and in the end, you would anyway\n   check out the tag using  git checkout <tag>  if you want that\n   specific version\n\n\nBranching structure:\n\nTo have a complete overview, this is what the new branching structure\nwould look like:\n\n\n  develop --*--*--*--*--*----*--------*--------*---->\n                   \\        /                 /\n            r/x.y.z *--*--*---*--*--*--*--*--*---->\n                           \\                  \\\n                            * x.y.z-beta1      * x.y.z-rc1\n\nRegards,\nLars",
            "title": "How to release a new Opencast version\u2026"
        },
        {
            "location": "/proposal-log/#moving-away-from-the-3rd-party-scripts",
            "text": "Proposed by Greg Logan  gregorydlogan@gmail.com , passed by Fri, 24 Jul 2015 16:45:40 UTC  Hi folks,\n\nAs it stands right now we depend on the 3rd party tool script to\ninstall a great many of our 3rd party dependencies.  These are\nutilities like tesseract, ffmpeg, sox, etc.  This script is maintained\nby Matjaz, in his own time.  I'd like to take a moment to thank him\nfor a doing a great job on a particularly annoying aspect of\nsupporting our work!  I know it hasn't been easy, especially\nsupporting vast number of different OS versions!\n\nWith the release of 2.0 I noticed that our 3rd party tool script is\nbecoming both a little out of date, and difficult to maintain.  I took\na quick look around and it seems like *most* of our dependencies are\navailable from normal distribution repositories for Debian based\nsystems, and I'm told that there is a similar situation for Redhat\nbased systems.  I am unsure of how many of our users are running\nMatterhorn on Mac, but I would hope that our developers who are\nworking on Mac would be able to provide instructions and/or binaries\nfor those users.  The only dependency where there might be a universal\nsticking point is ffmpeg (due to patent concerns), however ffmpeg\nbuilds a full static binary with each release, so I assume we can\neither depend on this and/or cache them somewhere.\n\nWhat this means is that we can potentially remove the 3rd party script\nfrom our repository.  I hereby #propose we find a way to do that,\nwhich would remove the 3rd party script from the repository and\nreplace it with a number of new steps in the install documentation.\n\nG",
            "title": "Moving away from the 3rd party scripts"
        },
        {
            "location": "/proposal-log/#status-of-youtube-in-20-and-proposal-to-change-the-default-workflow",
            "text": "Proposed by R\u00fcdiger Rolf  rrolf@Uni-Osnabrueck.DE , passed on Sat, 13 Jun 2015 14:15:55 UTC  Hi list!\n\nThere was some discussion in the DevOps meeting yesterday if the\nYoutube distribution would work or not. I offered to check this.\n\nThe good news first: IT WORKS!\nJust follow this manual and your Matterhorn - ups Opencast -  is ready\nto distribute to Youtube.\n\n  http://docs.opencast.org/r/2.0.x/admin/modules/youtubepublication/\n\nThe bad news: The default workflow definition does not really support\nthe publishing on Youtube, as only one video file could be published\nby the current WOH.\n\n  https://opencast.jira.com/browse/MH-10920\n\nThe reason is simple and the fix would be too. But there are some\noptions to fix this:\n\n1. Remove the option to distribute to Youtube from the default workflow\n   definition, as the complicated configuration would have to come\n   first anyway.\n2. Only let \"presenter\" or \"presentation\" be published to Youtube. We\n   would need a new youtube tag and add this to the compose operation\n   and the youtube operation.\n3. Introduce the composite operation to the workflow definition and\n   publish only the resulting single stream to Youtube.\n4. Upgrade the WOH to support publishing of multiple files.\n\nI would say that option 4 could be 2.1 goal, but not for 2.0.\n\nI would #propose to go for option 1, as nobody can use Youtube\nout-of-the-box anyway. And the admin could then setup  an appropriate\nYoutube workflow for their needs too.\n\nRegards\nR\u00fcdiger",
            "title": "Status of youtube in 2.0 and #proposal to change the default workflow"
        },
        {
            "location": "/proposal-log/#episode-dublincore-catalog",
            "text": "Proposed by Karen Dolan  kdolan@dce.harvard.edu , Passed on Sat, 30 May 2015 12:39:05 UTC  Dear Opencast-ees,\n\nThe following proposal addresses MH-10821[1]. An issue that exposes a\nknow long time ambiguity regarding metadata and the ingest service.\nThe reason that its a proposal is that it normalizes the handling of\ninbound episode catalog metadata in the ingest service.\n\n\n1) A new configuration parameter, boolean, for the Ingest Service. The\n   config param identifies if episode metadata precedence is for\n   Ingestee (i.e. Opencast system) or the Ingester (i.e. Capture\n   Agent).\n\n   For example: at our site, the scheduling entity is the metadata\n   authority. All updates are made to the Scheduling endpoint. The\n   Capture Agent always has stale episode catalog metadata. At other\n   sites, updates are made on the Capture Agent directly. The\n   community default can be for priority to the Capture Agent.\n\n2) All Ingest endpoints perform the same consistent process to ensure\n   that an episode catalog will exist, manually or automatically\n   provided.\n\n3) The process performs the following...\n\n3.1. Gather data\n\n - Check if inbound media package contain a reference to an Episode\n   DublinCore catalog and if that catalog contains a title.\n - Check if the inbound media package contains a title attribute.\n - Check if the Workflow service has a reference to the mediapackage's\n   Episode Dublin Core catalog\n - Check if the Scheduler service retained a reference to the event's\n   Episode Dublin Core catalog\n\n3.2. Use config param to prioritize action on acquiring an Episode dc\n   catalog for the media package\n\n  If Capture Agent metadata takes precedence:\n     - Take the inbound Episode dc catalog, if it exists\n     - Take the Episode dc catalog from the workflow service, if it\n       exists\n     - Take the Episode dc  catalog from the scheduler service, if it\n       exists\n     - Create an Episode dc catalog from the title in the media\n       package,, if it exists\n     - Create an Episode dc catalog using a default title (i.e.\n       \"Recording-1234556XYZ\")\n\n If Opencast metadata takes precedence:\n     - Take the Episode dc catalog from the workflow service, if it\n       exists\n     - Take the Episode dc  catalog from the scheduler service, if it\n       exists\n     - Take the inbound Episode dc catalog if it exists\n     - Create an Episode dc catalog from the title in the media\n       package, if it exists\n     - Create an Episode dc catalog using a default title (i.e.\n       \"Recording-1234556XYZ\")\n\nI'll start a pull for the above, and appreciate any thoughts.\n\nRegards,\nKaren\n\n[1] https://opencast.jira.com/browse/MH-10821",
            "title": "Episode DublinCore Catalog"
        },
        {
            "location": "/proposal-log/#dropping-taglines",
            "text": "Proposed by  Greg Logan  gregorydlogan@gmail.com , Passed on Fri, 29 May 2015 16:19:09 UTC  Hi folks,\n\nI hereby propose that we drop the practice of having taglines.  I\npropose this because we don't have a place in the new admin UI to put\nthem, nor have I ever heard any of the adopters make use of it.  I know\nwe don't use it as a committing group, which means that *no one* is\nusing them.\n\nG",
            "title": "Dropping Taglines"
        },
        {
            "location": "/proposal-log/#wiki-cleanup",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , Passed on Fri, 24 May 2015 11:36:49 UTC  Hi everyone,\nsince we partly switched to our new documentation [1] I would like to\nmake sure that the old and mostly outdated documentation goes away so\nthat no one stumbles upon that. When I had a look at the wikis we\ncurrently have I noticed that most of our 17(!) wikis have not been\ntouched in years and can probably go away.\n\nHere is a list of our wikis and what I #propose to do with/to them:\n\nKeep (maybe clean-up a bit):\n - Matterhorn Adopter Guides\n - Matterhorn Developer Wiki\n - Opencast Matterhorn D/A/CH\n - Opencast Matterhorn Espa\u00f1ol\n - LectureSight\n\nExport as PDF to archive the contents and then delete:\n - Matterhorn Release Docs - 1.0\n - Matterhorn Release Docs - 1.1\n - Matterhorn Release Docs - 1.2\n - Matterhorn Release Docs - 1.3\n - Matterhorn Release Docs - 1.4\n - Matterhorn Release Docs - 1.5\n - Matterhorn Release Docs - TRUNK\n\nKeep until 2.1 is out then export as PDF and delete:\n - Matterhorn Release Docs - 1.6\n\nJust delete:\n - Analytic video annotation\n - Infra\n - Matterhorn Documents\n - Opencast Community\n\n\nPlease let me know if you agree or disagree with this proposal.\n\nRegards,\nLars\n\n[1] http://documentation.opencast.org",
            "title": "Wiki Cleanup"
        },
        {
            "location": "/proposal-log/#jira-clean-up",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , Passed on Fri, 8 May 2015 11:52:16 UTC  Hi everyone,\nas discussed in the technical meeting, I hereby #propose:\n\n  The \u201cBlocker\u201d and \u201cRelease Blocker\u201d severity status are more or less\n  redundant. As part of cleaning up Jira, let us remove the \u201cRelease\n  Blocker\u201d severity in favor of \u201cBlocker\u201d.\n\nAs footnote, some statistics: Since the beginning of 2014, 70 Release\nBlockers have been files in Jira while mere *8* Blockers have been\nfiles.\n\nRegards,\nLars",
            "title": "Jira Clean-Up"
        },
        {
            "location": "/proposal-log/#opencast-documentation",
            "text": "Proposed by R\u00fcdiger Rolf  rrolf@uni-osnabrueck.de , Passed on Sat, 02 May 2015 14:43:28 UTC  Hi all,\n\nTobias, Basil, Lars and I discussed status of the current migration of\nthe Opencast (Matterhorn) documentation to GIT. We still see some open\nissues that need clarification so we would like to propose the\nfollowing points:\n\n*1. Formating and Hosting of the Documentation *\n\nWe want to use https://readthedocs.org to or a similar service create\na more appealing HTML version from the Markdown of the documentation.\n\nThe documentation will be versioned there so that for older versions\nthe documentation is still available. By default the \"latest\" version\nis shown.  The versions of the documenation will be generated based on\nthe release branches.\n\n*2. Structure of the Documentation*\n\nWe see the documentation in*Git *separating into 3 sections:\n\n - /Administration Guide/: with information about the installation,\n   configuration, customization and integration. This will be the part\n   of information by an administrator to setup\n   Opencast.\n\n - /Developer Guide/: All information related to implementation\n   details of Opencast, so that this will be updated in a pull request\n   (API changes, module descriptions, architecture). The development\n   process documents should also go here as only committers usually\n   should change these.\n\n - /User Guide/: Documentation of the (new) Admin UI that was already\n   started by Entwine and the Engage UI (especially Theodul Player).\n   This guide should only describe options available on the UIs.\n\nWithin the *Wiki* we still see the need for 2 sections:\n\n - /Developer Wiki/: Proposals, working documents and meeting notes\n   will be kept here so that anybody can edit these. So information\n   not to close to any existing implementation that might still be in\n   a process of discussion can be found here.\n\n - /Adopters Wiki/: This can be the place where adopters share their\n   best practises, configurations, hardware recommendations,\n   third-party software documentation etc. Again anyone can contribute\n   to this wiki.\n\nThe difference between the Wiki and Git is in the first line that the\nGit documentation should become a quality assured ressource for\nOpencast users. The Git documentation should be reviewed within the\nrelease process and it will be part of the review process of a pull\nrequest, to make sure that the needed documentation changes have been\ncontributed too.\n\nThe Wikis on the other hand should be a more open platform where\neverybody can contribute and users might find cookbooks to enhance\ntheir system, or they can share ideas.\n\nSo now we would like to get your opinion on this proposal.\n\nThank you,\nR\u00fcdiger",
            "title": "Opencast Documentation"
        },
        {
            "location": "/proposal-log/#requirement-specification",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , Passed on Thu, 16 Apr 2015 15:55:31 UTC  On list or IRC we often see that people do not really know the current\nrequirements for a specific version of Opencast Matterhorn. Of course\nthere are the pom.xml files specifying internal dependencies, but there\nis nothing for 3rd-party-tools, ...\n\nIt would be nice to add a file specifying these requirements in a\nformat that is easy to parse and can hence be used for automatic\nscripts to generate dependency lists, ...\n\nThat is why I hereby #propose to add a requirements.xml file that\nspecifies the requirements for Opencast Matterhorn:\n - Required tools including versions\n - Which modules require which tools\n - Which modules conflict with each other (negative requirement)\n\nThis is mainly what is not specified by the pom.xml files yet.",
            "title": "Requirement Specification"
        },
        {
            "location": "/proposal-log/#jira-clean-up-tags-vs-labels",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , Passed on Thu, 19. Mar 2015 15:43:20 UTC  \u2026then hereby I officially #propose removing the labels from Jira.  For more details, have a look at the mail thread at:  https://groups.google.com/a/opencast.org/forum/#!topic/matterhorn/vIdWQkZmbdQ",
            "title": "Jira Clean-Up (Tags VS Labels)"
        },
        {
            "location": "/proposal-log/#ffmpeg-update",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , Passed on Sat, 14 Mar 2015 22:12:18 UTC  Looking at the FFmpeg project for the last two years, you will notice\nthat they developed a pretty stable release cycle with a release of a\nnew stable version approximately every three month.\n\nTo stop us from having to propose an update again and again, I hereby\npropose the following general rule for our support of FFmpeg:\n\n  A Matterhorn release will oficially support the latest stable\n  version of FFmpeg released at the time the release branch is cut and\n  all other FFmpeg versions with the same major version number released\n  afterwards.\n\nFor example, for Matterhorn 2 this would mean that we will officially\nsupport FFmpeg 2.5.4 and all later 2.x versions like 2.6 which has\nbeen released on the 7th of March or a possible 2.7 onece it is\nreleased. We would, however, not necessarily support an FFmpeg 3 as it\n*might* come with an interface change that *could* break compatibility.\n\nThat obviously does not mean that older versions of FFmpeg just stop\nworking. In fact, most parts of the default Matterhorn configuration\nshould at the moment still work with FFmpeg 1.x but we will not test or\nfix compatibility problems.",
            "title": "FFmpeg Update"
        },
        {
            "location": "/proposal-log/#proposal-log",
            "text": "Proposed by Lars Kiesow  lkiesow@uos.de , Passed on Sat, 14 Mar 2015 16:35:08 UTC  It would be wonderful if we had a central place to look up the proposals\nthat have passed.\n\nThat is why I hereby propose that:\n\n - We create a proposal log in our new documentation containing all\n   proposals that have passed on list.\n\n - A proposal will become effective only after it is written down in\n   that log. That should usually be done by the person who sent out\n   that proposal.\n\nThis will, of course, not affect the existing decision making rules\n(proposal on list, marked with #proposal, lazy consensus after three\ndays, no -1, ...)",
            "title": "Proposal Log"
        },
        {
            "location": "/modules/",
            "text": "Modules Development Guides\n\n\nThese guides will provide you information relevant for development of specific modules\nor subsystems of Opencast.\n\n\n\n\nAdmin UI\n\n\nPlayer\n\n\nArchitecture\n\n\nCore Reference\n\n\nEvents\n\n\nPersistent local storage\n\n\nCreate a new Plugin\n\n\nTesting\n\n\n\n\n\n\nStream Security",
            "title": "Overview"
        },
        {
            "location": "/modules/#modules-development-guides",
            "text": "These guides will provide you information relevant for development of specific modules\nor subsystems of Opencast.   Admin UI  Player  Architecture  Core Reference  Events  Persistent local storage  Create a new Plugin  Testing    Stream Security",
            "title": "Modules Development Guides"
        },
        {
            "location": "/modules/player/architecture/",
            "text": "Architecture\n\n\nOverview\n\n\nThe architecture of the theodul player has a plugin based structure based around a core. The core and the plugins have\nbeen realized as OSGi modules. Each plugin can be separately build.\n\n\nThe following figure shows the OSGi architecture of the player.\n\n\n\n\nAll Theodul OSGi modules are stored under:\n\n\nmodules/matterhorn-engage-theodul-*\n#Core module\nmodules/matterhorn-engage-theodul-api/\nmodules/matterhorn-engage-theodul-core/\n#A plugin module\nmodules/matterhorn-engage-theodul-plugin-*\nmodules/matterhorn-engage-theodul-plugin-tab-description/\n\n\n\nPlugin Manager\n\n\nThe main workflow is implemented by the core, which recognizes new plugins, collects information about the plugin type\nand resources, runs the JavaScript logic and inserts the first compiled templates into the HTML DOM.\n\n\nThe Plugin Manager Endpoint recognizes the OSGi modules. Each plugin has some information about its name and its\nresources. The Plugin Manager collects these information and publishes them via a REST endpoint. The following URL links\nto an example REST endpoint:\n\n\nhttp://localhost:8080/engage/theodul/manager/list.json\n\n\n\nThe documentation and test forms of the endpoint can be found on the Opencast start page. The following data in JSON\nshows an example list of plugins, which are used by the player and provided by the Plugin Manager Endpoint.\n\n\n{\n  \"pluginlist\":{\n    \"plugins\":[\n    {\n      \"name\":\"EngagePluginTabSlidetext\",\n      \"id\":\"6\",\n      \"description\":\"Simple implementation of a tab with the text of the slides\",\n      \"static-path\":\"6\\/static\"\n    },\n    {\n      \"name\":\"EngagePluginControlsMockup\",\n      \"id\":\"5\",\n      \"description\":\"Simple implementation of a control bar\",\n      \"static-path\":\"5\\/static\"\n    }]\n  }\n}\n\n\n\nNext to the Plugin Manager there is the Theodul Core module, which publishes the main HTML page, core.html.\n\n\nUI Core\n\n\nThe \ncore.html\n is the main entry point and starts the Javascript core logic. Following listing shows the directory\nstructure of core in the \nmatterhorn-engage-theodul-core OSGi\n module.\n\n\n|-src\n|---main\n|-----java          #Java impl of the plugin manager\n|-----resources\n|-------ui          #UI of the core, core.html and engage_init.js\n|---------css       #Global CSS Styles\n|---------js        #JavaScript logic\n|-----------engage  #Core logic, engage_core.js and engage_model.js\n|-----------lib     #External libraries, backbone.js, jquery.js, require.js and underscore.js\n|---test            #Unit Tests\n|-----resources\n|-------ui          #JavaScript Unit Tests\n|---------js\n|-----------spec\n\n\n\nAll Theodul JavaScript components are defined as a RequireJS module. The file \nengage_init.js\n is loaded firstly and\ncontains the configuration of RequireJS. This init script additionally loads the core module, which is defined in the\n\nengage_core.js\n.\n\n\nThe core module initializes the main HTML view. This view is realized as a BackboneJS view and is linked to a global\nBackbone model, which is stored in the model module in \nengage_model.js\n. The view is returned by the core module, so\nevery other module, which has a dependency to the core module, has a reference to the view (simply called \nEngage\n in\nthe plugins) and its functions. See the Core Reference for more information about the functions of the core view.\n\n\nPlugins\n\n\nPlugins in the Theodul player are developed and distributed in own OSGi modules. Every plugin has a special UI type. In\ndependency of this type the core injects the plugin to the right position of the player. The following plugin types are\npossible:\n\n\n\n\n\n\n\n\nPlugin Type\n\n\nDescription\n\n\nCharacteristics\n\n\nModule Name\n\n\nJS Plugin Type Name\n\n\nMaven Plugin Type Name\n\n\n\n\n\n\n\n\n\n\nControls\n\n\nImplements the main controls of the top of the player\n\n\nOnly one plugin per player possible.\n\n\nmatterhorn-engage-theodul-plugin-controls\n\n\nengage_controls\n\n\ncontrols\n\n\n\n\n\n\nTimeline\n\n\nTimeline information below the main controls.\n\n\nGood for processing time-based data like user tracking, slide previews or annotations.\n\n\nOptional plugin, more than one possible.  matterhorn-engage-theodul-plugin-timeline-\n\n\nengage_timeline\n\n\ntimeline\n\n\n\n\n\n\nVideodisplay\n\n\nImplementation of the video display.\n\n\nCurrently only one plugin per player possible, but in the future more video displays should be possible.\n\n\nmatterhorn-engage-theodul-plugin-video-\n\n\nengage_video\n\n\nvideo\n\n\n\n\n\n\nDescription/Label\n\n\nA plugin below the video display, good to show simple information about the video, like a title and the creator.\n\n\nOnly one plugin per player possible.\n\n\nmatterhorn-engage-theodul-plugin-description\n\n\nengage_description\n\n\ndescription\n\n\n\n\n\n\nTab\n\n\nShows a tab in the tab view at the bottom of the player.\n\n\nOptional plugin, more than one possible.\n\n\nmatterhorn-engage-theodul-plugin-tab-\n\n\nengage_tab\n\n\ntab\n\n\n\n\n\n\nCustom\n\n\nA custom plugin without a relationship to an UI element.\n\n\nGood for a custom REST endpoint, global data representation or to load custom JS code or libraries.\n\n\nOptional plugin, more than one possible.\n\n\nNo connection to a preserved UI element.\n\n\nmatterhorn-engage-theodul-plugin-custom-\n\n\n\n\n\n\n\n\nThe following listing shows the directory structure of a plugin module:\n\n\n|-src\n|---main\n|-----java\n|-------org\n|---------opencastproject\n|-----------engage\n|-------------theodul\n|---------------plugin\n|-----------------controls  #Simple Java class, and optional REST endpoint\n|-----resources\n|-------OSGI-INF            #OSGi information about the plugin\n|-------static              #web ressources, contains the main.js entry point of the plugin\n|---------images            #plugin ressources\n|---------js                #plugin js libs\n|-----------bootstrap\n|-----------jqueryui\n|---test                    #Jasmine test ressources\n|-----resources\n|-------js\n|---------engage            #Test Wrapper of the core\n|---------lib               #Required test libs\n|---------spec              #Jasmine test specs\n\n\n\nThe main JavaScript entry point of the plugin is main.js in the static folder. This contains the RequireJS module\ndefinition of the plugin and the main logic. All other plugin logic can be implemented as a RequireJS module and loaded\nin the main module. The main module should have a dependency to the core, the Engage object. With this object you have\naccess to main features of the core. See the Core Reference for more information about that.\n\n\nAfter the initialization process of the plugin, the plugin returns a plugin object with information about the plugin,\nlike the type, the name, the ui template etc. This object is used by the core to decide about the UI type/location of\nplugin. The Core Reference describes the plugin object, before and after it is being processed by the core.\n\n\nHave a look to the code of a plugin to get an impression about the plugin implementation.\n\n\nModel View Controller Support\n\n\nThe Theodul player supports MVC design patterns for each plugin based on methods and objects of the BackboneJS library.\nIt is not necessary to design a plugin in MVC style but it is highly recommended. An overview of the methods and objects\nof the BackboneJS library is listed on the official website of BackboneJS.\n\n\nEach plugin with a visual component has a reference to its view container and its template to fill the view container.\nHave a look at the Core Reference how to access the container and the template data. With this information the plugin\ncan create a Backbone view with a reference to the to div container and a render function to compile the template.\n\n\nThe next step is the creation of a model, which is being bound to the view. An usual way is to create a Backbone model,\nwhich is being passed by the view. In the initialization function of the view, the view binds the model change event to\nhis render function:\n\n\nBind the \"change\" event always to the render function of a view\n\n\n// bind the render function always to the view\n_.bindAll(this, \"render\");\n// listen for changes of the model and bind the render function to this\nthis.model.bind(\"change\", this.render);\n\n\n\nThe model can only be visible by the plugin itself or it can be added to the global Engage model of the core. Adding the\nmodel to the Engage model has the advantage, that on the one hand data can be used by other plugins and on the other\nhand it is able to listen to change- or add-events. So other plugins are able to listen to a change of data in another\nmodel and can react to it by e.g. re-render its view. This feature is e.g. used by the \"mhConnection\" custom plugin. The\nplugin receives data of Opencast endpoints and saves them to a model, which is being added to the Engage Model. Each\ntime the plugin gets newer endpoint data and updates its model's data, each plugin gets a notification and can re-render\nits view.\n\n\nA typical way to add a model to the Engage model is to add the model in the initialization function of the plugin after\nall other initializations. Here is an example of the video plugin:\n\n\nAdd a custom model to the Engage Model\n\n\nEngage.model.set(\"videoDataModel\", new VideoDataModel(videoDisplays, videoSources, duration));\n\n\n\nIn the same initialization function an event handler should be added to notice the addition of the model. Has the model\nsuccessfully been added, a view with this model and other data can be created:\n\n\nModel Event Handler\n\n\nEngage.model.on(\"change:videoDataModel\", function() {\n   new VideoDataView(this.get(\"videoDataModel\"), plugin.template, videojs_swf);\n});\n\n\n\nIf another plugin wants to use the defined \"videoDataModel\" model, it has to list it in its own initialization process:\n\n\nEngage.model.on(\"change:videoDataModel\", function() {\n   initCount -= 1;\n   if (initCount === 0) {\n      initPlugin();\n   }\n});\n\n\n\nHave a look at the full implementation of the VideoJS Plugin and the Controls Plugin to get an idea how the Backbone MVC\ndesign works. For completeness' sake, the \"Controller\" does not have an extra Object in the Backbone MVC design. The\n\"Controller\" is usually used as the render function in the view. This function can be very complex and should link to\nother functions, which are short and easy to be tested by the Jasmine Test Framework.",
            "title": "Architecture"
        },
        {
            "location": "/modules/player/architecture/#architecture",
            "text": "",
            "title": "Architecture"
        },
        {
            "location": "/modules/player/architecture/#overview",
            "text": "The architecture of the theodul player has a plugin based structure based around a core. The core and the plugins have\nbeen realized as OSGi modules. Each plugin can be separately build.  The following figure shows the OSGi architecture of the player.   All Theodul OSGi modules are stored under:  modules/matterhorn-engage-theodul-*\n#Core module\nmodules/matterhorn-engage-theodul-api/\nmodules/matterhorn-engage-theodul-core/\n#A plugin module\nmodules/matterhorn-engage-theodul-plugin-*\nmodules/matterhorn-engage-theodul-plugin-tab-description/",
            "title": "Overview"
        },
        {
            "location": "/modules/player/architecture/#plugin-manager",
            "text": "The main workflow is implemented by the core, which recognizes new plugins, collects information about the plugin type\nand resources, runs the JavaScript logic and inserts the first compiled templates into the HTML DOM.  The Plugin Manager Endpoint recognizes the OSGi modules. Each plugin has some information about its name and its\nresources. The Plugin Manager collects these information and publishes them via a REST endpoint. The following URL links\nto an example REST endpoint:  http://localhost:8080/engage/theodul/manager/list.json  The documentation and test forms of the endpoint can be found on the Opencast start page. The following data in JSON\nshows an example list of plugins, which are used by the player and provided by the Plugin Manager Endpoint.  {\n  \"pluginlist\":{\n    \"plugins\":[\n    {\n      \"name\":\"EngagePluginTabSlidetext\",\n      \"id\":\"6\",\n      \"description\":\"Simple implementation of a tab with the text of the slides\",\n      \"static-path\":\"6\\/static\"\n    },\n    {\n      \"name\":\"EngagePluginControlsMockup\",\n      \"id\":\"5\",\n      \"description\":\"Simple implementation of a control bar\",\n      \"static-path\":\"5\\/static\"\n    }]\n  }\n}  Next to the Plugin Manager there is the Theodul Core module, which publishes the main HTML page, core.html.",
            "title": "Plugin Manager"
        },
        {
            "location": "/modules/player/architecture/#ui-core",
            "text": "The  core.html  is the main entry point and starts the Javascript core logic. Following listing shows the directory\nstructure of core in the  matterhorn-engage-theodul-core OSGi  module.  |-src\n|---main\n|-----java          #Java impl of the plugin manager\n|-----resources\n|-------ui          #UI of the core, core.html and engage_init.js\n|---------css       #Global CSS Styles\n|---------js        #JavaScript logic\n|-----------engage  #Core logic, engage_core.js and engage_model.js\n|-----------lib     #External libraries, backbone.js, jquery.js, require.js and underscore.js\n|---test            #Unit Tests\n|-----resources\n|-------ui          #JavaScript Unit Tests\n|---------js\n|-----------spec  All Theodul JavaScript components are defined as a RequireJS module. The file  engage_init.js  is loaded firstly and\ncontains the configuration of RequireJS. This init script additionally loads the core module, which is defined in the engage_core.js .  The core module initializes the main HTML view. This view is realized as a BackboneJS view and is linked to a global\nBackbone model, which is stored in the model module in  engage_model.js . The view is returned by the core module, so\nevery other module, which has a dependency to the core module, has a reference to the view (simply called  Engage  in\nthe plugins) and its functions. See the Core Reference for more information about the functions of the core view.",
            "title": "UI Core"
        },
        {
            "location": "/modules/player/architecture/#plugins",
            "text": "Plugins in the Theodul player are developed and distributed in own OSGi modules. Every plugin has a special UI type. In\ndependency of this type the core injects the plugin to the right position of the player. The following plugin types are\npossible:     Plugin Type  Description  Characteristics  Module Name  JS Plugin Type Name  Maven Plugin Type Name      Controls  Implements the main controls of the top of the player  Only one plugin per player possible.  matterhorn-engage-theodul-plugin-controls  engage_controls  controls    Timeline  Timeline information below the main controls.  Good for processing time-based data like user tracking, slide previews or annotations.  Optional plugin, more than one possible.  matterhorn-engage-theodul-plugin-timeline-  engage_timeline  timeline    Videodisplay  Implementation of the video display.  Currently only one plugin per player possible, but in the future more video displays should be possible.  matterhorn-engage-theodul-plugin-video-  engage_video  video    Description/Label  A plugin below the video display, good to show simple information about the video, like a title and the creator.  Only one plugin per player possible.  matterhorn-engage-theodul-plugin-description  engage_description  description    Tab  Shows a tab in the tab view at the bottom of the player.  Optional plugin, more than one possible.  matterhorn-engage-theodul-plugin-tab-  engage_tab  tab    Custom  A custom plugin without a relationship to an UI element.  Good for a custom REST endpoint, global data representation or to load custom JS code or libraries.  Optional plugin, more than one possible.  No connection to a preserved UI element.  matterhorn-engage-theodul-plugin-custom-     The following listing shows the directory structure of a plugin module:  |-src\n|---main\n|-----java\n|-------org\n|---------opencastproject\n|-----------engage\n|-------------theodul\n|---------------plugin\n|-----------------controls  #Simple Java class, and optional REST endpoint\n|-----resources\n|-------OSGI-INF            #OSGi information about the plugin\n|-------static              #web ressources, contains the main.js entry point of the plugin\n|---------images            #plugin ressources\n|---------js                #plugin js libs\n|-----------bootstrap\n|-----------jqueryui\n|---test                    #Jasmine test ressources\n|-----resources\n|-------js\n|---------engage            #Test Wrapper of the core\n|---------lib               #Required test libs\n|---------spec              #Jasmine test specs  The main JavaScript entry point of the plugin is main.js in the static folder. This contains the RequireJS module\ndefinition of the plugin and the main logic. All other plugin logic can be implemented as a RequireJS module and loaded\nin the main module. The main module should have a dependency to the core, the Engage object. With this object you have\naccess to main features of the core. See the Core Reference for more information about that.  After the initialization process of the plugin, the plugin returns a plugin object with information about the plugin,\nlike the type, the name, the ui template etc. This object is used by the core to decide about the UI type/location of\nplugin. The Core Reference describes the plugin object, before and after it is being processed by the core.  Have a look to the code of a plugin to get an impression about the plugin implementation.",
            "title": "Plugins"
        },
        {
            "location": "/modules/player/architecture/#model-view-controller-support",
            "text": "The Theodul player supports MVC design patterns for each plugin based on methods and objects of the BackboneJS library.\nIt is not necessary to design a plugin in MVC style but it is highly recommended. An overview of the methods and objects\nof the BackboneJS library is listed on the official website of BackboneJS.  Each plugin with a visual component has a reference to its view container and its template to fill the view container.\nHave a look at the Core Reference how to access the container and the template data. With this information the plugin\ncan create a Backbone view with a reference to the to div container and a render function to compile the template.  The next step is the creation of a model, which is being bound to the view. An usual way is to create a Backbone model,\nwhich is being passed by the view. In the initialization function of the view, the view binds the model change event to\nhis render function:  Bind the \"change\" event always to the render function of a view  // bind the render function always to the view\n_.bindAll(this, \"render\");\n// listen for changes of the model and bind the render function to this\nthis.model.bind(\"change\", this.render);  The model can only be visible by the plugin itself or it can be added to the global Engage model of the core. Adding the\nmodel to the Engage model has the advantage, that on the one hand data can be used by other plugins and on the other\nhand it is able to listen to change- or add-events. So other plugins are able to listen to a change of data in another\nmodel and can react to it by e.g. re-render its view. This feature is e.g. used by the \"mhConnection\" custom plugin. The\nplugin receives data of Opencast endpoints and saves them to a model, which is being added to the Engage Model. Each\ntime the plugin gets newer endpoint data and updates its model's data, each plugin gets a notification and can re-render\nits view.  A typical way to add a model to the Engage model is to add the model in the initialization function of the plugin after\nall other initializations. Here is an example of the video plugin:",
            "title": "Model View Controller Support"
        },
        {
            "location": "/modules/player/architecture/#add-a-custom-model-to-the-engage-model",
            "text": "Engage.model.set(\"videoDataModel\", new VideoDataModel(videoDisplays, videoSources, duration));  In the same initialization function an event handler should be added to notice the addition of the model. Has the model\nsuccessfully been added, a view with this model and other data can be created:  Model Event Handler  Engage.model.on(\"change:videoDataModel\", function() {\n   new VideoDataView(this.get(\"videoDataModel\"), plugin.template, videojs_swf);\n});  If another plugin wants to use the defined \"videoDataModel\" model, it has to list it in its own initialization process:  Engage.model.on(\"change:videoDataModel\", function() {\n   initCount -= 1;\n   if (initCount === 0) {\n      initPlugin();\n   }\n});  Have a look at the full implementation of the VideoJS Plugin and the Controls Plugin to get an idea how the Backbone MVC\ndesign works. For completeness' sake, the \"Controller\" does not have an extra Object in the Backbone MVC design. The\n\"Controller\" is usually used as the render function in the view. This function can be very complex and should link to\nother functions, which are short and easy to be tested by the Jasmine Test Framework.",
            "title": "Add a custom model to the Engage Model"
        },
        {
            "location": "/modules/player/core.reference/",
            "text": "Core Reference\n\n\nEngage Core\n\n\nRequireJS Path\n\n\n'engage/engage_core'\n\n\n\nInherited object functions of the BackboneJS view, see http://backbonejs.org/#View\n\n\nAdded object functions and properties:\n\n\n\n\n\n\n\n\nName\n\n\nParameters\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nlog(value):void\n\n\nvalue:String\n\n\nfunction\n\n\nfunction to log via the core cross browser\n\n\n\n\n\n\nEvent:EngageEvent\n\n\nnone\n\n\nproperty\n\n\nReturns the EngageEvent object prototype, the see EngageEvent Object for more information\n\n\n\n\n\n\ntrigger(event):void\n\n\nevent:EngageEvent\n\n\nfunction\n\n\ntriggers an EngageEvent\n\n\n\n\n\n\non(event, handler, context):void\n\n\nevent:EngageEvent, handler:function, context:object\n\n\nfunction\n\n\ninstall an event handler on a EngageEvent\n\n\n\n\n\n\nmodel:EngageModel\n\n\nnone\n\n\nproperty\n\n\nReturns the singleton engage model for this session, see EngageModel for more information's\n\n\n\n\n\n\ngetPluginPath(pluginName):String\n\n\npluginName:String\n\n\nfunction\n\n\nReturns the absolute path of a plugin by name.\n\n\n\n\n\n\n\n\nEngageEvent Object\n\n\n\n\n\n\n\n\nName\n\n\nParamters\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nEngageEvent(name, description, type)\n\n\nname:String, description:String, type:String\n\n\nconstructor\n\n\nCreate a new unbound EngageEvent, with a name, description and a type. For Example: var myEvent = new EngageEvent('play', 'plays the video', 'trigger')\n\n\n\n\n\n\ngetName:String\n\n\nnone\n\n\nfunction\n\n\nGets the name\n\n\n\n\n\n\ngetDescription:String\n\n\nnone\n\n\nfunction\n\n\nGets the description\n\n\n\n\n\n\ngetType:String\n\n\nnone\n\n\nfunction\n\n\nGets the Type, can be a \"handler\", \"trigger\" or \"both\"\n\n\n\n\n\n\ntoString:String\n\n\nnone\n\n\nfunction\n\n\nBuild a string that describes the event\n\n\n\n\n\n\n\n\nEngage Model\n\n\nInherited object functions of the BackboneJS model, see http://backbonejs.org/#Model, how to use BackboneJS models. This model is a global singleton object and can be used by each plugin to add new models which can be used by another plugin again.\n\n\nNo special functions are added, but the model is filled with some default data. This default data can be used by each plugin, which has a reference to the EngageModel.\n\n\n\n\n\n\n\n\nProperty Name\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\npluginsInfo\n\n\nBackbone Model\n\n\nContains Information's of each plugin\n\n\n\n\n\n\npluginModels\n\n\nBackbone Collection\n\n\nContains the plugin models\n\n\n\n\n\n\nurlParameters\n\n\nObject\n\n\nContains the data of the URL parameters.\n\n\n\n\n\n\n\n\nPlugin Object\n\n\nEach plugin \nmust\n create and return a object with some properties which are set by the plugin itself. It is recommend to keep a reference to the object because some properties are set by the core after the plugin is processed.\n\n\n\n\n\n\n\n\nProperty Name\n\n\nType\n\n\nDescription\n\n\n\n\n\n\n\n\n\n\nname\n\n\nString\n\n\nName of the plugin, e.g. \"Engage Controls\". \nThis property is set by the plugin.\n\n\n\n\n\n\ntype\n\n\nString\n\n\nType of the plugin, e.g. \"engage_controls\", see the plugin table in Architecture for the other plugin types. \nThis property is set by the plugin.\n\n\n\n\n\n\nversion\n\n\nString\n\n\nVersion of plugin. \nThis property is set by the plugin.\n\n\n\n\n\n\nstyles\n\n\nArray of Strings\n\n\nArray of the paths of css files relative to the static folder of each plugin . \nThis property is set by the plugin.\n\n\n\n\n\n\ntemplate\n\n\nString\n\n\nBefore the plugin object is returned by the plugin logic, the template property contains the path to the template relative to the static folder. \nThe path property is set first by the plugin\n. After the plugin object is returned and the Theodul core processed the plugin, the template property is filled with the real template data and can be used to re-render the view.\n\n\n\n\n\n\ncontainer\n\n\nString\n\n\nContains the ID of the HTML div container, which contains the rendered template. This can be used to re-render the view. \nThis property is set by the core.\n\n\n\n\n\n\npluginPath\n\n\nString\n\n\nContains the absolute path of the plugin.  \nThis property is set by the core.\n\n\n\n\n\n\nevents\n\n\nObject\n\n\nContains all events which are used of this plugin. Each handled and each triggered event.",
            "title": "Core Reference"
        },
        {
            "location": "/modules/player/core.reference/#core-reference",
            "text": "",
            "title": "Core Reference"
        },
        {
            "location": "/modules/player/core.reference/#engage-core",
            "text": "RequireJS Path  'engage/engage_core'  Inherited object functions of the BackboneJS view, see http://backbonejs.org/#View  Added object functions and properties:     Name  Parameters  Type  Description      log(value):void  value:String  function  function to log via the core cross browser    Event:EngageEvent  none  property  Returns the EngageEvent object prototype, the see EngageEvent Object for more information    trigger(event):void  event:EngageEvent  function  triggers an EngageEvent    on(event, handler, context):void  event:EngageEvent, handler:function, context:object  function  install an event handler on a EngageEvent    model:EngageModel  none  property  Returns the singleton engage model for this session, see EngageModel for more information's    getPluginPath(pluginName):String  pluginName:String  function  Returns the absolute path of a plugin by name.",
            "title": "Engage Core"
        },
        {
            "location": "/modules/player/core.reference/#engageevent-object",
            "text": "Name  Paramters  Type  Description      EngageEvent(name, description, type)  name:String, description:String, type:String  constructor  Create a new unbound EngageEvent, with a name, description and a type. For Example: var myEvent = new EngageEvent('play', 'plays the video', 'trigger')    getName:String  none  function  Gets the name    getDescription:String  none  function  Gets the description    getType:String  none  function  Gets the Type, can be a \"handler\", \"trigger\" or \"both\"    toString:String  none  function  Build a string that describes the event",
            "title": "EngageEvent Object"
        },
        {
            "location": "/modules/player/core.reference/#engage-model",
            "text": "Inherited object functions of the BackboneJS model, see http://backbonejs.org/#Model, how to use BackboneJS models. This model is a global singleton object and can be used by each plugin to add new models which can be used by another plugin again.  No special functions are added, but the model is filled with some default data. This default data can be used by each plugin, which has a reference to the EngageModel.     Property Name  Type  Description      pluginsInfo  Backbone Model  Contains Information's of each plugin    pluginModels  Backbone Collection  Contains the plugin models    urlParameters  Object  Contains the data of the URL parameters.",
            "title": "Engage Model"
        },
        {
            "location": "/modules/player/core.reference/#plugin-object",
            "text": "Each plugin  must  create and return a object with some properties which are set by the plugin itself. It is recommend to keep a reference to the object because some properties are set by the core after the plugin is processed.     Property Name  Type  Description      name  String  Name of the plugin, e.g. \"Engage Controls\".  This property is set by the plugin.    type  String  Type of the plugin, e.g. \"engage_controls\", see the plugin table in Architecture for the other plugin types.  This property is set by the plugin.    version  String  Version of plugin.  This property is set by the plugin.    styles  Array of Strings  Array of the paths of css files relative to the static folder of each plugin .  This property is set by the plugin.    template  String  Before the plugin object is returned by the plugin logic, the template property contains the path to the template relative to the static folder.  The path property is set first by the plugin . After the plugin object is returned and the Theodul core processed the plugin, the template property is filled with the real template data and can be used to re-render the view.    container  String  Contains the ID of the HTML div container, which contains the rendered template. This can be used to re-render the view.  This property is set by the core.    pluginPath  String  Contains the absolute path of the plugin.   This property is set by the core.    events  Object  Contains all events which are used of this plugin. Each handled and each triggered event.",
            "title": "Plugin Object"
        },
        {
            "location": "/modules/player/events/",
            "text": "Theodul Pass Player - Events\n\n\nA Theodul Pass Player plugin can trigger and/or subscribe to events.\n\n\nAn event is defined in the events section of the plugin and looks like this:\n\n\nNAME: new Engage.Event(\"MODULE:NAME\", \"DESCRIPTION\", \"OPTION\")\n\n\n\nThe event has the event name \"MODULE:NAME\", the description DESCRIPTION and one of the options \"trigger\", \"handler\" or \"both\" as OPTION. When the plugin just triggers the event, the option is \"trigger\", when it just handles the events the option is \"handler\" and when it does both - trigger and handle it - the option is \"both\".\n\n\nAn event can be triggered via\n\n\nEngage.trigger(plugin.events.NAME.getName(), [parameter(s)]);\n\n\n\nand can be subscribed to via\n\n\nEngage.on(plugin.events.NAME.getName(), function () {});\n\n\n\nThe following list contains all events of the Core + of all official plugins, sorted alphabetically after \"Event name\" for version 1.0 of Feb 12, 2015.\n\n\nCurrently official plugins are\n\n\n\n\nControls\n\n\nMHConnection\n\n\nNotifications\n\n\nUsertracking\n\n\nDescription\n\n\nDescription (Tab)\n\n\nSlide text (Tab)\n\n\nShortcuts (Tab)\n\n\nTimeline statistics\n\n\nVideodisplay\n\n\n\n\n\n\n\n\n\n\nName\n\n\nEvent name\n\n\nAdditional parameters\n\n\nDescription\n\n\nTriggered in\n\n\nHandled in\n\n\n\n\n\n\n\n\n\n\ncoreInit\n\n\nCore:init\n\n\n\n\n\n\nCore\n\n\n\n\n\n\n\n\nplugin_load_done\n\n\nCore:plugin_load_done\n\n\n\n\n\n\nCore\n\n\nCore, Controls, MHConnection, Notifications, Usertracking, Description, Description (Tab), Slide text (Tab), Shortcuts (Tab), Timeline statistics, Videodisplay\n\n\n\n\n\n\ntimelineplugin_closed\n\n\nEngage:timelineplugin_closed\n\n\nNote: No \"Engage Event\", just use as string, example: Engage.on(\"Engage:timelineplugin_closed\", function() {});\n\n\nwhen the timeline plugin container closed\n\n\nCore\n\n\n\n\n\n\n\n\ntimelineplugin_opened\n\n\nEngage:timelineplugin_opened\n\n\nNote: No \"Engage Event\", just use as string, example: Engage.on(\"Engage:timelineplugin_opened\", function() {});\n\n\nwhen the timeline plugin container opened\n\n\nCore\n\n\nTimeline statistics\n\n\n\n\n\n\ngetMediaInfo\n\n\nMhConnection:getMediaInfo\n\n\n\n\n\n\n\n\nMHConnection\n\n\n\n\n\n\ngetMediaPackage\n\n\nMhConnection:getMediaPackage\n\n\n\n\n\n\n\n\nMHConnection\n\n\n\n\n\n\nmediaPackageModelError\n\n\nMhConnection:mediaPackageModelError\n\n\n\n\n\n\nMHConnection\n\n\nCore, Controls, Notifications, Usertracking, Description, Description (Tab), Slide text (Tab), Shortcuts (Tab), Timeline statistics, Videodisplay\n\n\n\n\n\n\ncustomError\n\n\nNotification:customError\n\n\nmsg: The message to display\n\n\nan error occurred\n\n\nCore, Controls, Videodisplay\n\n\nNotifications\n\n\n\n\n\n\ncustomNotification\n\n\nNotification:customNotification\n\n\nmsg: The message to display\n\n\na custom message\n\n\nVideodisplay\n\n\nNotifications\n\n\n\n\n\n\ncustomOKMessage\n\n\nNotification:customOKMessage\n\n\nmsg: The message to display\n\n\na custom message with an OK button\n\n\nControls\n\n\nNotifications\n\n\n\n\n\n\ncustomSuccess\n\n\nNotification:customSuccess\n\n\nmsg: The message to display\n\n\na custom success message\n\n\nCore, Controls\n\n\nNotifications\n\n\n\n\n\n\nsegmentMouseout\n\n\nSegment:mouseOut\n\n\nno: Segment number\n\n\nthe mouse is off a segment\n\n\nControls, Slide text (Tab)\n\n\nControls, Slide text (Tab)\n\n\n\n\n\n\nsegmentMouseover\n\n\nSegment:mouseOver\n\n\nno: Segment number\n\n\nthe mouse is over a segment\n\n\nControls, Slide text (Tab)\n\n\nControls, Slide text (Tab)\n\n\n\n\n\n\nsliderMousein\n\n\nSlider:mouseIn\n\n\n\n\nthe mouse entered the slider\n\n\nControls\n\n\n\n\n\n\n\n\nsliderMouseout\n\n\nSlider:mouseOut\n\n\n\n\nthe mouse is off the slider\n\n\nControls\n\n\n\n\n\n\n\n\nsliderMousemove\n\n\nSlider:mouseMoved\n\n\ntimeInMs: The time on the hovered position in ms\n\n\nthe mouse is moving over the slider\n\n\nControls\n\n\n\n\n\n\n\n\nsliderStart\n\n\nSlider:start\n\n\n\n\nslider started\n\n\nControls\n\n\n\n\n\n\n\n\nsliderStop\n\n\nSlider:stop\n\n\ntime: The time the slider stopped at\n\n\nslider stopped\n\n\nControls\n\n\nVideodisplay\n\n\n\n\n\n\naspectRatioSet\n\n\nVideo:aspectRatioSet\n\n\nas: (array) as[0] = width, as[1] = height, as[2] = aspect ratio in %\n\n\nthe aspect ratio has been calculated\n\n\nVideodisplay\n\n\nControls\n\n\n\n\n\n\naudioCodecNotSupported\n\n\nVideo:audioCodecNotSupported\n\n\n\n\nwhen the audio codec seems not to be supported by the browser\n\n\nVideodisplay\n\n\nNotifications\n\n\n\n\n\n\nautoplay\n\n\nVideo:autoplay\n\n\n\n\nautoplay the video\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nbufferedAndAutoplaying\n\n\nVideo:bufferedAndAutoplaying\n\n\n\n\nbuffering successful, was playing, autoplaying now\n\n\nVideodisplay\n\n\nNotifications\n\n\n\n\n\n\nbufferedButNotAutoplaying\n\n\nVideo:bufferedButNotAutoplaying\n\n\n\n\nbuffering successful, was not playing, not autoplaying now\n\n\nVideodisplay\n\n\nNotifications\n\n\n\n\n\n\nbuffering\n\n\nVideo:buffering\n\n\n\n\nvideo is buffering\n\n\nVideodisplay\n\n\nNotifications\n\n\n\n\n\n\nended\n\n\nVideo:ended\n\n\ntriggeredByMaster: Whether or not the event has been triggered by master\n\n\nvideo ended\n\n\nVideodisplay\n\n\nControls\n\n\n\n\n\n\nfullscreenCancel\n\n\nVideo:fullscreenCancel\n\n\n\n\ncancel fullscreen\n\n\nControls, Videodisplay\n\n\nVideodisplay\n\n\n\n\n\n\nfullscreenChange\n\n\nVideo:fullscreenChange\n\n\n\n\na fullscreen change happened\n\n\nVideodisplay\n\n\nControls\n\n\n\n\n\n\nfullscreenEnable\n\n\nVideo:fullscreenEnable\n\n\n\n\nenable fullscreen\n\n\nControls, Core\n\n\nControls, Videodisplay\n\n\n\n\n\n\nisAudioOnly\n\n\nVideo:isAudioOnly\n\n\naudio: true if audio only, false else\n\n\nwhether it's audio only or not\n\n\nVideodisplay\n\n\nControls, Notifications\n\n\n\n\n\n\ninitialSeek\n\n\nVideo:initialSeek\n\n\ntime: The time to seek to\n\n\nSeeks initially after all plugins have been loaded after a short delay\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nmute\n\n\nVideo:mute\n\n\n\n\nmute\n\n\nVideodisplay\n\n\nVideodisplay\n\n\n\n\n\n\nmuteToggle\n\n\nVideo:muteToggle\n\n\n\n\ntoggle mute and unmute\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nnextChapter\n\n\nVideo:nextChapter\n\n\n\n\nCore\n\n\n\n\n\n\n\n\n\n\nnumberOfVideodisplaysSet\n\n\nVideo:numberOfVideodisplaysSet\n\n\nno: Number of videodisplays\n\n\nthe number of videodisplays has been set\n\n\nVideodisplay\n\n\n\n\n\n\n\n\npause\n\n\nVideo:pause\n\n\ntriggeredByMaster: Whether or not the event has been triggered by master\n\n\npauses the video\n\n\n\n\n\n\n\n\n\n\nCore, Controls, Videodisplay\n\n\nControls, Videodisplay\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nplay\n\n\nVideo:play\n\n\ntriggeredByMaster: Whether or not the event has been triggered by master\n\n\nplays the video\n\n\nCore, Controls, Videodisplay\n\n\nControls,Videodisplay\n\n\n\n\n\n\nplayPause\n\n\nVideo:playPause\n\n\n\n\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\npreviousChapter\n\n\nVideo:previousChapter\n\n\n\n\n\n\nCore\n\n\n\n\n\n\n\n\nplaybackRateChanged\n\n\nVideo:playbackRateChanged\n\n\nrate: The video playback rate (0.0-x, default: 1.0)\n\n\nThe video playback rate changed\n\n\nControls\n\n\nControls, Videodisplay\n\n\n\n\n\n\nplaybackRateIncrease\n\n\nVideo:playbackRateIncrease\n\n\n\n\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nplaybackRateDecrease\n\n\nVideo:playbackRateDecrease\n\n\n\n\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nplayerLoaded\n\n\nVideo:playerLoaded\n\n\n\n\nplayer loaded successfully\n\n\nVideodisplay\n\n\n\n\n\n\n\n\nready\n\n\nVideo:ready\n\n\n\n\nall videos loaded successfully\n\n\nVideodisplay\n\n\nControls, Notifications\n\n\n\n\n\n\nseek\n\n\nVideo:seek\n\n\ntime: Current time in seconds  seek video to a given position in seconds\n\n\nCore, Controls, Slide text (Tab)\n\n\nVideodisplay\n\n\n\n\n\n\n\n\nseekLeft\n\n\nVideo:seekLeft\n\n\n\n\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nseekRight\n\n\nVideo:seekRight\n\n\n\n\n\n\nCore\n\n\nVideodisplay\n\n\n\n\n\n\nsynchronizing\n\n\nVideo:synchronizing\n\n\n\n\nsynchronizing videos with the master video\n\n\nVideodisplay\n\n\n\n\n\n\n\n\ntimeupdate\n\n\nVideo:timeupdate\n\n\ntime: Current time in seconds, triggeredByMaster: Whether or not the event has been triggered by master\n\n\na timeupdate happened\n\n\nVideodisplay\n\n\nControls, Usertracking\n\n\n\n\n\n\nqualitySet\n\n\nVideo:qualitySet\n\n\nquality: the quality that has been set a video quality has been set\n\n\nControls\n\n\nVideodisplay\n\n\n\n\n\n\n\n\nunmute\n\n\nVideo:unmute\n\n\n\n\nunmute\n\n\nControls\n\n\nControls\n\n\n\n\n\n\nusingFlash\n\n\nVideo:usingFlash\n\n\nflash: true if flash is being used, false else\n\n\nflash is being used\n\n\nVideodisplay\n\n\nControls\n\n\n\n\n\n\nvideoFormatsFound\n\n\nVideo:videoFormatsFound\n\n\nformat: array of video formats if different video formats (qualities) have been found\n\n\nVideodisplay\n\n\nControls\n\n\n\n\n\n\n\n\nvolumechange\n\n\nVideo:volumechange\n\n\nvol: Current volume (0 is off (muted), 1.0 is all the way up, 0.5 is half way)\n\n\na volume change happened\n\n\nVideodisplay\n\n\n\n\n\n\n\n\nvolumeDown\n\n\nVideo:volumeDown\n\n\n\n\n\n\nCore\n\n\nControls\n\n\n\n\n\n\nvolumeGet\n\n\nVideo:volumeGet\n\n\ncallback: A callback function with the current volume as a parameter\n\n\nget the volume\n\n\nVideodisplay\n\n\n\n\n\n\n\n\nvolumeSet\n\n\nVideo:volumeSet\n\n\npercentAsDecimal: Volume to set (0 is off (muted), 1.0 is all the way up, 0.5 is half way)\n\n\nset the volume\n\n\nControls\n\n\nControls, Videodisplay\n\n\n\n\n\n\nvolumeUp\n\n\nVideo:volumeUp\n\n\n\n\n\n\nCore\n\n\nControls",
            "title": "Events"
        },
        {
            "location": "/modules/player/events/#theodul-pass-player-events",
            "text": "A Theodul Pass Player plugin can trigger and/or subscribe to events.  An event is defined in the events section of the plugin and looks like this:  NAME: new Engage.Event(\"MODULE:NAME\", \"DESCRIPTION\", \"OPTION\")  The event has the event name \"MODULE:NAME\", the description DESCRIPTION and one of the options \"trigger\", \"handler\" or \"both\" as OPTION. When the plugin just triggers the event, the option is \"trigger\", when it just handles the events the option is \"handler\" and when it does both - trigger and handle it - the option is \"both\".  An event can be triggered via  Engage.trigger(plugin.events.NAME.getName(), [parameter(s)]);  and can be subscribed to via  Engage.on(plugin.events.NAME.getName(), function () {});  The following list contains all events of the Core + of all official plugins, sorted alphabetically after \"Event name\" for version 1.0 of Feb 12, 2015.  Currently official plugins are   Controls  MHConnection  Notifications  Usertracking  Description  Description (Tab)  Slide text (Tab)  Shortcuts (Tab)  Timeline statistics  Videodisplay      Name  Event name  Additional parameters  Description  Triggered in  Handled in      coreInit  Core:init    Core     plugin_load_done  Core:plugin_load_done    Core  Core, Controls, MHConnection, Notifications, Usertracking, Description, Description (Tab), Slide text (Tab), Shortcuts (Tab), Timeline statistics, Videodisplay    timelineplugin_closed  Engage:timelineplugin_closed  Note: No \"Engage Event\", just use as string, example: Engage.on(\"Engage:timelineplugin_closed\", function() {});  when the timeline plugin container closed  Core     timelineplugin_opened  Engage:timelineplugin_opened  Note: No \"Engage Event\", just use as string, example: Engage.on(\"Engage:timelineplugin_opened\", function() {});  when the timeline plugin container opened  Core  Timeline statistics    getMediaInfo  MhConnection:getMediaInfo     MHConnection    getMediaPackage  MhConnection:getMediaPackage     MHConnection    mediaPackageModelError  MhConnection:mediaPackageModelError    MHConnection  Core, Controls, Notifications, Usertracking, Description, Description (Tab), Slide text (Tab), Shortcuts (Tab), Timeline statistics, Videodisplay    customError  Notification:customError  msg: The message to display  an error occurred  Core, Controls, Videodisplay  Notifications    customNotification  Notification:customNotification  msg: The message to display  a custom message  Videodisplay  Notifications    customOKMessage  Notification:customOKMessage  msg: The message to display  a custom message with an OK button  Controls  Notifications    customSuccess  Notification:customSuccess  msg: The message to display  a custom success message  Core, Controls  Notifications    segmentMouseout  Segment:mouseOut  no: Segment number  the mouse is off a segment  Controls, Slide text (Tab)  Controls, Slide text (Tab)    segmentMouseover  Segment:mouseOver  no: Segment number  the mouse is over a segment  Controls, Slide text (Tab)  Controls, Slide text (Tab)    sliderMousein  Slider:mouseIn   the mouse entered the slider  Controls     sliderMouseout  Slider:mouseOut   the mouse is off the slider  Controls     sliderMousemove  Slider:mouseMoved  timeInMs: The time on the hovered position in ms  the mouse is moving over the slider  Controls     sliderStart  Slider:start   slider started  Controls     sliderStop  Slider:stop  time: The time the slider stopped at  slider stopped  Controls  Videodisplay    aspectRatioSet  Video:aspectRatioSet  as: (array) as[0] = width, as[1] = height, as[2] = aspect ratio in %  the aspect ratio has been calculated  Videodisplay  Controls    audioCodecNotSupported  Video:audioCodecNotSupported   when the audio codec seems not to be supported by the browser  Videodisplay  Notifications    autoplay  Video:autoplay   autoplay the video  Core  Videodisplay    bufferedAndAutoplaying  Video:bufferedAndAutoplaying   buffering successful, was playing, autoplaying now  Videodisplay  Notifications    bufferedButNotAutoplaying  Video:bufferedButNotAutoplaying   buffering successful, was not playing, not autoplaying now  Videodisplay  Notifications    buffering  Video:buffering   video is buffering  Videodisplay  Notifications    ended  Video:ended  triggeredByMaster: Whether or not the event has been triggered by master  video ended  Videodisplay  Controls    fullscreenCancel  Video:fullscreenCancel   cancel fullscreen  Controls, Videodisplay  Videodisplay    fullscreenChange  Video:fullscreenChange   a fullscreen change happened  Videodisplay  Controls    fullscreenEnable  Video:fullscreenEnable   enable fullscreen  Controls, Core  Controls, Videodisplay    isAudioOnly  Video:isAudioOnly  audio: true if audio only, false else  whether it's audio only or not  Videodisplay  Controls, Notifications    initialSeek  Video:initialSeek  time: The time to seek to  Seeks initially after all plugins have been loaded after a short delay  Core  Videodisplay    mute  Video:mute   mute  Videodisplay  Videodisplay    muteToggle  Video:muteToggle   toggle mute and unmute  Core  Videodisplay    nextChapter  Video:nextChapter   Core      numberOfVideodisplaysSet  Video:numberOfVideodisplaysSet  no: Number of videodisplays  the number of videodisplays has been set  Videodisplay     pause  Video:pause  triggeredByMaster: Whether or not the event has been triggered by master  pauses the video      Core, Controls, Videodisplay  Controls, Videodisplay        play  Video:play  triggeredByMaster: Whether or not the event has been triggered by master  plays the video  Core, Controls, Videodisplay  Controls,Videodisplay    playPause  Video:playPause    Core  Videodisplay    previousChapter  Video:previousChapter    Core     playbackRateChanged  Video:playbackRateChanged  rate: The video playback rate (0.0-x, default: 1.0)  The video playback rate changed  Controls  Controls, Videodisplay    playbackRateIncrease  Video:playbackRateIncrease    Core  Videodisplay    playbackRateDecrease  Video:playbackRateDecrease    Core  Videodisplay    playerLoaded  Video:playerLoaded   player loaded successfully  Videodisplay     ready  Video:ready   all videos loaded successfully  Videodisplay  Controls, Notifications    seek  Video:seek  time: Current time in seconds  seek video to a given position in seconds  Core, Controls, Slide text (Tab)  Videodisplay     seekLeft  Video:seekLeft    Core  Videodisplay    seekRight  Video:seekRight    Core  Videodisplay    synchronizing  Video:synchronizing   synchronizing videos with the master video  Videodisplay     timeupdate  Video:timeupdate  time: Current time in seconds, triggeredByMaster: Whether or not the event has been triggered by master  a timeupdate happened  Videodisplay  Controls, Usertracking    qualitySet  Video:qualitySet  quality: the quality that has been set a video quality has been set  Controls  Videodisplay     unmute  Video:unmute   unmute  Controls  Controls    usingFlash  Video:usingFlash  flash: true if flash is being used, false else  flash is being used  Videodisplay  Controls    videoFormatsFound  Video:videoFormatsFound  format: array of video formats if different video formats (qualities) have been found  Videodisplay  Controls     volumechange  Video:volumechange  vol: Current volume (0 is off (muted), 1.0 is all the way up, 0.5 is half way)  a volume change happened  Videodisplay     volumeDown  Video:volumeDown    Core  Controls    volumeGet  Video:volumeGet  callback: A callback function with the current volume as a parameter  get the volume  Videodisplay     volumeSet  Video:volumeSet  percentAsDecimal: Volume to set (0 is off (muted), 1.0 is all the way up, 0.5 is half way)  set the volume  Controls  Controls, Videodisplay    volumeUp  Video:volumeUp    Core  Controls",
            "title": "Theodul Pass Player - Events"
        },
        {
            "location": "/modules/player/storage/",
            "text": "How to store data in the browser persistently\n\n\nThe Theodul Pass Player uses basil.js for storing persistent data such as the volume and the playback rate.\n\n\nBasil.js unifies localstorage, cookies and session storage and provides an easy-to-use JavaScript API.\n\n\nExample Usage\n\n\nIn your plugin you just have to require the basil lib which is being distributed globally:\n\n\ndefine([..., \"basil\", ...], function(..., Basil, ...) {\n    ...\n}\n\n\n\nAfter that basil needs to be set up:\n\n\nvar basilOptions = {\n    namespace: 'mhStorage'\n};\nBasil = new window.Basil(basilOptions);\n\n\n\nThe default plugins have \"mhStorage\" as their namespace, feel free to set your own. The default storage is the localstorage; if the localstorage is not available, a cookie is being used and so on.\n\n\nAfter setting up basil, the usage is straightforward:\n\n\nBasil.set(\"someKey\", \"someValue); // set a value\nBasil.get(\"someKey\"); // get a value",
            "title": "Storage"
        },
        {
            "location": "/modules/player/storage/#how-to-store-data-in-the-browser-persistently",
            "text": "The Theodul Pass Player uses basil.js for storing persistent data such as the volume and the playback rate.  Basil.js unifies localstorage, cookies and session storage and provides an easy-to-use JavaScript API.",
            "title": "How to store data in the browser persistently"
        },
        {
            "location": "/modules/player/storage/#example-usage",
            "text": "In your plugin you just have to require the basil lib which is being distributed globally:  define([..., \"basil\", ...], function(..., Basil, ...) {\n    ...\n}  After that basil needs to be set up:  var basilOptions = {\n    namespace: 'mhStorage'\n};\nBasil = new window.Basil(basilOptions);  The default plugins have \"mhStorage\" as their namespace, feel free to set your own. The default storage is the localstorage; if the localstorage is not available, a cookie is being used and so on.  After setting up basil, the usage is straightforward:  Basil.set(\"someKey\", \"someValue); // set a value\nBasil.get(\"someKey\"); // get a value",
            "title": "Example Usage"
        },
        {
            "location": "/modules/player/plugin.development/",
            "text": "How To Create A New Plugin\n\n\nPlugin Archetype\n\n\nThe \nMaven Archetype Plugin\n provides a convenient mechanism\nfor automatically generating projects. Project templates are called Archetypes and they are basically maven artifacts of\na special kind of packaging, \u2018maven-archetype\u2019.\n\n\nWith the Theodul Plugin Archetype you can create a new plugin project in no time and start writing the plugin\u2019s business\nlogic right away, without caring about the POM or SCR component declarations.\n\n\nInstallation\n\n\nThe Theodul Plugin Archetype is included in the Opencast source code (Theodul Player branch) in the modules directory.\nTo make the artifact available on your system you need to install it like any other atrifacts. In the Opencast source\ndirectory type:\n\n\n> cd modules/matterhorn-engage-theodul-plugin-archetype\n> mvn install\n\n\n\nAfter successful build and installation the archetype is available in your system.\n\n\nGenerating a new plugin\n\n\nTo generate a new plugin project simply go to the modules directory inside the Opencast source directory and type:\n\n\n> mvn archetype:generate -DarchetypeGroupId=org.opencastproject -DarchetypeArtifactId=matterhorn-theodul-plugin\n\n\n\nProvided the archetype is installed maven will now ask you for the properties configuration for the new project:\n\n\n[INFO] Generating project in Interactive mode\n[INFO] Archetype [org.opencastproject:matterhorn-theodul-plugin:1.5-SNAPSHOT] found in catalog local\nDefine value for property 'groupId': : org.opencastproject\nDefine value for property 'artifactId': : matterhorn-engage-theodul-plugin-test\nDefine value for property 'version': 1.0-SNAPSHOT: : 1.5-SNAPSHOT\nDefine value for property 'package': org.opencastproject: : org.opencastproject.engage.theodul.plugin.custom.test\nDefine value for property 'plugin_description': : A test plugin\nDefine value for property 'plugin_name': : testName \nDefine value for property 'plugin_type': : custom\nDefine value for property 'plugin_version': : 0.1\nDefine value for property 'plugin_rest': : false\nConfirm properties configuration:\ngroupId: org.opencastproject\nartifactId: matterhorn-engage-theodul-plugin-test\nversion: 1.5-SNAPSHOT\npackage: org.opencastproject.engage.theodul.plugin.test\nplugin_description: A test plugin\nplugin_name: test\nplugin_rest: true\n Y: : y\n[INFO] ----------------------------------------------------------------------------\n[INFO] Using following parameters for creating project from Archetype: matterhorn-theodul-plugin:1.5-SNAPSHOT\n[INFO] ----------------------------------------------------------------------------\n[INFO] Parameter: groupId, Value: org.opencastproject\n[INFO] Parameter: artifactId, Value: matterhorn-engage-theodul-plugin-test\n[INFO] Parameter: version, Value: 1.5-SNAPSHOT\n[INFO] Parameter: package, Value: org.opencastproject.engage.theodul.plugin.test\n[INFO] Parameter: packageInPathFormat, Value: org/opencastproject/engage/theodul/plugin/test\n[INFO] Parameter: package, Value: org.opencastproject.engage.theodul.plugin.test\n[INFO] Parameter: version, Value: 1.5-SNAPSHOT\n[INFO] Parameter: plugin_description, Value: A test plugin\n[INFO] Parameter: plugin_name, Value: test\n[INFO] Parameter: groupId, Value: org.opencastproject\n[INFO] Parameter: plugin_rest, Value: true\n[INFO] Parameter: artifactId, Value: matterhorn-engage-theodul-plugin-test\n[INFO] project created from Archetype in dir: /home/wulff/code/UOS/plugin-archetype/test/matterhorn-engage-theodul-plugin-test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3:39.195s\n[INFO] Finished at: Thu Jan 23 15:48:37 CET 2014\n[INFO] Final Memory: 15M/308M\n[INFO] ------------------------------------------------------------------------\n\n\n\nThere you go, the newly created plugin project is waiting to be filled with life in the directory that is named after\nthe atrifactId you entered before.\n\n\nProject Properties\n\n\nIn addition to the above explanation, here is a description of the properties you have to specify when generating a new\nproject with the Theodul Plugin Archetype:\n\n\ngroupId\n\n\nMaven group ID. For the Opencast developers this is\n\n\norg.opencastproject\n\n\n\nartifactId\n\n\nMaven artifact ID. Name by which your project is identified as an artifact by maven. Think of it as the project name. It\nwill also be used as the name for your projects root directory. During the course of the Theodul project the following\nnaming scheme came up:\n\n\nmatterhorn-engage-theodul-plugin-<plugin type>-<plugin name>\n\n\n\nversion\n\n\nThe project version. For Opencast developers: simply put in the version of the Opencast source tree your are working\non.\n\n\npackage\n\n\nThe Java package in which the source for the back end part of your plugin will live. The following scheme is used by the\nTheodul developers:\n\n\norg.opencastproject.engage.theodul.plugin.<plugin type>.<plugin name>\n\n\n\nplugin_version\n\n\nThe version of the plugin itself. This is not to be confused with the maven project version which will, for instance, be\nupdated when the Opencast version changes.\n\n\nplugin_type\n\n\nThe type of the plugin to be created. See https://opencast.jira.com/wiki/display/MH/Architecture\nPossible types are: custom, controls, timeline, video, description, tab\n\n\nplugin_name\n\n\nThe name by which your plugin will be registered by the plugin manager when running.\n\n\nplugin_description\n\n\n(optional) A short description of the plugin. The description will be provided by the \nplugin list endpoint\n\n together with the other plugin data.\n\n\nplugin_rest\n\n\n(boolean) Whether or not the plugin should provide a Opencast Rest endpoint. If set to true, the Java class that makes\nup the back end part of your plugin will be augmented with the annotations necessary to work as a Rest endpoint provider\nin Opencast. Also an example endpoint (GET:sayHello) will be generated.\n\n\nExample Plugin\n\n\nHave a look at the \nsnow showcase example plugin (custom)\n.\n\n\nDebugging\n\n\nTo display debug information in the developer console, add the following parameters to the URL:\n\n\nDisplay debug information\n\n\n&debug=true\n\n\n\nDisplay event debug information\n\n\n&debugEvents=true",
            "title": "Plugin Development"
        },
        {
            "location": "/modules/player/plugin.development/#how-to-create-a-new-plugin",
            "text": "",
            "title": "How To Create A New Plugin"
        },
        {
            "location": "/modules/player/plugin.development/#plugin-archetype",
            "text": "The  Maven Archetype Plugin  provides a convenient mechanism\nfor automatically generating projects. Project templates are called Archetypes and they are basically maven artifacts of\na special kind of packaging, \u2018maven-archetype\u2019.  With the Theodul Plugin Archetype you can create a new plugin project in no time and start writing the plugin\u2019s business\nlogic right away, without caring about the POM or SCR component declarations.",
            "title": "Plugin Archetype"
        },
        {
            "location": "/modules/player/plugin.development/#installation",
            "text": "The Theodul Plugin Archetype is included in the Opencast source code (Theodul Player branch) in the modules directory.\nTo make the artifact available on your system you need to install it like any other atrifacts. In the Opencast source\ndirectory type:  > cd modules/matterhorn-engage-theodul-plugin-archetype\n> mvn install  After successful build and installation the archetype is available in your system.",
            "title": "Installation"
        },
        {
            "location": "/modules/player/plugin.development/#generating-a-new-plugin",
            "text": "To generate a new plugin project simply go to the modules directory inside the Opencast source directory and type:  > mvn archetype:generate -DarchetypeGroupId=org.opencastproject -DarchetypeArtifactId=matterhorn-theodul-plugin  Provided the archetype is installed maven will now ask you for the properties configuration for the new project:  [INFO] Generating project in Interactive mode\n[INFO] Archetype [org.opencastproject:matterhorn-theodul-plugin:1.5-SNAPSHOT] found in catalog local\nDefine value for property 'groupId': : org.opencastproject\nDefine value for property 'artifactId': : matterhorn-engage-theodul-plugin-test\nDefine value for property 'version': 1.0-SNAPSHOT: : 1.5-SNAPSHOT\nDefine value for property 'package': org.opencastproject: : org.opencastproject.engage.theodul.plugin.custom.test\nDefine value for property 'plugin_description': : A test plugin\nDefine value for property 'plugin_name': : testName \nDefine value for property 'plugin_type': : custom\nDefine value for property 'plugin_version': : 0.1\nDefine value for property 'plugin_rest': : false\nConfirm properties configuration:\ngroupId: org.opencastproject\nartifactId: matterhorn-engage-theodul-plugin-test\nversion: 1.5-SNAPSHOT\npackage: org.opencastproject.engage.theodul.plugin.test\nplugin_description: A test plugin\nplugin_name: test\nplugin_rest: true\n Y: : y\n[INFO] ----------------------------------------------------------------------------\n[INFO] Using following parameters for creating project from Archetype: matterhorn-theodul-plugin:1.5-SNAPSHOT\n[INFO] ----------------------------------------------------------------------------\n[INFO] Parameter: groupId, Value: org.opencastproject\n[INFO] Parameter: artifactId, Value: matterhorn-engage-theodul-plugin-test\n[INFO] Parameter: version, Value: 1.5-SNAPSHOT\n[INFO] Parameter: package, Value: org.opencastproject.engage.theodul.plugin.test\n[INFO] Parameter: packageInPathFormat, Value: org/opencastproject/engage/theodul/plugin/test\n[INFO] Parameter: package, Value: org.opencastproject.engage.theodul.plugin.test\n[INFO] Parameter: version, Value: 1.5-SNAPSHOT\n[INFO] Parameter: plugin_description, Value: A test plugin\n[INFO] Parameter: plugin_name, Value: test\n[INFO] Parameter: groupId, Value: org.opencastproject\n[INFO] Parameter: plugin_rest, Value: true\n[INFO] Parameter: artifactId, Value: matterhorn-engage-theodul-plugin-test\n[INFO] project created from Archetype in dir: /home/wulff/code/UOS/plugin-archetype/test/matterhorn-engage-theodul-plugin-test\n[INFO] ------------------------------------------------------------------------\n[INFO] BUILD SUCCESS\n[INFO] ------------------------------------------------------------------------\n[INFO] Total time: 3:39.195s\n[INFO] Finished at: Thu Jan 23 15:48:37 CET 2014\n[INFO] Final Memory: 15M/308M\n[INFO] ------------------------------------------------------------------------  There you go, the newly created plugin project is waiting to be filled with life in the directory that is named after\nthe atrifactId you entered before.",
            "title": "Generating a new plugin"
        },
        {
            "location": "/modules/player/plugin.development/#project-properties",
            "text": "In addition to the above explanation, here is a description of the properties you have to specify when generating a new\nproject with the Theodul Plugin Archetype:",
            "title": "Project Properties"
        },
        {
            "location": "/modules/player/plugin.development/#groupid",
            "text": "Maven group ID. For the Opencast developers this is  org.opencastproject",
            "title": "groupId"
        },
        {
            "location": "/modules/player/plugin.development/#artifactid",
            "text": "Maven artifact ID. Name by which your project is identified as an artifact by maven. Think of it as the project name. It\nwill also be used as the name for your projects root directory. During the course of the Theodul project the following\nnaming scheme came up:  matterhorn-engage-theodul-plugin-<plugin type>-<plugin name>",
            "title": "artifactId"
        },
        {
            "location": "/modules/player/plugin.development/#version",
            "text": "The project version. For Opencast developers: simply put in the version of the Opencast source tree your are working\non.",
            "title": "version"
        },
        {
            "location": "/modules/player/plugin.development/#package",
            "text": "The Java package in which the source for the back end part of your plugin will live. The following scheme is used by the\nTheodul developers:  org.opencastproject.engage.theodul.plugin.<plugin type>.<plugin name>",
            "title": "package"
        },
        {
            "location": "/modules/player/plugin.development/#plugin_version",
            "text": "The version of the plugin itself. This is not to be confused with the maven project version which will, for instance, be\nupdated when the Opencast version changes.",
            "title": "plugin_version"
        },
        {
            "location": "/modules/player/plugin.development/#plugin_type",
            "text": "The type of the plugin to be created. See https://opencast.jira.com/wiki/display/MH/Architecture\nPossible types are: custom, controls, timeline, video, description, tab",
            "title": "plugin_type"
        },
        {
            "location": "/modules/player/plugin.development/#plugin_name",
            "text": "The name by which your plugin will be registered by the plugin manager when running.",
            "title": "plugin_name"
        },
        {
            "location": "/modules/player/plugin.development/#plugin_description",
            "text": "(optional) A short description of the plugin. The description will be provided by the  plugin list endpoint  together with the other plugin data.",
            "title": "plugin_description"
        },
        {
            "location": "/modules/player/plugin.development/#plugin_rest",
            "text": "(boolean) Whether or not the plugin should provide a Opencast Rest endpoint. If set to true, the Java class that makes\nup the back end part of your plugin will be augmented with the annotations necessary to work as a Rest endpoint provider\nin Opencast. Also an example endpoint (GET:sayHello) will be generated.",
            "title": "plugin_rest"
        },
        {
            "location": "/modules/player/plugin.development/#example-plugin",
            "text": "Have a look at the  snow showcase example plugin (custom) .",
            "title": "Example Plugin"
        },
        {
            "location": "/modules/player/plugin.development/#debugging",
            "text": "To display debug information in the developer console, add the following parameters to the URL:  Display debug information  &debug=true  Display event debug information  &debugEvents=true",
            "title": "Debugging"
        },
        {
            "location": "/modules/player/testing/",
            "text": "How To Test With Phantom.js and Jasmine\n\n\nIntegration Of Jasmine Into The Build Process (Maven)\n\n\nJasmine\n is integrated with the\n\njasmine-maven-plugin\n into the maven build process. Therefore only the pom.xml file\nwill be enhanced by the following code, which specifies the \njasmine-maven-plugin\n\nas plugin for the build process. The configuration of the jasmine-maven-plugin is also done in this file. The meaning of\nevery configuration parameter can be looked up on the jasmine-maven-plugin project page under this\n\nlink\n. The following configuration uses a the\nspecRunnerTemplate \nREQUIRE_JS\n in order to function properly with \nRequireJS\n. Further\ninformation about spec runner templates can be found\n\nhere\n. On the next build the needed\ndependencies will be automatically resolved just like it is in the nature of maven.\n\n\npom.xml\n\n\n<build>\n<plugins>\n    ...\n      <plugin>\n        <groupId>com.github.searls</groupId>\n        <artifactId>jasmine-maven-plugin</artifactId>\n        <version>1.3.1.2</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>test</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <preloadSources>\n            <source>${project.basedir}/src/test/resources/js/lib/require.js</source>\n          </preloadSources>\n          <jsSrcDir>${project.basedir}/src/main/resources/static</jsSrcDir>\n          <sourceIncludes>\n            <include>**/*.js</include>\n            <include>**/*.coffee</include>\n          </sourceIncludes>\n          <jsTestSrcDir>${project.basedir}/src/test/resources/js/spec</jsTestSrcDir>\n          <specIncludes>\n            <include>**/spec_helper.js</include>\n            <include>**/*.js</include>\n            <include>**/*.coffee</include>\n          </specIncludes>\n          <specRunnerTemplate>REQUIRE_JS</specRunnerTemplate>\n          <format>progress</format>\n        </configuration>\n      </plugin>\n  </plugins>\n</build>\n\n\n\nTesting The Engage Core\n\n\nThis chapter gives an overview over the directory structure used for testing the theodul engage core module, the configuration for the specs in the \nspec_helper.js\n and how to write specs for the core.\n\n\nDirectory Structure\n\n\nThe test relevant files are located in the \nsrc/test/resources/ui/js/spec\n tree. Files that filename ends on \n_spec.js\n are considered as files with executable tests. The \nspec_helper.js\n in configured in the \npom.xml\n for the initial setup.\n\n\nDirectory Structure Testing Engage Core\n\n\n|-src\n|---main\n|-----java          #Java impl of the plugin manager\n|-----resources\n|-------ui          #UI of the core, core.html and engage_init.js\n|---------css       #Global CSS Styles\n|---------js        #JavaScript logic\n|-----------engage  #Core logic, engage_core.js and engage_model.js\n|-----------lib     #External libraries, backbone.js, jquery.js, require.js and underscore.js\n|---test            #Unit Tests\n|-----resources\n|-------ui          #JavaScript Unit Tests\n|---------js\n|-----------spec    #Tests the *_spec.js and the helper file spec_helper.js\n\n\n\nSpec Helper\n\n\nThe file \nspec_helper.js\n takes over the configuration of RequireJS which is usually done by the \nengage_init.js\n. The\npaths differ slighty from the player has at runtime.\n\n\nspec_helper for engage_core module\n\n\n/*global requirejs*/\nrequirejs.config({\n  baseUrl: 'src/js/lib',\n  paths: {\n    require: 'require',\n    jquery: 'jquery',\n    underscore: 'underscore',\n    backbone: 'backbone',\n    engage: '../engage',\n    plugins: '../engage/plugin/*/static'\n  },\n  shim: {\n    'backbone': {\n      //script dependencies\n      deps: ['underscore', 'jquery'],\n      //global variable\n      exports: 'Backbone'\n    },\n    'underscore': {\n      //global variable\n      exports: '_'\n    }\n  }\n});\nvar PLUGIN_MANAGER_PATH = '/engage/theodul/manager/list.json';\nvar PLUGIN_PATH = '/engage/theodul/plugin/';\n\n\n\nTesting Engage Plugins\n\n\nThis chapter gives an overview over the directory structure used for testing a theodul engage plugin module, the\nconfiguration for the specs in the \nspec_helper.js\n and how to write specs for a plugin.\n\n\nDirectory Structure\n\n\nThe test relevant files are located in the \nsrc/test/resources/ui/js/spec\n tree. Files that filename ends on\n\n_spec.js\n are considered as files with executable tests. The \nspec_helper.js\n in configured in the \npom.xml\n for\nthe initial setup. In the directory \ntest/resources/ui/js/engage\n is a mockup of the theodul engage core module in\norder to be able to test the plugin module independent. The directory \ntest/resources/ui/js/lib\n provides the\nlibraries which are provides by the engage core module at runtime of the player, as well to be able to test the plugin\nmodule independently.\n\n\nDirectory Structure Testing Plugins\n\n\n|-src\n|---main\n|-----java          #Java impl of the plugin manager\n|-----resources\n|-------ui          #UI of the core, core.html and engage_init.js\n|---------css       #Global CSS Styles\n|---------js        #JavaScript logic\n|-----------engage  #Core logic, engage_core.js and engage_model.js\n|-----------lib     #External libraries, backbone.js, jquery.js, require.js and underscore.js\n|---test            #Unit Tests\n|-----resources\n|-------ui          #JavaScript Unit Tests\n|---------js\n|-----------engage  #Mockup of the engage_core.js and engage_model.js\n|-----------lib     #Libraries used and provided by the core (A copy of the lib directory in the engage core module)\n|-----------spec    #Tests the *_spec.js and the helper file spec_helper.js\n\n\n\nSpec Helper\n\n\nThe file \nspec_helper.js\n takes over the configuration of RequireJS which is usually done by the \nengage_init.js\n. The\npaths differ slighty from the player uses at runtime.\n\n\n/*global requirejs*/\nrequirejs.config({\n  baseUrl: 'src/',\n  paths: {\n    require: 'test/resources/js/lib/require',\n    jquery: 'test/resources/js/lib/jquery',\n    underscore: 'test/resources/js/lib/underscore',\n    backbone: 'test/resources/js/lib/backbone',\n    engage: 'test/resources/js/engage'\n  },\n  shim: {\n    'backbone': {\n      //script dependencies\n      deps: ['underscore', 'jquery'],\n      //global variable\n      exports: 'Backbone'\n    },\n    'underscore': {\n      //global variable\n      exports: '_'\n    }\n  }\n});\n\n\n\nWriting Specs\n\n\nTODO\n\n\nRunning The Tests\n\n\nNow you can start the build process and the jasmine specs will be executed. Each . stands for a successful test. F\nstands for a failure and will stop the build process like it is specified in the configuration. The example output shows\na manipulated version of the tests for the theodul engage core in order to illustrate a failing test. Normally all three\ntests should succeed at this point.\n\n\nTesting on build\n\n\nmvn install -DdeployTo=${FELIX_HOME}\n    // some output before\n    [INFO]\n    -------------------------------------------------------\n     J A S M I N E   S P E C S\n    -------------------------------------------------------\n    [INFO]\n    F..\n\n    1 failure:\n\n      1.) EngageCore it should have a model <<< FAILURE!\n\n        * Expected { cid : 'c3', ... _pending : false } not to be defined.\n\n    Results: 3 specs, 1 failures\n    // some output before\n\n\n\nThe jasmine-maven-plugin can also be executed manually and show the result in a browser. This can be achieved by the\nfollowing command:\n\n\nManual testing\n\n\nmvn jasmine:bdd\n    [INFO] Scanning for projects...\n    [INFO]\n    [INFO] ------------------------------------------------------------------------\n    [INFO] Building matterhorn-engage-theodul-core 1.5-SNAPSHOT\n    [INFO] ------------------------------------------------------------------------\n    [INFO]\n    [INFO] --- jasmine-maven-plugin:1.3.1.2:bdd (default-cli) @ matterhorn-engage-theodul-core ---\n    2014-01-28 14:33:30.722:INFO:oejs.Server:jetty-8.1.10.v20130312\n    2014-01-28 14:33:30.746:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8234\n    [INFO]\n\n    Server started--it's time to spec some JavaScript! You can run your specs as you develop by visiting this URL in\n    a web browser:\n\n    http://localhost:8234\n\n    The server will monitor these two directories for scripts that you add, remove, and change:\n\n    source directory: src/main/resources/ui\n\n    spec directory: src/test/resources/ui/js/spec\n\n    Just leave this process running as you test-drive your code, refreshing your browser window to re-run your specs.\n    You can kill the server with Ctrl-C when you're done.\n\n\n\nIn a browser you should see an output like it is shown on the next screenshot.",
            "title": "Testing"
        },
        {
            "location": "/modules/player/testing/#how-to-test-with-phantomjs-and-jasmine",
            "text": "",
            "title": "How To Test With Phantom.js and Jasmine"
        },
        {
            "location": "/modules/player/testing/#integration-of-jasmine-into-the-build-process-maven",
            "text": "Jasmine  is integrated with the jasmine-maven-plugin  into the maven build process. Therefore only the pom.xml file\nwill be enhanced by the following code, which specifies the  jasmine-maven-plugin \nas plugin for the build process. The configuration of the jasmine-maven-plugin is also done in this file. The meaning of\nevery configuration parameter can be looked up on the jasmine-maven-plugin project page under this link . The following configuration uses a the\nspecRunnerTemplate  REQUIRE_JS  in order to function properly with  RequireJS . Further\ninformation about spec runner templates can be found here . On the next build the needed\ndependencies will be automatically resolved just like it is in the nature of maven.  pom.xml  <build>\n<plugins>\n    ...\n      <plugin>\n        <groupId>com.github.searls</groupId>\n        <artifactId>jasmine-maven-plugin</artifactId>\n        <version>1.3.1.2</version>\n        <executions>\n          <execution>\n            <goals>\n              <goal>test</goal>\n            </goals>\n          </execution>\n        </executions>\n        <configuration>\n          <preloadSources>\n            <source>${project.basedir}/src/test/resources/js/lib/require.js</source>\n          </preloadSources>\n          <jsSrcDir>${project.basedir}/src/main/resources/static</jsSrcDir>\n          <sourceIncludes>\n            <include>**/*.js</include>\n            <include>**/*.coffee</include>\n          </sourceIncludes>\n          <jsTestSrcDir>${project.basedir}/src/test/resources/js/spec</jsTestSrcDir>\n          <specIncludes>\n            <include>**/spec_helper.js</include>\n            <include>**/*.js</include>\n            <include>**/*.coffee</include>\n          </specIncludes>\n          <specRunnerTemplate>REQUIRE_JS</specRunnerTemplate>\n          <format>progress</format>\n        </configuration>\n      </plugin>\n  </plugins>\n</build>",
            "title": "Integration Of Jasmine Into The Build Process (Maven)"
        },
        {
            "location": "/modules/player/testing/#testing-the-engage-core",
            "text": "This chapter gives an overview over the directory structure used for testing the theodul engage core module, the configuration for the specs in the  spec_helper.js  and how to write specs for the core.",
            "title": "Testing The Engage Core"
        },
        {
            "location": "/modules/player/testing/#directory-structure",
            "text": "The test relevant files are located in the  src/test/resources/ui/js/spec  tree. Files that filename ends on  _spec.js  are considered as files with executable tests. The  spec_helper.js  in configured in the  pom.xml  for the initial setup.  Directory Structure Testing Engage Core  |-src\n|---main\n|-----java          #Java impl of the plugin manager\n|-----resources\n|-------ui          #UI of the core, core.html and engage_init.js\n|---------css       #Global CSS Styles\n|---------js        #JavaScript logic\n|-----------engage  #Core logic, engage_core.js and engage_model.js\n|-----------lib     #External libraries, backbone.js, jquery.js, require.js and underscore.js\n|---test            #Unit Tests\n|-----resources\n|-------ui          #JavaScript Unit Tests\n|---------js\n|-----------spec    #Tests the *_spec.js and the helper file spec_helper.js",
            "title": "Directory Structure"
        },
        {
            "location": "/modules/player/testing/#spec-helper",
            "text": "The file  spec_helper.js  takes over the configuration of RequireJS which is usually done by the  engage_init.js . The\npaths differ slighty from the player has at runtime.  spec_helper for engage_core module  /*global requirejs*/\nrequirejs.config({\n  baseUrl: 'src/js/lib',\n  paths: {\n    require: 'require',\n    jquery: 'jquery',\n    underscore: 'underscore',\n    backbone: 'backbone',\n    engage: '../engage',\n    plugins: '../engage/plugin/*/static'\n  },\n  shim: {\n    'backbone': {\n      //script dependencies\n      deps: ['underscore', 'jquery'],\n      //global variable\n      exports: 'Backbone'\n    },\n    'underscore': {\n      //global variable\n      exports: '_'\n    }\n  }\n});\nvar PLUGIN_MANAGER_PATH = '/engage/theodul/manager/list.json';\nvar PLUGIN_PATH = '/engage/theodul/plugin/';",
            "title": "Spec Helper"
        },
        {
            "location": "/modules/player/testing/#testing-engage-plugins",
            "text": "This chapter gives an overview over the directory structure used for testing a theodul engage plugin module, the\nconfiguration for the specs in the  spec_helper.js  and how to write specs for a plugin.",
            "title": "Testing Engage Plugins"
        },
        {
            "location": "/modules/player/testing/#directory-structure_1",
            "text": "The test relevant files are located in the  src/test/resources/ui/js/spec  tree. Files that filename ends on _spec.js  are considered as files with executable tests. The  spec_helper.js  in configured in the  pom.xml  for\nthe initial setup. In the directory  test/resources/ui/js/engage  is a mockup of the theodul engage core module in\norder to be able to test the plugin module independent. The directory  test/resources/ui/js/lib  provides the\nlibraries which are provides by the engage core module at runtime of the player, as well to be able to test the plugin\nmodule independently.  Directory Structure Testing Plugins  |-src\n|---main\n|-----java          #Java impl of the plugin manager\n|-----resources\n|-------ui          #UI of the core, core.html and engage_init.js\n|---------css       #Global CSS Styles\n|---------js        #JavaScript logic\n|-----------engage  #Core logic, engage_core.js and engage_model.js\n|-----------lib     #External libraries, backbone.js, jquery.js, require.js and underscore.js\n|---test            #Unit Tests\n|-----resources\n|-------ui          #JavaScript Unit Tests\n|---------js\n|-----------engage  #Mockup of the engage_core.js and engage_model.js\n|-----------lib     #Libraries used and provided by the core (A copy of the lib directory in the engage core module)\n|-----------spec    #Tests the *_spec.js and the helper file spec_helper.js",
            "title": "Directory Structure"
        },
        {
            "location": "/modules/player/testing/#spec-helper_1",
            "text": "The file  spec_helper.js  takes over the configuration of RequireJS which is usually done by the  engage_init.js . The\npaths differ slighty from the player uses at runtime.  /*global requirejs*/\nrequirejs.config({\n  baseUrl: 'src/',\n  paths: {\n    require: 'test/resources/js/lib/require',\n    jquery: 'test/resources/js/lib/jquery',\n    underscore: 'test/resources/js/lib/underscore',\n    backbone: 'test/resources/js/lib/backbone',\n    engage: 'test/resources/js/engage'\n  },\n  shim: {\n    'backbone': {\n      //script dependencies\n      deps: ['underscore', 'jquery'],\n      //global variable\n      exports: 'Backbone'\n    },\n    'underscore': {\n      //global variable\n      exports: '_'\n    }\n  }\n});",
            "title": "Spec Helper"
        },
        {
            "location": "/modules/player/testing/#writing-specs",
            "text": "TODO",
            "title": "Writing Specs"
        },
        {
            "location": "/modules/player/testing/#running-the-tests",
            "text": "Now you can start the build process and the jasmine specs will be executed. Each . stands for a successful test. F\nstands for a failure and will stop the build process like it is specified in the configuration. The example output shows\na manipulated version of the tests for the theodul engage core in order to illustrate a failing test. Normally all three\ntests should succeed at this point.  Testing on build  mvn install -DdeployTo=${FELIX_HOME}\n    // some output before\n    [INFO]\n    -------------------------------------------------------\n     J A S M I N E   S P E C S\n    -------------------------------------------------------\n    [INFO]\n    F..\n\n    1 failure:\n\n      1.) EngageCore it should have a model <<< FAILURE!\n\n        * Expected { cid : 'c3', ... _pending : false } not to be defined.\n\n    Results: 3 specs, 1 failures\n    // some output before  The jasmine-maven-plugin can also be executed manually and show the result in a browser. This can be achieved by the\nfollowing command:  Manual testing  mvn jasmine:bdd\n    [INFO] Scanning for projects...\n    [INFO]\n    [INFO] ------------------------------------------------------------------------\n    [INFO] Building matterhorn-engage-theodul-core 1.5-SNAPSHOT\n    [INFO] ------------------------------------------------------------------------\n    [INFO]\n    [INFO] --- jasmine-maven-plugin:1.3.1.2:bdd (default-cli) @ matterhorn-engage-theodul-core ---\n    2014-01-28 14:33:30.722:INFO:oejs.Server:jetty-8.1.10.v20130312\n    2014-01-28 14:33:30.746:INFO:oejs.AbstractConnector:Started SelectChannelConnector@0.0.0.0:8234\n    [INFO]\n\n    Server started--it's time to spec some JavaScript! You can run your specs as you develop by visiting this URL in\n    a web browser:\n\n    http://localhost:8234\n\n    The server will monitor these two directories for scripts that you add, remove, and change:\n\n    source directory: src/main/resources/ui\n\n    spec directory: src/test/resources/ui/js/spec\n\n    Just leave this process running as you test-drive your code, refreshing your browser window to re-run your specs.\n    You can kill the server with Ctrl-C when you're done.  In a browser you should see an output like it is shown on the next screenshot.",
            "title": "Running The Tests"
        },
        {
            "location": "/modules/admin-ui/",
            "text": "Modifying Sources\n\n\nWhen you make changes to the sources, it should be sufficient to rebuild the\nAdmin UI NG module and copy the packaged module file into the Opencast assembly.\n\n\nExample:\n\n\ncd modules/matterhorn-admin-ui-ng\nmvn install\ncp ./target/matterhorn-admin-ui-ng-2.2-SNAPSHOT.jar ../../build/opencast-dist-allinone-2.2-SNAPSHOT/system/org/opencastproject/matterhorn-admin-ui-ng/2.2-SNAPSHOT/matterhorn-admin-ui-ng-2.2-SNAPSHOT.jar\n\n\n\n\nNote: Before you run \nmvn install\n from a module's root directory,\nplease make sure that you have built the complete software at least once\n--i.e. you should have already run \nmvn install\n from the repository root\nat some point.\n\n\nNote: In the example above, the paths are for a specific Opencast version.\nYour paths might look different.\n\n\nPrerequisites for live working and debugging\n\n\nCheckout and build Opencast.\n\n\nYou need \nGrunt\n and \nNodeJS\n.\nEither install it on your system or use the local version from the Opencast module:\n\n\ncd modules/matterhorn-admin-ui-ng\nexport PATH=$PATH:node:node_modules/grunt-cli/bin:node_modules/karma/bin\n\n\n\n\nNote: The node and node_modules folders are created during the Maven build process.\n\n\nNote: We already had reports of Grunt behaving differently on different systems.\nWatch out for local or system-wide installations of Grunt and/or NodeJS as they can\nchange the build behavior of Admin UI NG.\n\n\nDebugging Javascript unit tests\n\n\nOur Javascript unit tests are built in Jasmine, and live in \nmodules/matterhorn-admin-ui-ng/src/test/resources/test/unit\n.\nOccasionally something breaks, or you need to disable or focus on a single test.\nWhile reading the Jasmine (and Karma, and Grunt) docs is encouraged, here are a\nfew common recipies that might be useful:\n\n\nDisabling a unit test temporarily\n\n\nAdd \nx\n to the broken test.  For example:\n\n\n\n\n\n\n\n\nBefore\n\n\nAfter\n\n\n\n\n\n\n\n\n\n\nit('runs a test', function () {\n\n\nxit('runs a test', function () {\n\n\n\n\n\n\n\n\nRunning a single unit test\n\n\nAdd \nf\n (for focus) to the relevant test.  For example:\n\n\n\n\n\n\n\n\nBefore\n\n\nAfter\n\n\n\n\n\n\n\n\n\n\nit('runs a test', function () {\n\n\nfit('runs a test', function () {\n\n\n\n\n\n\n\n\nTriggering a browser debugging session\n\n\nThis triggers an instance of the selected browser(s) to open and begin running\nthe tests.  There will be a \nDebug\n button which will open another tab without\nthe javascript minification - use this second tab for your debugging!\nRefreshing the debugging page will rerun the tests\n\n\nTo run Karma for Chrome\n\nnpm run test-chrome\n\n\nTo run Karma for Firefox\n\nnpm run test-firefox\n\n\nTo run Karma for IE\n\nnpm run test-ie\n\n\nAdditional browsers are supported, the full list can be found at \nhere\n\n\nLive working with running Opencast\n\n\nIn order to speed up the UI development process, you can test the code without\nbuilding the module with Maven.\nThere is a Grunt task for starting a standalone web server offering the UI from\nthe source.\nChanges to the source will (after a page reload) be directly reflected in the browser.\n\n\nBe warned that some functionality in this live setup can be limited.\nBefore reporting an issue, please test if you can reproduced the issue with a built Opencast.\n\n\nThis setup may be configured as follows:\n\n\n\n\n\n\nFollow the instructions in the Prerequisites section.\n\n\n\n\n\n\nStart your Opencast instance.\n\n\n\n\n\n\nStart the standalone webserver by running:\n\n\n\n\n\n\ncd modules/matterhorn-admin-ui-ng\ngrunt proxy --proxy.host=http://localhost:8080 --proxy.username=opencast_system_account --proxy.password=CHANGE_ME\n\n\n\n\nNote: host, username and password have to match your configuration\n\netc/custom.properties\n\n\nGrunt should print out the URL where you can see the standalone page running\nfrom sources.\nExample:\n\n\n[I 160420 16:35:29 server:281] Serving on http://127.0.0.1:8000\n\n\n\n\nIf you make changes to the Admin UI NG sources, they should be visible in\nthe browser after a page reload.\nYou can still access the builtin UI by accessing\n\nhttp://localhost:8080\n.\n\n\nLive working with a Mockup\n\n\nIf you do not want to keep a running Opencast instance for developing the\nAdmin UI NG, you can start a mockup.\n\n\nBe warned that \na lot\n of this mockup's functionality acts very differently from\nan actual Opencast instance\n\n\nThis setup may be configured as follows:\n\n\n\n\n\n\nFollow the instructions in the Prerequisites section.\n\n\n\n\n\n\nStart the mockup webserver by running:\n\n\n\n\n\n\ncd modules/matterhorn-admin-ui-ng\ngrunt serve\n\n\n\n\nGrunt should print out the URL where you can see the standalone page running\nfrom sources.\nExample:\n\n\n[I 160420 16:35:29 server:281] Serving on http://127.0.0.1:8000\n\n\n\n\nIf you make changes to the Admin UI NG sources, they should be visible in\nthe browser after a page reload.",
            "title": "Admin UI"
        },
        {
            "location": "/modules/admin-ui/#modifying-sources",
            "text": "When you make changes to the sources, it should be sufficient to rebuild the\nAdmin UI NG module and copy the packaged module file into the Opencast assembly.  Example:  cd modules/matterhorn-admin-ui-ng\nmvn install\ncp ./target/matterhorn-admin-ui-ng-2.2-SNAPSHOT.jar ../../build/opencast-dist-allinone-2.2-SNAPSHOT/system/org/opencastproject/matterhorn-admin-ui-ng/2.2-SNAPSHOT/matterhorn-admin-ui-ng-2.2-SNAPSHOT.jar  Note: Before you run  mvn install  from a module's root directory,\nplease make sure that you have built the complete software at least once\n--i.e. you should have already run  mvn install  from the repository root\nat some point.  Note: In the example above, the paths are for a specific Opencast version.\nYour paths might look different.",
            "title": "Modifying Sources"
        },
        {
            "location": "/modules/admin-ui/#prerequisites-for-live-working-and-debugging",
            "text": "Checkout and build Opencast.  You need  Grunt  and  NodeJS .\nEither install it on your system or use the local version from the Opencast module:  cd modules/matterhorn-admin-ui-ng\nexport PATH=$PATH:node:node_modules/grunt-cli/bin:node_modules/karma/bin  Note: The node and node_modules folders are created during the Maven build process.  Note: We already had reports of Grunt behaving differently on different systems.\nWatch out for local or system-wide installations of Grunt and/or NodeJS as they can\nchange the build behavior of Admin UI NG.",
            "title": "Prerequisites for live working and debugging"
        },
        {
            "location": "/modules/admin-ui/#debugging-javascript-unit-tests",
            "text": "Our Javascript unit tests are built in Jasmine, and live in  modules/matterhorn-admin-ui-ng/src/test/resources/test/unit .\nOccasionally something breaks, or you need to disable or focus on a single test.\nWhile reading the Jasmine (and Karma, and Grunt) docs is encouraged, here are a\nfew common recipies that might be useful:",
            "title": "Debugging Javascript unit tests"
        },
        {
            "location": "/modules/admin-ui/#disabling-a-unit-test-temporarily",
            "text": "Add  x  to the broken test.  For example:     Before  After      it('runs a test', function () {  xit('runs a test', function () {",
            "title": "Disabling a unit test temporarily"
        },
        {
            "location": "/modules/admin-ui/#running-a-single-unit-test",
            "text": "Add  f  (for focus) to the relevant test.  For example:     Before  After      it('runs a test', function () {  fit('runs a test', function () {",
            "title": "Running a single unit test"
        },
        {
            "location": "/modules/admin-ui/#triggering-a-browser-debugging-session",
            "text": "This triggers an instance of the selected browser(s) to open and begin running\nthe tests.  There will be a  Debug  button which will open another tab without\nthe javascript minification - use this second tab for your debugging!\nRefreshing the debugging page will rerun the tests  To run Karma for Chrome npm run test-chrome  To run Karma for Firefox npm run test-firefox  To run Karma for IE npm run test-ie  Additional browsers are supported, the full list can be found at  here",
            "title": "Triggering a browser debugging session"
        },
        {
            "location": "/modules/admin-ui/#live-working-with-running-opencast",
            "text": "In order to speed up the UI development process, you can test the code without\nbuilding the module with Maven.\nThere is a Grunt task for starting a standalone web server offering the UI from\nthe source.\nChanges to the source will (after a page reload) be directly reflected in the browser.  Be warned that some functionality in this live setup can be limited.\nBefore reporting an issue, please test if you can reproduced the issue with a built Opencast.  This setup may be configured as follows:    Follow the instructions in the Prerequisites section.    Start your Opencast instance.    Start the standalone webserver by running:    cd modules/matterhorn-admin-ui-ng\ngrunt proxy --proxy.host=http://localhost:8080 --proxy.username=opencast_system_account --proxy.password=CHANGE_ME  Note: host, username and password have to match your configuration etc/custom.properties  Grunt should print out the URL where you can see the standalone page running\nfrom sources.\nExample:  [I 160420 16:35:29 server:281] Serving on http://127.0.0.1:8000  If you make changes to the Admin UI NG sources, they should be visible in\nthe browser after a page reload.\nYou can still access the builtin UI by accessing http://localhost:8080 .",
            "title": "Live working with running Opencast"
        },
        {
            "location": "/modules/admin-ui/#live-working-with-a-mockup",
            "text": "If you do not want to keep a running Opencast instance for developing the\nAdmin UI NG, you can start a mockup.  Be warned that  a lot  of this mockup's functionality acts very differently from\nan actual Opencast instance  This setup may be configured as follows:    Follow the instructions in the Prerequisites section.    Start the mockup webserver by running:    cd modules/matterhorn-admin-ui-ng\ngrunt serve  Grunt should print out the URL where you can see the standalone page running\nfrom sources.\nExample:  [I 160420 16:35:29 server:281] Serving on http://127.0.0.1:8000  If you make changes to the Admin UI NG sources, they should be visible in\nthe browser after a page reload.",
            "title": "Live working with a Mockup"
        },
        {
            "location": "/modules/stream-security/",
            "text": "Stream Security Developer Guide\n\n\nTo get an introduction to Stream Security, please read the sub section Stream Security in the section Modules of the Admin Guide.\n\n\nOpencast Signing Protocol\n\n\nThe Signing Providers as well as the verification components that are developed by the Opencast community implement the policy and signature specified in the Opencast Signing Protocol. \n\n\nPolicy\n\n\nThe policy is a Base64 encoded JSON document. A human-readable version of the JSON document looks like this:\n\n\n{\n  \"Statement\":{\n    \"Resource\":\"http:\\/\\/opencast.org\\/engage\\/resource.mp4\",\n    \"Condition\":{\n      \"DateLessThan\":1425170777000,\n      \"DateGreaterThan\":1425084379000,\n      \"IpAddress\":\"10.0.0.1\"\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\nProperty Name\n\n\nProperty Description\n\n\n\n\n\n\n\n\n\n\nResource\n\n\nURL of the resource, must exactly match the requested URL including the schema. In case of a RTMP request, this is only the resource path, without the RTMP application name or the server.\n\n\n\n\n\n\nDateLessThan\n\n\nUnix epoch that a resource should expire on in milliseconds\n\n\n\n\n\n\nDateGreaterThan\n\n\nUnix epoch that a resource should become available in milliseconds\n\n\n\n\n\n\nIpAddress\n\n\nClient's IP address that will be accessing the resource\n\n\n\n\n\n\n\n\nProperties in bold are mandatory.\n\n\nBefore the JSON document is Base64 encoded, all whitespaces need to be removed. The above sample document would then look like this:\n\n\n{\"Statement\":{\"Resource\":\"http:\\/\\/opencast.org\\/engage\\/resource.mp4\",\"Condition\":{\"DateLessThan\":1425170777000,\"DateGreaterThan\":1425084379000,\"IpAddress\":\"10.0.0.1\"}}}\n\n\n\n\nThe Base64-encoding must be performed in a URL safe way which means that instead of using the characters \u2018+\u2019 and \u2018/\u2019 they have to be replaced by '-' and '_' respectively. The example above would be encoded into:\n\n\neyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0=\n\n\n\nThe encoded policy must be sent to the server as a query parameter named \u2018policy\u2019, e.g.\n\n\nhttp://opencast.org/engage/resource.mp4?policy=eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0\n\n\n\nNote: Be aware that Base64 encoding can have up to two \u2018=\u2019 characters at the end of the string to pad a message to a necessary length divisible by 3. All components should be able to handle Base64 encoded strings with or without this padding (Resources signed by Opencast will have the padding characters URL encoded to \u2018%3D\u2019).\n\n\nSignature\n\n\nThe signature is a hash-based message authentication code (HMAC) based on a secret key. The algorithm used is HMAC-SHA-256. Only the encoded policy needs to be taken as input for the hash-calculation.\n\n\nThe keys used are simple character strings without any special format. It could be something like \u2018AbCdEfGh\u2019, but it\u2019s recommended to use a key with a length of 256 bit like \u20182195265EE84ED1E1324D31F37F7E3\u2019. Each key must have a unique identifier, e.g. \u2018key1\u2019. In this example, the following key has been used:\n\n\nKey ID: demoKeyOne\nSecret Key: 6EDB5EDDCF994B7432C371D7C274F\n\n\nThe HMAC for the signature from the previous section calculated based on the \ndemoKey1\n is \n\n\nc8712284aabc843f76a132a3a7c8997670414b2f89cb96b367d5f35d0f62a2e4\n\n\n\nThe signature must also be sent as a query parameter that forms part of the resource request. The example from above would now look like this:\n\n\nhttp://opencast.org/engage/resource.mp4?policy=eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0&signature=c8712284aabc843f76a132a3a7c8997670414b2f89cb96b367d5f35d0f62a2e4\n\n\n\nThe same is true for the key id, which needs to be included to determine which key was used to create the signature. \n\n\nhttp://opencast.org/engage/resource.mp4?policy=eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0&signature=c8712284aabc843f76a132a3a7c8997670414b2f89cb96b367d5f35d0f62a2e4&keyId=demoKeyOne\n\n\n\nSigning URLs from a 3rd party system\n\n\nURL signatures also need to be issued for resources presented on and linked from a third party system (such as a custom video portal). There are two options for signing 3rd party system URLs:\n\n\nOption #1: Use the existing URL Signing Service**\n\n\nIf the third party system is based on Java, the existing URL Signing bundles/JARs can be reused. They do not have dependencies to other parts of Opencast and can therefore be used independently.\n\n\nThese bundles are required:\n\n\n\n\nmatterhorn-urlsigning-common\n\n\nmatterhorn-urlsigning-service-api\n\n\nmatterhorn-urlsigning-service-impl\n\n\n\n\nCode example:\n\n\nprivate UrlSigningService urlSigningService;\n\n/** OSGi DI */\nvoid setUrlSigningService(UrlSigningService service) {\n  this.urlSigningService = service;\n}\n\n\u2026 \n\nString urlToSign = \u201chttp://my.custom.url/with/path.mp4\u201d;\nlong signedUrlExpiresDuration = 60;\n\nif (urlSigningService.accepts(urlToSign)) {\n  try {\n    String signedUrl = urlSigningService.sign(\n        urlToSign,\n        signedUrlExpiresDuration,\n        null,\n        null);\n    ...\n  } catch (UrlSigningException e) {\n    // handle exception\n  }\n}\n\n\n\n\nOption #2: Create custom URL Signing Service\n\n\nBased on the technical details outlined in the Opencast Signing Protocol, a URL Signing Service that is compatible with the other existing parts of the Stream Security system can be implemented.\n\n\nOption #3: Give Access to Third Party Systems to Signing REST Endpoints\n\n\nOpencast servers that have been configured to use URL signing service will have two REST endpoints at http://admin.matterhorn.com:8080/signing/docs. The accepts endpoint will return true if the Opencast server can sign a particular URL. The sign endpoint will return a signed URL when the correct parameters are given. Due to the sensitive nature of these endpoints they are locked down to be only accessible by a user with ROLE_ADMIN privileges in the etc/security/mh_default_org.xml configuration file. Creating a new user with this role and accessing the endpoint using these credentials will allow a third party system to sign any URLs.\n\n\nFurther information\n\n\n\n\nFor an overview of Stream Security, please consult the sub section Stream Security in the section Modules of the Admin Guide.\n\n\nFor information about how to configure stream security on your Opencast servers, please consult the sub section Stream Security in the section Configuration of the Admin Guide",
            "title": "Stream Security"
        },
        {
            "location": "/modules/stream-security/#stream-security-developer-guide",
            "text": "To get an introduction to Stream Security, please read the sub section Stream Security in the section Modules of the Admin Guide.",
            "title": "Stream Security Developer Guide"
        },
        {
            "location": "/modules/stream-security/#opencast-signing-protocol",
            "text": "The Signing Providers as well as the verification components that are developed by the Opencast community implement the policy and signature specified in the Opencast Signing Protocol.",
            "title": "Opencast Signing Protocol"
        },
        {
            "location": "/modules/stream-security/#policy",
            "text": "The policy is a Base64 encoded JSON document. A human-readable version of the JSON document looks like this:  {\n  \"Statement\":{\n    \"Resource\":\"http:\\/\\/opencast.org\\/engage\\/resource.mp4\",\n    \"Condition\":{\n      \"DateLessThan\":1425170777000,\n      \"DateGreaterThan\":1425084379000,\n      \"IpAddress\":\"10.0.0.1\"\n    }\n  }\n}     Property Name  Property Description      Resource  URL of the resource, must exactly match the requested URL including the schema. In case of a RTMP request, this is only the resource path, without the RTMP application name or the server.    DateLessThan  Unix epoch that a resource should expire on in milliseconds    DateGreaterThan  Unix epoch that a resource should become available in milliseconds    IpAddress  Client's IP address that will be accessing the resource     Properties in bold are mandatory.  Before the JSON document is Base64 encoded, all whitespaces need to be removed. The above sample document would then look like this:  {\"Statement\":{\"Resource\":\"http:\\/\\/opencast.org\\/engage\\/resource.mp4\",\"Condition\":{\"DateLessThan\":1425170777000,\"DateGreaterThan\":1425084379000,\"IpAddress\":\"10.0.0.1\"}}}  The Base64-encoding must be performed in a URL safe way which means that instead of using the characters \u2018+\u2019 and \u2018/\u2019 they have to be replaced by '-' and '_' respectively. The example above would be encoded into:  eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0=  The encoded policy must be sent to the server as a query parameter named \u2018policy\u2019, e.g.  http://opencast.org/engage/resource.mp4?policy=eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0  Note: Be aware that Base64 encoding can have up to two \u2018=\u2019 characters at the end of the string to pad a message to a necessary length divisible by 3. All components should be able to handle Base64 encoded strings with or without this padding (Resources signed by Opencast will have the padding characters URL encoded to \u2018%3D\u2019).",
            "title": "Policy"
        },
        {
            "location": "/modules/stream-security/#signature",
            "text": "The signature is a hash-based message authentication code (HMAC) based on a secret key. The algorithm used is HMAC-SHA-256. Only the encoded policy needs to be taken as input for the hash-calculation.  The keys used are simple character strings without any special format. It could be something like \u2018AbCdEfGh\u2019, but it\u2019s recommended to use a key with a length of 256 bit like \u20182195265EE84ED1E1324D31F37F7E3\u2019. Each key must have a unique identifier, e.g. \u2018key1\u2019. In this example, the following key has been used:  Key ID: demoKeyOne\nSecret Key: 6EDB5EDDCF994B7432C371D7C274F  The HMAC for the signature from the previous section calculated based on the  demoKey1  is   c8712284aabc843f76a132a3a7c8997670414b2f89cb96b367d5f35d0f62a2e4  The signature must also be sent as a query parameter that forms part of the resource request. The example from above would now look like this:  http://opencast.org/engage/resource.mp4?policy=eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0&signature=c8712284aabc843f76a132a3a7c8997670414b2f89cb96b367d5f35d0f62a2e4  The same is true for the key id, which needs to be included to determine which key was used to create the signature.   http://opencast.org/engage/resource.mp4?policy=eyJTdGF0ZW1lbnQiOnsiUmVzb3VyY2UiOiJodHRwOlwvXC9vcGVuY2FzdC5vcmdcL2VuZ2FnZVwvcmVzb3VyY2UubXA0IiwiQ29uZGl0aW9uIjp7IkRhdGVMZXNzVGhhbiI6MTQyNTE3MDc3NzAwMCwiRGF0ZUdyZWF0ZXJUaGFuIjoxNDI1MDg0Mzc5MDAwLCJJcEFkZHJlc3MiOiIxMC4wLjAuMSJ9fX0&signature=c8712284aabc843f76a132a3a7c8997670414b2f89cb96b367d5f35d0f62a2e4&keyId=demoKeyOne",
            "title": "Signature"
        },
        {
            "location": "/modules/stream-security/#signing-urls-from-a-3rd-party-system",
            "text": "URL signatures also need to be issued for resources presented on and linked from a third party system (such as a custom video portal). There are two options for signing 3rd party system URLs:",
            "title": "Signing URLs from a 3rd party system"
        },
        {
            "location": "/modules/stream-security/#option-1-use-the-existing-url-signing-service",
            "text": "If the third party system is based on Java, the existing URL Signing bundles/JARs can be reused. They do not have dependencies to other parts of Opencast and can therefore be used independently.  These bundles are required:   matterhorn-urlsigning-common  matterhorn-urlsigning-service-api  matterhorn-urlsigning-service-impl   Code example:  private UrlSigningService urlSigningService;\n\n/** OSGi DI */\nvoid setUrlSigningService(UrlSigningService service) {\n  this.urlSigningService = service;\n}\n\n\u2026 \n\nString urlToSign = \u201chttp://my.custom.url/with/path.mp4\u201d;\nlong signedUrlExpiresDuration = 60;\n\nif (urlSigningService.accepts(urlToSign)) {\n  try {\n    String signedUrl = urlSigningService.sign(\n        urlToSign,\n        signedUrlExpiresDuration,\n        null,\n        null);\n    ...\n  } catch (UrlSigningException e) {\n    // handle exception\n  }\n}",
            "title": "Option #1: Use the existing URL Signing Service**"
        },
        {
            "location": "/modules/stream-security/#option-2-create-custom-url-signing-service",
            "text": "Based on the technical details outlined in the Opencast Signing Protocol, a URL Signing Service that is compatible with the other existing parts of the Stream Security system can be implemented.",
            "title": "Option #2: Create custom URL Signing Service"
        },
        {
            "location": "/modules/stream-security/#option-3-give-access-to-third-party-systems-to-signing-rest-endpoints",
            "text": "Opencast servers that have been configured to use URL signing service will have two REST endpoints at http://admin.matterhorn.com:8080/signing/docs. The accepts endpoint will return true if the Opencast server can sign a particular URL. The sign endpoint will return a signed URL when the correct parameters are given. Due to the sensitive nature of these endpoints they are locked down to be only accessible by a user with ROLE_ADMIN privileges in the etc/security/mh_default_org.xml configuration file. Creating a new user with this role and accessing the endpoint using these credentials will allow a third party system to sign any URLs.",
            "title": "Option #3: Give Access to Third Party Systems to Signing REST Endpoints"
        },
        {
            "location": "/modules/stream-security/#further-information",
            "text": "For an overview of Stream Security, please consult the sub section Stream Security in the section Modules of the Admin Guide.  For information about how to configure stream security on your Opencast servers, please consult the sub section Stream Security in the section Configuration of the Admin Guide",
            "title": "Further information"
        },
        {
            "location": "/infrastructure/",
            "text": "Opencast Infrastructure\n\n\nList of Opencast project infrastructure and administrators.\n\n\nTest Servers\n\n\n\n\n\n\n\n\nInstitution\n\n\nHostname\n\n\nAdmin (Software)\n\n\nAdmin (Hardware)\n\n\n\n\n\n\n\n\n\n\nUniversity of Saskatchewan\n\n\ntestallinone.usask.ca\n\n\nLars Kiesow\n\n\nGreg Logan\n\n\n\n\n\n\nUniversity of Saskatchewan\n\n\ntestadmin.usask.ca\n\n\nLars Kiesow\n\n\nGreg Logan\n\n\n\n\n\n\nUniversity of Saskatchewan\n\n\ntestengage.usask.ca\n\n\nLars Kiesow\n\n\nGreg Logan\n\n\n\n\n\n\nUniversity of Saskatchewan\n\n\ntestworker1.usask.ca\n\n\nLars Kiesow\n\n\nGreg Logan\n\n\n\n\n\n\nUniversity of Saskatchewan\n\n\ntestworker2.usask.ca\n\n\nLars Kiesow\n\n\nGreg Logan\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\noctestallinone.virtuos.uos.de\n\n\nLars Kiesow\n\n\nLars Kiesow\n\n\n\n\n\n\n\n\nMaven Repository (Nexus)\n\n\n\n\n\n\n\n\nInstitution\n\n\nHostname\n\n\nAdmin (Software)\n\n\nAdmin (Hardware)\n\n\nNotes\n\n\n\n\n\n\n\n\n\n\nETH Zurich\n\n\nopencasr-nexus.ethz.ch\n\n\nLars Kiesow\n\n\nMarkus Borzechowski\n\n\n\n\n\n\n\n\nHarvard DCE\n\n\nnexus.dcex.harvard.edu\n\n\nLars Kiesow\n\n\nNaomi Maekawa\n\n\nAmazon Coud\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\nnexus.virtuos.uos.de\n\n\nLars Kiesow\n\n\nLars Kiesow\n\n\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\nnexus.opencast.org\n\n\nLars Kiesow\n\n\nLars Kiesow\n\n\nGeoIP Redirect\n\n\n\n\n\n\n\n\nNexus administration:\n\n\n\n\nGreg Logan (usask)\n\n\nLars Kiesow (uos, eth, dce)\n\n\nMichael Stypa (uos, eth, dce)\n\n\n\n\nOther Hosted Services\n\n\n\n\n\n\n\n\nInstitution\n\n\nHostname\n\n\nAdmin (Software)\n\n\nAdmin (Hardware)\n\n\n\n\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\nrepo.virtuos.uos.de\n\n\nLars Kiesow\n\n\nLars Kiesow\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\npullrequests.opencast.org\n\n\nLars Kiesow\n\n\nLars Kiesow\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\ndocs.opencast.org\n\n\nLars Kiesow\n\n\nLars Kiesow\n\n\n\n\n\n\nUniversity of Osnabr\u00fcck\n\n\nopencast.org\n\n\nR\u00fcdiger Rolf\n\n\nR\u00fcdiger Rolf\n\n\n\n\n\n\n\n\nAccount Management\n\n\n\n\nopencast.jira.com\n\n\nAlexander Bias\n\n\nGreg Logan\n\n\nLars Kiesow\n\n\nAndy Wasklewicz (Contact to Atlassian)\n\n\n\n\n\n\nbitbucket.org/opencast-community\n\n\nGreg Logan\n\n\nLars Kiesow\n\n\n\n\n\n\ngithub.com/opencast\n\n\nGreg Logan\n\n\nLars Kiesow\n\n\n\n\n\n\ntwitter.com/openmatter\n\n\nLars Kiesow\n\n\n\n\n\n\nfacebook.com/opencast\n\n\nR\u00fcdiger Rolf\n\n\n\n\n\n\nyoutube.com/opencast\n\n\nR\u00fcdiger Rolf\n\n\n\n\n\n\ncrowdin.com/project/opencast-matterhorn\n\n\nAdam McKenzie\n\n\nAndy Wasklewicz\n\n\nBasil Brunner\n\n\nLars Kiesow\n\n\nMichael Stypa\n\n\nTobias Schiebeck\n\n\nTobias Wunden\n\n\n\n\n\n\n\n\nVideo Conferencing\n\n\n\n\nBigBlueButton\n\n\nConference rooms\n\n\nPassword: welcome\n\n\n\n\n\n\nRecordings\n\n\nFlash based\n\n\n\n\n\n\nAppearIn\n\n\nConference room\n\n\nWebRTC based; Max. 8 persons",
            "title": "Overview"
        },
        {
            "location": "/infrastructure/#opencast-infrastructure",
            "text": "List of Opencast project infrastructure and administrators.",
            "title": "Opencast Infrastructure"
        },
        {
            "location": "/infrastructure/#test-servers",
            "text": "Institution  Hostname  Admin (Software)  Admin (Hardware)      University of Saskatchewan  testallinone.usask.ca  Lars Kiesow  Greg Logan    University of Saskatchewan  testadmin.usask.ca  Lars Kiesow  Greg Logan    University of Saskatchewan  testengage.usask.ca  Lars Kiesow  Greg Logan    University of Saskatchewan  testworker1.usask.ca  Lars Kiesow  Greg Logan    University of Saskatchewan  testworker2.usask.ca  Lars Kiesow  Greg Logan    University of Osnabr\u00fcck  octestallinone.virtuos.uos.de  Lars Kiesow  Lars Kiesow",
            "title": "Test Servers"
        },
        {
            "location": "/infrastructure/#maven-repository-nexus",
            "text": "Institution  Hostname  Admin (Software)  Admin (Hardware)  Notes      ETH Zurich  opencasr-nexus.ethz.ch  Lars Kiesow  Markus Borzechowski     Harvard DCE  nexus.dcex.harvard.edu  Lars Kiesow  Naomi Maekawa  Amazon Coud    University of Osnabr\u00fcck  nexus.virtuos.uos.de  Lars Kiesow  Lars Kiesow     University of Osnabr\u00fcck  nexus.opencast.org  Lars Kiesow  Lars Kiesow  GeoIP Redirect     Nexus administration:   Greg Logan (usask)  Lars Kiesow (uos, eth, dce)  Michael Stypa (uos, eth, dce)",
            "title": "Maven Repository (Nexus)"
        },
        {
            "location": "/infrastructure/#other-hosted-services",
            "text": "Institution  Hostname  Admin (Software)  Admin (Hardware)      University of Osnabr\u00fcck  repo.virtuos.uos.de  Lars Kiesow  Lars Kiesow    University of Osnabr\u00fcck  pullrequests.opencast.org  Lars Kiesow  Lars Kiesow    University of Osnabr\u00fcck  docs.opencast.org  Lars Kiesow  Lars Kiesow    University of Osnabr\u00fcck  opencast.org  R\u00fcdiger Rolf  R\u00fcdiger Rolf",
            "title": "Other Hosted Services"
        },
        {
            "location": "/infrastructure/#account-management",
            "text": "opencast.jira.com  Alexander Bias  Greg Logan  Lars Kiesow  Andy Wasklewicz (Contact to Atlassian)    bitbucket.org/opencast-community  Greg Logan  Lars Kiesow    github.com/opencast  Greg Logan  Lars Kiesow    twitter.com/openmatter  Lars Kiesow    facebook.com/opencast  R\u00fcdiger Rolf    youtube.com/opencast  R\u00fcdiger Rolf    crowdin.com/project/opencast-matterhorn  Adam McKenzie  Andy Wasklewicz  Basil Brunner  Lars Kiesow  Michael Stypa  Tobias Schiebeck  Tobias Wunden",
            "title": "Account Management"
        },
        {
            "location": "/infrastructure/#video-conferencing",
            "text": "BigBlueButton  Conference rooms  Password: welcome    Recordings  Flash based    AppearIn  Conference room  WebRTC based; Max. 8 persons",
            "title": "Video Conferencing"
        },
        {
            "location": "/infrastructure/nexus/",
            "text": "Opencast Nexus (Maven Repository)\n\n\nThe Maven Nexus server maintains a copy of all the Java dependencies used by Opencast.  The Opencast project has several\nNexus servers located around the world. For an up-to-date list of servers as well as their current status and your\nautomatic selection, have a look at the \nNexus GeoIP Redirect Service\n.\n\n\nGeoIP Server Set-up\n\n\nThe main entry point for retrieving artifacts is nexus.opencast.org, which runs a \nGeoIP based Gateway service\n\n to probe which Nexus server is likely the best to use for that request and\nthen redirects the request accordingly.\n\n\nThe Nexus servers are configured to retrieve and cache artifacts from:\n\n\n\n\nApache Snapshots\n\n\nCodehaus Snapshots\n\n\nMaven Central\n\n\nOpencast Master\n\n\n\n\nOpencast Master\n is a special repository pointing to the \nOpencast Nexus server hosted at the University of Osnabr\u00fcck\n\n. It does not only cache other repositories but also host Opencast internal artifacts.\nSince all other repositories will automatically retrieve artifacts from this repository, uploading artifacts to this\nrepository will suffice to distribute them in the whole Nexus infrastructure.\n\n\nAdding Libraries To The Repository\n\n\n\n\nLogin as an administrator on the \nOpencast Nexus Master\n\n\nSelect repository\n\n\nSelect the artifact upload tab\n\n\nFill in the details and upload the file\n\n\n\n\nAs result of the Nexus caching mechanism, it might take up to 48h until the artifacts are distributed to all Nexus\nrepository nodes.\n\n\nSetting-up Another Nexus Server\n\n\nHaving a Nexus server run in your local network can significantly improve the speed artifacts are retrieved while\nbuilding Opencast.\n\n\nSet-up Using Docker\n\n\nThere is a preconfigured Docker image for a Nexus server set-up for Opencast. To run an Opencast Nexus using Docker,\nfollow these steps:\n\n\ndocker pull lkiesow/opencast-nexus-oss\ndocker run \\\n   --name opencast-nexus-oss \\\n   -p 8081:8081 \\\n  -v /place/for/nexus/data/on/host/machine:/var/lib/nexus-oss \\\n  lkiesow/opencast-nexus-oss\n\n\n\n\n\nThe \n-p\n option will map the internal port of the Nexus server in Docker to the port on the host machine.\n\n\nThe \n-v\n option will mount the folder \n/place/for/nexus/data\n from the Docker host machine to \n/var/lib/nexus-oss\n\n  container. This will keep all your runtime data our of the container and you can then later upgrade to a new Nexus\n  version by just getting a new container.\n\n\n\n\nMake sure to log-in and change the password for the user \nadmin\n as soon as your Nexus is running. To do that, head to\n\nhttp://localhost:8081/nexus\n and log-in as user \nadmin\n using the password \nadmin123\n.\n\n\nUpdate Using Docker\n\n\nIf you followed the set-up guide above, the main configuration, along with all the Nexus data is stored on the host\nmachine. Hence we just need to get the latest Docker image and replace the Nexus container:\n\n\ndocker rm -f opencast-nexus-oss\ndocker pull lkiesow/opencast-nexus-oss\ndocker run \\\n   --name opencast-nexus-oss \\\n   -p 8081:8081 \\\n  -v /place/for/nexus/data/on/host/machine:/var/lib/nexus-oss \\\n  lkiesow/opencast-nexus-oss\n\n\n\nSet-up Using RPMs\n\n\nFor Nexus-OSS, there is a \nFedora Copr repository available\n\nfor CentOS/RHEL 7.x and the latest Fedora versions. You can use these to easily istall Nexus.\n\n\nFirst, enable the repository. For CentOS/RHEL 7.x this would be:\n\n\ncurl -o /etc/yum.repos.d/lkiesow-nexus-oss-epel-7.repo \\\n  https://copr.fedorainfracloud.org/coprs/lkiesow/nexus-oss/repo/epel-7/lkiesow-nexus-oss-epel-7.repo\n\n\n\nThen istall Nexus-OSS:\n\n\nyum install nexus-oss\n\n\n\nDownload the \nconfiguration file\n and place it in \n/var/lib/nexus-oss/conf/\n:\n\n\nmkdir -p /var/lib/nexus-oss/conf/\ncp nexus.xml /var/lib/nexus-oss/conf/nexus.xml\n\n\n\nFinally, activate the service:\n\n\nsystemctl start nexus-oss\nsystemctl enable nexus-oss\n\n\n\nMake sure to log-in and change the password for the user \nadmin\n as soon as your Nexus is running. To do that, head to\n\nhttp://localhost:8081/nexus\n and log-in as user \nadmin\n using the password \nadmin123\n.\n\n\nUse a Specific Opencast Nexus\n\n\nIf you did set-up a local Nexus repository you can add a custom Maven configuration to overwrite the global nexus server\nsettings. To do that, create a user specific Maven settings file in \n~/.m2/settings.xml\n like this:\n\n\n<settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n  http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <profiles>\n    <profile>\n      <id>set-opencast-nexus</id>\n      <properties>\n        <opencast.nexus.url>http://nexus.example.com</opencast.nexus.url>\n      </properties>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>set-opencast-nexus</activeProfile>\n  </activeProfiles>\n</settings>\n\n\n\nThis will let Maven overwrite the \nopencast.nexus.url\n property used by Opencast to determine the Nexus server during\nthe build process.",
            "title": "Nexus Maven Repository"
        },
        {
            "location": "/infrastructure/nexus/#opencast-nexus-maven-repository",
            "text": "The Maven Nexus server maintains a copy of all the Java dependencies used by Opencast.  The Opencast project has several\nNexus servers located around the world. For an up-to-date list of servers as well as their current status and your\nautomatic selection, have a look at the  Nexus GeoIP Redirect Service .",
            "title": "Opencast Nexus (Maven Repository)"
        },
        {
            "location": "/infrastructure/nexus/#geoip-server-set-up",
            "text": "The main entry point for retrieving artifacts is nexus.opencast.org, which runs a  GeoIP based Gateway service  to probe which Nexus server is likely the best to use for that request and\nthen redirects the request accordingly.  The Nexus servers are configured to retrieve and cache artifacts from:   Apache Snapshots  Codehaus Snapshots  Maven Central  Opencast Master   Opencast Master  is a special repository pointing to the  Opencast Nexus server hosted at the University of Osnabr\u00fcck . It does not only cache other repositories but also host Opencast internal artifacts.\nSince all other repositories will automatically retrieve artifacts from this repository, uploading artifacts to this\nrepository will suffice to distribute them in the whole Nexus infrastructure.",
            "title": "GeoIP Server Set-up"
        },
        {
            "location": "/infrastructure/nexus/#adding-libraries-to-the-repository",
            "text": "Login as an administrator on the  Opencast Nexus Master  Select repository  Select the artifact upload tab  Fill in the details and upload the file   As result of the Nexus caching mechanism, it might take up to 48h until the artifacts are distributed to all Nexus\nrepository nodes.",
            "title": "Adding Libraries To The Repository"
        },
        {
            "location": "/infrastructure/nexus/#setting-up-another-nexus-server",
            "text": "Having a Nexus server run in your local network can significantly improve the speed artifacts are retrieved while\nbuilding Opencast.",
            "title": "Setting-up Another Nexus Server"
        },
        {
            "location": "/infrastructure/nexus/#set-up-using-docker",
            "text": "There is a preconfigured Docker image for a Nexus server set-up for Opencast. To run an Opencast Nexus using Docker,\nfollow these steps:  docker pull lkiesow/opencast-nexus-oss\ndocker run \\\n   --name opencast-nexus-oss \\\n   -p 8081:8081 \\\n  -v /place/for/nexus/data/on/host/machine:/var/lib/nexus-oss \\\n  lkiesow/opencast-nexus-oss   The  -p  option will map the internal port of the Nexus server in Docker to the port on the host machine.  The  -v  option will mount the folder  /place/for/nexus/data  from the Docker host machine to  /var/lib/nexus-oss \n  container. This will keep all your runtime data our of the container and you can then later upgrade to a new Nexus\n  version by just getting a new container.   Make sure to log-in and change the password for the user  admin  as soon as your Nexus is running. To do that, head to http://localhost:8081/nexus  and log-in as user  admin  using the password  admin123 .",
            "title": "Set-up Using Docker"
        },
        {
            "location": "/infrastructure/nexus/#update-using-docker",
            "text": "If you followed the set-up guide above, the main configuration, along with all the Nexus data is stored on the host\nmachine. Hence we just need to get the latest Docker image and replace the Nexus container:  docker rm -f opencast-nexus-oss\ndocker pull lkiesow/opencast-nexus-oss\ndocker run \\\n   --name opencast-nexus-oss \\\n   -p 8081:8081 \\\n  -v /place/for/nexus/data/on/host/machine:/var/lib/nexus-oss \\\n  lkiesow/opencast-nexus-oss",
            "title": "Update Using Docker"
        },
        {
            "location": "/infrastructure/nexus/#set-up-using-rpms",
            "text": "For Nexus-OSS, there is a  Fedora Copr repository available \nfor CentOS/RHEL 7.x and the latest Fedora versions. You can use these to easily istall Nexus.  First, enable the repository. For CentOS/RHEL 7.x this would be:  curl -o /etc/yum.repos.d/lkiesow-nexus-oss-epel-7.repo \\\n  https://copr.fedorainfracloud.org/coprs/lkiesow/nexus-oss/repo/epel-7/lkiesow-nexus-oss-epel-7.repo  Then istall Nexus-OSS:  yum install nexus-oss  Download the  configuration file  and place it in  /var/lib/nexus-oss/conf/ :  mkdir -p /var/lib/nexus-oss/conf/\ncp nexus.xml /var/lib/nexus-oss/conf/nexus.xml  Finally, activate the service:  systemctl start nexus-oss\nsystemctl enable nexus-oss  Make sure to log-in and change the password for the user  admin  as soon as your Nexus is running. To do that, head to http://localhost:8081/nexus  and log-in as user  admin  using the password  admin123 .",
            "title": "Set-up Using RPMs"
        },
        {
            "location": "/infrastructure/nexus/#use-a-specific-opencast-nexus",
            "text": "If you did set-up a local Nexus repository you can add a custom Maven configuration to overwrite the global nexus server\nsettings. To do that, create a user specific Maven settings file in  ~/.m2/settings.xml  like this:  <settings xmlns=\"http://maven.apache.org/SETTINGS/1.0.0\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n  xsi:schemaLocation=\"http://maven.apache.org/SETTINGS/1.0.0\n  http://maven.apache.org/xsd/settings-1.0.0.xsd\">\n  <profiles>\n    <profile>\n      <id>set-opencast-nexus</id>\n      <properties>\n        <opencast.nexus.url>http://nexus.example.com</opencast.nexus.url>\n      </properties>\n    </profile>\n  </profiles>\n  <activeProfiles>\n    <activeProfile>set-opencast-nexus</activeProfile>\n  </activeProfiles>\n</settings>  This will let Maven overwrite the  opencast.nexus.url  property used by Opencast to determine the Nexus server during\nthe build process.",
            "title": "Use a Specific Opencast Nexus"
        }
    ]
}